{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/bluelake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/bluelake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/bluelake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/bluelake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/bluelake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/bluelake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/bluelake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/bluelake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/bluelake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/bluelake/source/js/toctotop.js","path":"js/toctotop.js","modified":1,"renderable":1},{"_id":"themes/bluelake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/bluelake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/bluelake/source/img/yd.jpg","path":"img/yd.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"307a8c798cd04d1c6ec833755728419296ef2f68","modified":1564124121573},{"_id":"themes/bluelake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1564124121581},{"_id":"themes/bluelake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1564124121581},{"_id":"themes/bluelake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1564124121581},{"_id":"themes/bluelake/_config.yml","hash":"74937235df7683d595ab9415ca79a9627f920c3b","modified":1564124121581},{"_id":"themes/bluelake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1564124121581},{"_id":"source/_posts/Deepin-系统优化.md","hash":"49e9e9fa79d1ce831b25ac16bf0ac3bb9172d4f3","modified":1564126544632},{"_id":"source/_posts/GitHub设置无密码登录.md","hash":"73f65bdfc0824204588b6fb33b4c4f629dc4d4be","modified":1564124121573},{"_id":"source/_posts/Git撤销合并操作.md","hash":"7e1bdcf59d04f2312751b8f38e00044ce6073a17","modified":1564124121573},{"_id":"source/_posts/Markdown-tutorial.md","hash":"bfcedb761a2a8c6190b9dbfcaf68253717fc1a93","modified":1564124121573},{"_id":"source/_posts/Windows-System-Ubuntu16-04.md","hash":"5f06c4fb592706fe56ad3634c9caa98f9dcb02b6","modified":1564124121573},{"_id":"source/_posts/caffe-yolo-summary.md","hash":"e2fb0273cc9b3209f37fc69b90b03f8a8408557d","modified":1564124121573},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv.md","hash":"617949e7dd8dd2b4ac5fd4097b1e22f1f74b7bf8","modified":1564124121577},{"_id":"source/_posts/提醒事项.md","hash":"37fdb374192547681bf7234675037484cbcbb880","modified":1564124121581},{"_id":"source/_posts/落星.md","hash":"08a14d30bbc0c2191e220fc11657c047400f6ea8","modified":1564124121581},{"_id":"source/about/index.md","hash":"8c4323a270086b55133171aebf142dfe42bbf039","modified":1564124121581},{"_id":"themes/bluelake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1564124121581},{"_id":"themes/bluelake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1564124121581},{"_id":"themes/bluelake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1564124121581},{"_id":"themes/bluelake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1564124121581},{"_id":"themes/bluelake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1564124121581},{"_id":"themes/bluelake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1564124121581},{"_id":"themes/bluelake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1564124121581},{"_id":"themes/bluelake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1564124121581},{"_id":"themes/bluelake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1564124121581},{"_id":"themes/bluelake/layout/base.jade","hash":"2e65a06a499fbb67c72f8345d71222e40e9ef523","modified":1564124121581},{"_id":"themes/bluelake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1564124121581},{"_id":"themes/bluelake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1564124121581},{"_id":"themes/bluelake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1564124121581},{"_id":"themes/bluelake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1564124121581},{"_id":"themes/bluelake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1564124121581},{"_id":"themes/bluelake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1564124121581},{"_id":"themes/bluelake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1564124121585},{"_id":"source/_posts/Markdown-tutorial/1553769689177.png","hash":"1d1846c92e3bc04df98ed011e205ce81b69b2dfd","modified":1564124121573},{"_id":"source/_posts/Windows-System-Ubuntu16-04/2.PNG","hash":"9d83c38deee54dd6d34560b4d437a7b04c79df0c","modified":1564124121573},{"_id":"source/_posts/caffe-yolo-summary/1.png","hash":"6f165d5321ef9961587ab9ab5588135ef69ddc4c","modified":1564124121573},{"_id":"source/_posts/caffe-yolo-summary/output.gv.svg","hash":"e1d60e64243d93495f80a33fff6ab0a6154ae791","modified":1564124121577},{"_id":"source/_posts/caffe-yolo-summary/4.png","hash":"f9d5eb26af1592626662d5c47e3ea6d4ceaed96b","modified":1564124121577},{"_id":"source/_posts/caffe-yolo-summary/train.prototxt","hash":"307b74f998429bfdd8dd0085623e92867941087b","modified":1564124121577},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/5.png","hash":"029eb486dc4ac201c4718b8515a23946b28f37c2","modified":1564124121581},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/4.png","hash":"cf65b7c50ef6cfc6e45870a3c6249d3d97da7dd4","modified":1564124121581},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/2.png","hash":"77f8ae6b7075afc6db63888c31a1362e03202879","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/after_footer.jade","hash":"310716a7a5c7c4ccb6c68afd6aff713c17c7a2d1","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/footer.jade","hash":"15603738cf738aae32164a23f872be36a50ed87e","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1564124121581},{"_id":"themes/bluelake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1564124121581},{"_id":"themes/bluelake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1564124121581},{"_id":"themes/bluelake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1564124121581},{"_id":"themes/bluelake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1564124121581},{"_id":"themes/bluelake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1564124121581},{"_id":"themes/bluelake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1564124121581},{"_id":"themes/bluelake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1564124121581},{"_id":"themes/bluelake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1564124121581},{"_id":"themes/bluelake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1564124121581},{"_id":"themes/bluelake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1564124121581},{"_id":"themes/bluelake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1564124121585},{"_id":"themes/bluelake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1564124121585},{"_id":"themes/bluelake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1564124121585},{"_id":"themes/bluelake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1564124121585},{"_id":"themes/bluelake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1564124121585},{"_id":"themes/bluelake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1564124121585},{"_id":"themes/bluelake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1564124121585},{"_id":"source/_posts/Windows-System-Ubuntu16-04/1.PNG","hash":"5de7c47bbe7d4944e12ac8fbdb5405f7414f6013","modified":1564124121573},{"_id":"source/_posts/caffe-yolo-summary/2.png","hash":"9c5d6719848ae2e0ff0d68b5838f8321c17c8963","modified":1564124121573},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/1.png","hash":"c0483f03da4c8c56b0df34212586aeb2617b34a4","modified":1564124121581},{"_id":"themes/bluelake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1564124121585},{"_id":"source/_posts/caffe-yolo-summary/3.png","hash":"dabbdbce51bb5d0a5622be2c2a44475ba2580f2f","modified":1564124121577},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/6.png","hash":"674e584d02568ce0a9d34572e9591f9879fc43b8","modified":1564124121581},{"_id":"themes/bluelake/source/img/yd.jpg","hash":"38cb7c8806958c303086214ffed7319826dfc15d","modified":1564124121585},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/3.png","hash":"fcff9c5829ad6d56256cd4dbec4ef447b31eab8d","modified":1564124121581},{"_id":"source/_posts/caffe-yolo-summary/git-cercs-13-06.pdf","hash":"798396b7ce5ab62a8a109321e1a1c9f92a6532d8","modified":1564124121577},{"_id":"public/baidusitemap.xml","hash":"4e51b8b77f9e038edf2d62f5ddc5208b30833e38","modified":1564126658534},{"_id":"public/atom.xml","hash":"6d76bb706de63f793f9cb655eafb1ad71ec21ec6","modified":1564126658535},{"_id":"public/content.json","hash":"7d9249cb154e7503a60900c89a87d639fc5a4bd8","modified":1564126658536},{"_id":"public/sitemap.xml","hash":"e99d963076e13f8cfba6dfb48ff27ac1f4b47536","modified":1564126658544},{"_id":"public/about/index.html","hash":"d33954f42bbf36dc6f596b06a9491dea1f25d18e","modified":1564126658548},{"_id":"public/2019/05/03/Windows-System-Ubuntu16-04/index.html","hash":"d5d5c712967ac90a278a10252856cf3f5ae65cca","modified":1564126658549},{"_id":"public/2019/04/19/提醒事项/index.html","hash":"96ba7b7520adbdfad0f6bff3f0408824a831f936","modified":1564126658549},{"_id":"public/2019/04/19/落星/index.html","hash":"fd4870bbc8acb0a7460935fe9791adc0c87174ac","modified":1564126658549},{"_id":"public/2019/04/03/GitHub设置无密码登录/index.html","hash":"35cde79985192528179fc2b64b65e490317e20ec","modified":1564126658549},{"_id":"public/2019/01/31/Git撤销合并操作/index.html","hash":"b4fb8ad4ad7d4006fd7385ff1d4ee679d7c60a25","modified":1564126658549},{"_id":"public/archives/index.html","hash":"4525392119723a98d4b9e1b80f6ef590280c07b1","modified":1564126658549},{"_id":"public/archives/2018/index.html","hash":"f0815c4e228f34bb2628764e49dfc0870bd8240a","modified":1564126658549},{"_id":"public/archives/2018/12/index.html","hash":"f0815c4e228f34bb2628764e49dfc0870bd8240a","modified":1564126658549},{"_id":"public/archives/2019/index.html","hash":"6869ed3ed525af3b40e4aa81a04f4bfd5ca332ad","modified":1564126658549},{"_id":"public/archives/2019/01/index.html","hash":"aee71e565afb805e40780b0106d8a098a36213dd","modified":1564126658549},{"_id":"public/archives/2019/04/index.html","hash":"0db86a6391a53e1fc4a69e30a9a9e4a8e003c6e5","modified":1564126658549},{"_id":"public/archives/2019/05/index.html","hash":"7d9239c2b731906accf030ad0fd7f450bcd71251","modified":1564126658550},{"_id":"public/archives/2019/07/index.html","hash":"79f480786b00f2eeafb07035ab944d3a20a16d1a","modified":1564126658550},{"_id":"public/index.html","hash":"21eb7be3e88ffcd44d0687d9b0c075b6a3f68b01","modified":1564126658550},{"_id":"public/tags/git/index.html","hash":"238e42314262444d965315485aeefa1fea96dfea","modified":1564126658550},{"_id":"public/tags/Ubuntu/index.html","hash":"29bb4c94fe2366973aec8a55784235080c41c639","modified":1564126658550},{"_id":"public/tags/Tutorial/index.html","hash":"6f987665ec257e546dc217fa3ce537de8da80871","modified":1564126658550},{"_id":"public/tags/caffe/index.html","hash":"c0c3c60df25bef9f4a89d42464f918949ce241aa","modified":1564126658550},{"_id":"public/tags/生活点滴/index.html","hash":"29e02cf189530270f812e508b601508c4b26b902","modified":1564126658551},{"_id":"public/tags/cv/index.html","hash":"dcc3cb8093739ad81052d9363d01b6a21daeed39","modified":1564126658551},{"_id":"public/2019/07/26/Deepin-系统优化/index.html","hash":"e03aabf12c92109f9f4dc25b773423dbbf013528","modified":1564126658551},{"_id":"public/2019/05/03/Markdown-tutorial/index.html","hash":"f5e8b3b5dc8b96c31b8ecba29c785adee7b39b7a","modified":1564126658551},{"_id":"public/2019/01/08/caffe-yolo-summary/index.html","hash":"9af00ae1f1897931922b60f1a121412c231c200a","modified":1564126658551},{"_id":"public/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/index.html","hash":"645ea0bd2785dd919750092d5cf1a643c312cd36","modified":1564126658551},{"_id":"public/CNAME","hash":"307a8c798cd04d1c6ec833755728419296ef2f68","modified":1564126658560},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1564126658560},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1564126658560},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1564126658560},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1564126658560},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1564126658560},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1564126658560},{"_id":"public/2019/05/03/Markdown-tutorial/1553769689177.png","hash":"1d1846c92e3bc04df98ed011e205ce81b69b2dfd","modified":1564126658560},{"_id":"public/2019/05/03/Windows-System-Ubuntu16-04/2.PNG","hash":"9d83c38deee54dd6d34560b4d437a7b04c79df0c","modified":1564126658560},{"_id":"public/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/4.png","hash":"cf65b7c50ef6cfc6e45870a3c6249d3d97da7dd4","modified":1564126658560},{"_id":"public/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/1.png","hash":"c0483f03da4c8c56b0df34212586aeb2617b34a4","modified":1564126658560},{"_id":"public/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/5.png","hash":"029eb486dc4ac201c4718b8515a23946b28f37c2","modified":1564126658560},{"_id":"public/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/2.png","hash":"77f8ae6b7075afc6db63888c31a1362e03202879","modified":1564126658561},{"_id":"public/2019/01/08/caffe-yolo-summary/1.png","hash":"6f165d5321ef9961587ab9ab5588135ef69ddc4c","modified":1564126658561},{"_id":"public/2019/01/08/caffe-yolo-summary/4.png","hash":"f9d5eb26af1592626662d5c47e3ea6d4ceaed96b","modified":1564126658561},{"_id":"public/2019/01/08/caffe-yolo-summary/output.gv.svg","hash":"e1d60e64243d93495f80a33fff6ab0a6154ae791","modified":1564126658561},{"_id":"public/2019/01/08/caffe-yolo-summary/train.prototxt","hash":"307b74f998429bfdd8dd0085623e92867941087b","modified":1564126658561},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1564126658662},{"_id":"public/2019/01/08/caffe-yolo-summary/2.png","hash":"9c5d6719848ae2e0ff0d68b5838f8321c17c8963","modified":1564126658662},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1564126658665},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1564126658665},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1564126658665},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1564126658665},{"_id":"public/2019/05/03/Windows-System-Ubuntu16-04/1.PNG","hash":"5de7c47bbe7d4944e12ac8fbdb5405f7414f6013","modified":1564126658665},{"_id":"public/2019/01/08/caffe-yolo-summary/3.png","hash":"dabbdbce51bb5d0a5622be2c2a44475ba2580f2f","modified":1564126658665},{"_id":"public/css/style.css","hash":"0b87f0674cad37ed4006f989cca7e1cd9f9568a3","modified":1564126658750},{"_id":"public/img/yd.jpg","hash":"38cb7c8806958c303086214ffed7319826dfc15d","modified":1564126658750},{"_id":"public/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/6.png","hash":"674e584d02568ce0a9d34572e9591f9879fc43b8","modified":1564126658750},{"_id":"public/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/3.png","hash":"fcff9c5829ad6d56256cd4dbec4ef447b31eab8d","modified":1564126658751},{"_id":"public/2019/01/08/caffe-yolo-summary/git-cercs-13-06.pdf","hash":"798396b7ce5ab62a8a109321e1a1c9f92a6532d8","modified":1564126658753}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-12-26T16:56:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-12-27 00:56:05\n---\n","updated":"2019-07-26T06:55:21.581Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjyjsmkz50001afp21ds84sg0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"GitHub设置无密码登录","date":"2019-04-03T12:07:01.000Z","_content":"\n\n**GitHub项目的授权方式有两种方式：Https和SSH。**\n\nHttps可以随意克隆github上的项目，而不管是谁的；而SSH则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。\n\nhttps url在push的时候是需要验证用户名和密码的；而 SSH在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。\n\n\n\n## 一 安装ssh证书\n\n------\n\n1. **首先需要检查你电脑是否已经有 SSH key ，在 git Bash 客户端，输入如下代码：**\n\n```bash\n    $ cd ~/.ssh\n    $ ls\n```\n\n```\n\t这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么则跳过步骤2。\n```\n\n\n\n2. **创建一个 SSH key **\n\n```bash\n    $ ssh-keygen -t rsa -C \"your_email@example.com\"\n```\n\n```\n    代码参数含义：\n    -t 指定密钥类型，默认是 rsa ，可以省略。\n    -C 设置注释文字，比如邮箱。\n    -f 指定密钥文件存储文件名。\n\n    接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），可以不输入密码，直接按回车。\n```\n\n\n\n3. **添加你的 SSH key 到 github上面去**\n\n   a. 首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：\n\n```bash\n\t\t$ clip < ~/.ssh/id_rsa.pub\n```\n\n  \tb. 登录你的github账号，从又上角的settings进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。\n  \tc. 点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。title随意。\n\n\n\n4. **测试一下该SSH key**\n\n```bash\n    $ ssh -T git@github.com\n```\n\n​\t当你输入以上代码时，会有一段警告代码，如：\n\n```\n    The authenticity of host 'github.com (207.97.227.239)' can't be established.\n    # RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n    # Are you sure you want to continue connecting (yes/no)?\n```\n\n​\t输入 yes 既可。\n\n​\t如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码\n\n​\t注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。\n\n​\t密码正确后你会看到下面这段话，如：\n\n```\n    Hi username! You've successfully authenticated, but GitHub does not\n    # provide shell access.\n```\n\n​\t如果用户名是正确的,你已经成功设置SSH密钥。\n\n\n\n------\n\n## 二 已有的项目切换到使用SSH方式连接\n\n​\t安装ssh证书，每次push pull 都需要输入git密码，原因是使用了https方式 push。\n\n1. 在terminal里边 输入  git remote -v ，可以看到形如一下的返回结果：\n\n```bash\n    origin  https://cleey@github.com/cleey/phppoem.git (fetch)\n    origin  https://cleey@github.com/cleey/phppoem.git (push)\n```\n\n2. 安装以下方式更换成ssh方式的：\n\n```bash\n    git remote rm origin\n    git remote add origin git@github.com:cleey/phppoem.git\n    git push origin \n```\n\n","source":"_posts/GitHub设置无密码登录.md","raw":"---\ntitle: GitHub设置无密码登录\ndate: 2019-04-03 20:07:01\ntags: [git]\n---\n\n\n**GitHub项目的授权方式有两种方式：Https和SSH。**\n\nHttps可以随意克隆github上的项目，而不管是谁的；而SSH则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。\n\nhttps url在push的时候是需要验证用户名和密码的；而 SSH在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。\n\n\n\n## 一 安装ssh证书\n\n------\n\n1. **首先需要检查你电脑是否已经有 SSH key ，在 git Bash 客户端，输入如下代码：**\n\n```bash\n    $ cd ~/.ssh\n    $ ls\n```\n\n```\n\t这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么则跳过步骤2。\n```\n\n\n\n2. **创建一个 SSH key **\n\n```bash\n    $ ssh-keygen -t rsa -C \"your_email@example.com\"\n```\n\n```\n    代码参数含义：\n    -t 指定密钥类型，默认是 rsa ，可以省略。\n    -C 设置注释文字，比如邮箱。\n    -f 指定密钥文件存储文件名。\n\n    接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），可以不输入密码，直接按回车。\n```\n\n\n\n3. **添加你的 SSH key 到 github上面去**\n\n   a. 首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：\n\n```bash\n\t\t$ clip < ~/.ssh/id_rsa.pub\n```\n\n  \tb. 登录你的github账号，从又上角的settings进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。\n  \tc. 点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。title随意。\n\n\n\n4. **测试一下该SSH key**\n\n```bash\n    $ ssh -T git@github.com\n```\n\n​\t当你输入以上代码时，会有一段警告代码，如：\n\n```\n    The authenticity of host 'github.com (207.97.227.239)' can't be established.\n    # RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n    # Are you sure you want to continue connecting (yes/no)?\n```\n\n​\t输入 yes 既可。\n\n​\t如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码\n\n​\t注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。\n\n​\t密码正确后你会看到下面这段话，如：\n\n```\n    Hi username! You've successfully authenticated, but GitHub does not\n    # provide shell access.\n```\n\n​\t如果用户名是正确的,你已经成功设置SSH密钥。\n\n\n\n------\n\n## 二 已有的项目切换到使用SSH方式连接\n\n​\t安装ssh证书，每次push pull 都需要输入git密码，原因是使用了https方式 push。\n\n1. 在terminal里边 输入  git remote -v ，可以看到形如一下的返回结果：\n\n```bash\n    origin  https://cleey@github.com/cleey/phppoem.git (fetch)\n    origin  https://cleey@github.com/cleey/phppoem.git (push)\n```\n\n2. 安装以下方式更换成ssh方式的：\n\n```bash\n    git remote rm origin\n    git remote add origin git@github.com:cleey/phppoem.git\n    git push origin \n```\n\n","slug":"GitHub设置无密码登录","published":1,"updated":"2019-07-26T06:55:21.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkz10000afp2kaaw9twk","content":"<p><strong>GitHub项目的授权方式有两种方式：Https和SSH。</strong></p>\n<p>Https可以随意克隆github上的项目，而不管是谁的；而SSH则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p>\n<p>https url在push的时候是需要验证用户名和密码的；而 SSH在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p>\n<h2 id=\"一-安装ssh证书\"><a href=\"#一-安装ssh证书\" class=\"headerlink\" title=\"一 安装ssh证书\"></a>一 安装ssh证书</h2><hr>\n<ol>\n<li><strong>首先需要检查你电脑是否已经有 SSH key ，在 git Bash 客户端，输入如下代码：</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">$ ls</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这两个命令就是检查是否已经存在 id_rsa<span class=\"selector-class\">.pub</span> 或 id_dsa<span class=\"selector-class\">.pub</span> 文件，如果文件已经存在，那么则跳过步骤<span class=\"number\">2</span>。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>*<em>创建一个 SSH key *</em></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码参数含义：</span><br><span class=\"line\"><span class=\"deletion\">-t 指定密钥类型，默认是 rsa ，可以省略。</span></span><br><span class=\"line\"><span class=\"deletion\">-C 设置注释文字，比如邮箱。</span></span><br><span class=\"line\"><span class=\"deletion\">-f 指定密钥文件存储文件名。</span></span><br><span class=\"line\"></span><br><span class=\"line\">接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），可以不输入密码，直接按回车。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p><strong>添加你的 SSH key 到 github上面去</strong></p>\n<p>a. 首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<pre><code>b. 登录你的github账号，从又上角的settings进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。\nc. 点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。title随意。</code></pre><ol start=\"4\">\n<li><strong>测试一下该SSH key</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>​    当你输入以上代码时，会有一段警告代码，如：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host 'github.com (<span class=\"number\">207.97</span><span class=\"number\">.227</span><span class=\"number\">.239</span>)' can't be established.</span><br><span class=\"line\"><span class=\"comment\"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"comment\"># Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>\n\n<p>​    输入 yes 既可。</p>\n<p>​    如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码</p>\n<p>​    注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</p>\n<p>​    密码正确后你会看到下面这段话，如：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi username! You've successfully authenticated, <span class=\"keyword\">but</span> GitHub <span class=\"keyword\">does</span> <span class=\"keyword\">not</span></span><br><span class=\"line\"><span class=\"comment\"># provide shell access.</span></span><br></pre></td></tr></table></figure>\n\n<p>​    如果用户名是正确的,你已经成功设置SSH密钥。</p>\n<hr>\n<h2 id=\"二-已有的项目切换到使用SSH方式连接\"><a href=\"#二-已有的项目切换到使用SSH方式连接\" class=\"headerlink\" title=\"二 已有的项目切换到使用SSH方式连接\"></a>二 已有的项目切换到使用SSH方式连接</h2><p>​    安装ssh证书，每次push pull 都需要输入git密码，原因是使用了https方式 push。</p>\n<ol>\n<li>在terminal里边 输入  git remote -v ，可以看到形如一下的返回结果：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin  https://cleey@github.com/cleey/phppoem.git (fetch)</span><br><span class=\"line\">origin  https://cleey@github.com/cleey/phppoem.git (push)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装以下方式更换成ssh方式的：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin</span><br><span class=\"line\">git remote add origin git@github.com:cleey/phppoem.git</span><br><span class=\"line\">git push origin</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>GitHub项目的授权方式有两种方式：Https和SSH。</strong></p>\n<p>Https可以随意克隆github上的项目，而不管是谁的；而SSH则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p>\n<p>https url在push的时候是需要验证用户名和密码的；而 SSH在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p>\n<h2 id=\"一-安装ssh证书\"><a href=\"#一-安装ssh证书\" class=\"headerlink\" title=\"一 安装ssh证书\"></a>一 安装ssh证书</h2><hr>\n<ol>\n<li><strong>首先需要检查你电脑是否已经有 SSH key ，在 git Bash 客户端，输入如下代码：</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">$ ls</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这两个命令就是检查是否已经存在 id_rsa<span class=\"selector-class\">.pub</span> 或 id_dsa<span class=\"selector-class\">.pub</span> 文件，如果文件已经存在，那么则跳过步骤<span class=\"number\">2</span>。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>*<em>创建一个 SSH key *</em></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码参数含义：</span><br><span class=\"line\"><span class=\"deletion\">-t 指定密钥类型，默认是 rsa ，可以省略。</span></span><br><span class=\"line\"><span class=\"deletion\">-C 设置注释文字，比如邮箱。</span></span><br><span class=\"line\"><span class=\"deletion\">-f 指定密钥文件存储文件名。</span></span><br><span class=\"line\"></span><br><span class=\"line\">接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），可以不输入密码，直接按回车。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p><strong>添加你的 SSH key 到 github上面去</strong></p>\n<p>a. 首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<pre><code>b. 登录你的github账号，从又上角的settings进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。\nc. 点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。title随意。</code></pre><ol start=\"4\">\n<li><strong>测试一下该SSH key</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>​    当你输入以上代码时，会有一段警告代码，如：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host 'github.com (<span class=\"number\">207.97</span><span class=\"number\">.227</span><span class=\"number\">.239</span>)' can't be established.</span><br><span class=\"line\"><span class=\"comment\"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"comment\"># Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>\n\n<p>​    输入 yes 既可。</p>\n<p>​    如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码</p>\n<p>​    注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</p>\n<p>​    密码正确后你会看到下面这段话，如：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi username! You've successfully authenticated, <span class=\"keyword\">but</span> GitHub <span class=\"keyword\">does</span> <span class=\"keyword\">not</span></span><br><span class=\"line\"><span class=\"comment\"># provide shell access.</span></span><br></pre></td></tr></table></figure>\n\n<p>​    如果用户名是正确的,你已经成功设置SSH密钥。</p>\n<hr>\n<h2 id=\"二-已有的项目切换到使用SSH方式连接\"><a href=\"#二-已有的项目切换到使用SSH方式连接\" class=\"headerlink\" title=\"二 已有的项目切换到使用SSH方式连接\"></a>二 已有的项目切换到使用SSH方式连接</h2><p>​    安装ssh证书，每次push pull 都需要输入git密码，原因是使用了https方式 push。</p>\n<ol>\n<li>在terminal里边 输入  git remote -v ，可以看到形如一下的返回结果：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin  https://cleey@github.com/cleey/phppoem.git (fetch)</span><br><span class=\"line\">origin  https://cleey@github.com/cleey/phppoem.git (push)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装以下方式更换成ssh方式的：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin</span><br><span class=\"line\">git remote add origin git@github.com:cleey/phppoem.git</span><br><span class=\"line\">git push origin</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Deepin 系统优化","date":"2019-07-26T07:17:12.000Z","_content":"\n\n## 一 . 修改系统默认编辑器\n系统默认编辑器是：nano\n```\n# 打开Terminal，输入以下指令：\nsudo update-alternatives --config editor\n\n# 输入所要变更的编辑器的编号（Terminal上会有提示）\n```\n\n为方便复制粘贴，修改Terminal的设置。点击Terminal右上角菜单标志——设置。\n1. 将终端中复制粘贴的快捷键设置为 Ctrl+C 和 Ctrl+V 。\n2. 将终端中搜索的快捷键设置为 Ctrl+F 。\n3. 将终端中放大缩小的快捷键设置为 Ctrl+N 和 Ctrl+M 。\n4. 将光标中“选中光标时自动复制到剪切板”选项勾上。\n\n## 二 . 设置sudo不用输入密码\n```\n# 打开Terminal，输入以下指令：\nsudo visudo\n\n# 在编辑器中更换\"%admin ALL=(ALL) ALL\"为以下指令：\n%admin ALL=(ALL) NOPASSWD: ALL\n```\n\n## 三 . CPU优化\n问题：Deepin Linux 15.10升级后CPU不会自动降频造成过热\n```\n# 打开Terminal，输入以下指令：\nsudo gedit /etc/default/grub\n\n# 编辑grub文件，其中两行改为如下：\nGRUB_CMDLINE_LINUX=\"splash quiet \"\nGRUB_CMDLINE_LINUX_DEFAULT=\"intel_pstate=disable\"\n\n# 保存退出后更新一下grub\nsudo update-grub\n\n# 然后，重启系统。\nsudo reboot\n```\n\n## 四 . 修改WIFI配置文件\n问题：Deepin 15.8/Ubuntu 18.04用intel无线网卡速度跑不满\n```\n# 打开Terminal，输入以下指令：\nsudo vim /etc/modprobe.d/iwlwifi.conf\n\n# 然后把iwlwifi.conf里面的11n_disable=1改成\n11n_disable=8\n\n# 保存并重新启动\nsudo reboot\n```\n\n## 五 . 镜像源（Apt软件源）的修改\n```\n# 打开Terminal，输入以下指令：\nsudo vim /etc/apt/sources.list\n\n# 在编辑器中更换 http://packages.deepin.com 为 \nhttps://mirrors.tuna.tsinghua.edu.cn\n\n# 更新\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n此外，deepin或是其他Linux（APT）系统中可能无法使用 add-apt-repository 命令。请执行以下操作，确保该命令能够被使用：\n```\n# 使用以下两个安装命令（旧系统版本使用第一条，新版使用第二条）\nsudo apt-get install python-software-properties\nsudo apt-get install software-properties-common\n\n# 更新\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n## 六 . 安装pip并修改pip源\n```\n# 安装pip和pip3：\nsudo apt install -y python-pip python3-pip\n\n# 更换pip源（以下更改用户pip源，若希望全局有效，直接 sudo vim /etc/pip.conf ）\ncd ~\nsudo mkdir .pip\nsudo vim .pip/pip.conf\n\n# 添加以下内容至pip.conf文件\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n## 七. 登录和唤醒免密\n1. 设置自动免密登录\n\n点击设置——账户——example（你的账户）\n将\"自动登录\"开关打开（勾上清空钥匙串密码）\n将\"无密码登录\"开关打开（勾上清空钥匙串密码）\n\n1. 设置唤醒免密\n\n点击设置——电源管理\n将\"唤醒显示器时需要密码\"开关关闭\n将\"待机恢复时需要密码\"开关关闭\n\n## 八. 常用商店软件\n1. 搜狗输入法\n2. 百度网盘\n3. 迅雷\n4. 微信\n5. QQ\n6. VS Code\n7. Annaconda\n\n## 九 . 命令行软件\n1. 安装Git\n```\nsudo apt-get install git\ngit config --global user.email \"464306924@qq.com\"\ngit config --global user.name \"messj-0508\"\n```\n设置GitHub的ssh 连接，参考[《GitHub设置无密码登录》](https://mwessj.xyz/2019/04/03/GitHub%E8%AE%BE%E7%BD%AE%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/)\n### 2.安装Typora\n1. 下载[二进制免安装包](https://typora.io/linux/Typora-linux-x64.tar.gz)\n2. 解压缩到用户目录下\n3. 添加指令路径\n```\n# Terminal\nsudo vim .bashrc\n\n# vim 在最后补充两句\nexport PATH=$PATH:~/Typora\nalias typora='Typora'\n\n# Terminal（重新加载bash配置）\nsource .bashrc\n```\n1. 添加菜单启动项（可选）\n```\n# Terminal\ncd /usr/share/applications\nsudo vim Typora.desktop\n\n# Vim\n[Desktop Entry]\nVersion=1.0 # 版本号\nName=Typora    # 将要在启动器显示的名字\nComment=a markdown editor  # 说明\nExec=/xx/xx/Typora  # 可执行程序路径，一定要是完整的绝对路径\nIcon=/xx/xx.png  # 程序图标\nTerminal=false \nType=Application \nCategories=Editor;\n```\n1. 安装nodejs和npm（可选，hexo博客需要）\n```\nsudo apt install nodejs-legacy\nsudo apt install node\nsudo apt install nodejs-bin\n\nsudo npm install -g n\nsudo npm install hexo-cli -g\n\ncd ~/Desktop\ngit clone git@github.com:messj-0508/messj-0508.github.io.git hexo\n\ncd hexo\nnpm install\n```\n\n\n\n## 十 . VS Code 配置优化","source":"_posts/Deepin-系统优化.md","raw":"---\ntitle: Deepin 系统优化\ndate: 2019-07-26 15:17:12\ntags: [Ubuntu, Tutorial]\n---\n\n\n## 一 . 修改系统默认编辑器\n系统默认编辑器是：nano\n```\n# 打开Terminal，输入以下指令：\nsudo update-alternatives --config editor\n\n# 输入所要变更的编辑器的编号（Terminal上会有提示）\n```\n\n为方便复制粘贴，修改Terminal的设置。点击Terminal右上角菜单标志——设置。\n1. 将终端中复制粘贴的快捷键设置为 Ctrl+C 和 Ctrl+V 。\n2. 将终端中搜索的快捷键设置为 Ctrl+F 。\n3. 将终端中放大缩小的快捷键设置为 Ctrl+N 和 Ctrl+M 。\n4. 将光标中“选中光标时自动复制到剪切板”选项勾上。\n\n## 二 . 设置sudo不用输入密码\n```\n# 打开Terminal，输入以下指令：\nsudo visudo\n\n# 在编辑器中更换\"%admin ALL=(ALL) ALL\"为以下指令：\n%admin ALL=(ALL) NOPASSWD: ALL\n```\n\n## 三 . CPU优化\n问题：Deepin Linux 15.10升级后CPU不会自动降频造成过热\n```\n# 打开Terminal，输入以下指令：\nsudo gedit /etc/default/grub\n\n# 编辑grub文件，其中两行改为如下：\nGRUB_CMDLINE_LINUX=\"splash quiet \"\nGRUB_CMDLINE_LINUX_DEFAULT=\"intel_pstate=disable\"\n\n# 保存退出后更新一下grub\nsudo update-grub\n\n# 然后，重启系统。\nsudo reboot\n```\n\n## 四 . 修改WIFI配置文件\n问题：Deepin 15.8/Ubuntu 18.04用intel无线网卡速度跑不满\n```\n# 打开Terminal，输入以下指令：\nsudo vim /etc/modprobe.d/iwlwifi.conf\n\n# 然后把iwlwifi.conf里面的11n_disable=1改成\n11n_disable=8\n\n# 保存并重新启动\nsudo reboot\n```\n\n## 五 . 镜像源（Apt软件源）的修改\n```\n# 打开Terminal，输入以下指令：\nsudo vim /etc/apt/sources.list\n\n# 在编辑器中更换 http://packages.deepin.com 为 \nhttps://mirrors.tuna.tsinghua.edu.cn\n\n# 更新\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n此外，deepin或是其他Linux（APT）系统中可能无法使用 add-apt-repository 命令。请执行以下操作，确保该命令能够被使用：\n```\n# 使用以下两个安装命令（旧系统版本使用第一条，新版使用第二条）\nsudo apt-get install python-software-properties\nsudo apt-get install software-properties-common\n\n# 更新\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n## 六 . 安装pip并修改pip源\n```\n# 安装pip和pip3：\nsudo apt install -y python-pip python3-pip\n\n# 更换pip源（以下更改用户pip源，若希望全局有效，直接 sudo vim /etc/pip.conf ）\ncd ~\nsudo mkdir .pip\nsudo vim .pip/pip.conf\n\n# 添加以下内容至pip.conf文件\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n## 七. 登录和唤醒免密\n1. 设置自动免密登录\n\n点击设置——账户——example（你的账户）\n将\"自动登录\"开关打开（勾上清空钥匙串密码）\n将\"无密码登录\"开关打开（勾上清空钥匙串密码）\n\n1. 设置唤醒免密\n\n点击设置——电源管理\n将\"唤醒显示器时需要密码\"开关关闭\n将\"待机恢复时需要密码\"开关关闭\n\n## 八. 常用商店软件\n1. 搜狗输入法\n2. 百度网盘\n3. 迅雷\n4. 微信\n5. QQ\n6. VS Code\n7. Annaconda\n\n## 九 . 命令行软件\n1. 安装Git\n```\nsudo apt-get install git\ngit config --global user.email \"464306924@qq.com\"\ngit config --global user.name \"messj-0508\"\n```\n设置GitHub的ssh 连接，参考[《GitHub设置无密码登录》](https://mwessj.xyz/2019/04/03/GitHub%E8%AE%BE%E7%BD%AE%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/)\n### 2.安装Typora\n1. 下载[二进制免安装包](https://typora.io/linux/Typora-linux-x64.tar.gz)\n2. 解压缩到用户目录下\n3. 添加指令路径\n```\n# Terminal\nsudo vim .bashrc\n\n# vim 在最后补充两句\nexport PATH=$PATH:~/Typora\nalias typora='Typora'\n\n# Terminal（重新加载bash配置）\nsource .bashrc\n```\n1. 添加菜单启动项（可选）\n```\n# Terminal\ncd /usr/share/applications\nsudo vim Typora.desktop\n\n# Vim\n[Desktop Entry]\nVersion=1.0 # 版本号\nName=Typora    # 将要在启动器显示的名字\nComment=a markdown editor  # 说明\nExec=/xx/xx/Typora  # 可执行程序路径，一定要是完整的绝对路径\nIcon=/xx/xx.png  # 程序图标\nTerminal=false \nType=Application \nCategories=Editor;\n```\n1. 安装nodejs和npm（可选，hexo博客需要）\n```\nsudo apt install nodejs-legacy\nsudo apt install node\nsudo apt install nodejs-bin\n\nsudo npm install -g n\nsudo npm install hexo-cli -g\n\ncd ~/Desktop\ngit clone git@github.com:messj-0508/messj-0508.github.io.git hexo\n\ncd hexo\nnpm install\n```\n\n\n\n## 十 . VS Code 配置优化","slug":"Deepin-系统优化","published":1,"updated":"2019-07-26T07:35:44.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkz60002afp2nb4bjdlk","content":"<h2 id=\"一-修改系统默认编辑器\"><a href=\"#一-修改系统默认编辑器\" class=\"headerlink\" title=\"一 . 修改系统默认编辑器\"></a>一 . 修改系统默认编辑器</h2><p>系统默认编辑器是：nano</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo <span class=\"keyword\">update</span>-alternatives <span class=\"comment\">--config editor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入所要变更的编辑器的编号（Terminal上会有提示）</span></span><br></pre></td></tr></table></figure>\n\n<p>为方便复制粘贴，修改Terminal的设置。点击Terminal右上角菜单标志——设置。</p>\n<ol>\n<li>将终端中复制粘贴的快捷键设置为 Ctrl+C 和 Ctrl+V 。</li>\n<li>将终端中搜索的快捷键设置为 Ctrl+F 。</li>\n<li>将终端中放大缩小的快捷键设置为 Ctrl+N 和 Ctrl+M 。</li>\n<li>将光标中“选中光标时自动复制到剪切板”选项勾上。</li>\n</ol>\n<h2 id=\"二-设置sudo不用输入密码\"><a href=\"#二-设置sudo不用输入密码\" class=\"headerlink\" title=\"二 . 设置sudo不用输入密码\"></a>二 . 设置sudo不用输入密码</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开Terminal，输入以下指令：</span><br><span class=\"line\">sudo visudo</span><br><span class=\"line\"></span><br><span class=\"line\"># 在编辑器中更换<span class=\"string\">\"%admin ALL=(ALL) ALL\"</span>为以下指令：</span><br><span class=\"line\">%admin <span class=\"keyword\">ALL</span>=(<span class=\"keyword\">ALL</span>) NOPASSWD: <span class=\"keyword\">ALL</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-CPU优化\"><a href=\"#三-CPU优化\" class=\"headerlink\" title=\"三 . CPU优化\"></a>三 . CPU优化</h2><p>问题：Deepin Linux 15.10升级后CPU不会自动降频造成过热</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo gedit /etc/<span class=\"keyword\">default</span>/grub</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 编辑grub文件，其中两行改为如下：</span></span><br><span class=\"line\">GRUB_CMDLINE_LINUX=<span class=\"string\">\"splash quiet \"</span></span><br><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=<span class=\"string\">\"intel_pstate=disable\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 保存退出后更新一下grub</span></span><br><span class=\"line\">sudo update-grub</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 然后，重启系统。</span></span><br><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-修改WIFI配置文件\"><a href=\"#四-修改WIFI配置文件\" class=\"headerlink\" title=\"四 . 修改WIFI配置文件\"></a>四 . 修改WIFI配置文件</h2><p>问题：Deepin 15.8/Ubuntu 18.04用intel无线网卡速度跑不满</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo vim /etc/modprobe.d/iwlwifi.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 然后把iwlwifi.conf里面的11n_disable=1改成</span></span><br><span class=\"line\"><span class=\"number\">11</span>n_disable=<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 保存并重新启动</span></span><br><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五-镜像源（Apt软件源）的修改\"><a href=\"#五-镜像源（Apt软件源）的修改\" class=\"headerlink\" title=\"五 . 镜像源（Apt软件源）的修改\"></a>五 . 镜像源（Apt软件源）的修改</h2><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 在编辑器中更换 http://packages.deepin.com 为 </span></span><br><span class=\"line\">https:<span class=\"comment\">//mirrors.tuna.tsinghua.edu.cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 更新</span></span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> upgrade</span><br></pre></td></tr></table></figure>\n\n<p>此外，deepin或是其他Linux（APT）系统中可能无法使用 add-apt-repository 命令。请执行以下操作，确保该命令能够被使用：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用以下两个安装命令（旧系统版本使用第一条，新版使用第二条）</span></span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install python-software-properties</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> upgrade</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六-安装pip并修改pip源\"><a href=\"#六-安装pip并修改pip源\" class=\"headerlink\" title=\"六 . 安装pip并修改pip源\"></a>六 . 安装pip并修改pip源</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装pip和pip3：</span><br><span class=\"line\">sudo apt install -<span class=\"keyword\">y</span> <span class=\"keyword\">python</span>-pip <span class=\"keyword\">python3</span>-pip</span><br><span class=\"line\"></span><br><span class=\"line\"># 更换pip源（以下更改用户pip源，若希望全局有效，直接 sudo <span class=\"keyword\">vim</span> /etc/pip.<span class=\"keyword\">conf</span> ）</span><br><span class=\"line\"><span class=\"keyword\">cd</span> ~</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> .pip</span><br><span class=\"line\">sudo <span class=\"keyword\">vim</span> .pip/pip.<span class=\"keyword\">conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 添加以下内容至pip.<span class=\"keyword\">conf</span>文件</span><br><span class=\"line\">[<span class=\"keyword\">global</span>]</span><br><span class=\"line\"><span class=\"built_in\">index</span>-url = http<span class=\"variable\">s:</span>//pypi.tuna.tsinghua.edu.<span class=\"keyword\">cn</span>/simple</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七-登录和唤醒免密\"><a href=\"#七-登录和唤醒免密\" class=\"headerlink\" title=\"七. 登录和唤醒免密\"></a>七. 登录和唤醒免密</h2><ol>\n<li>设置自动免密登录</li>\n</ol>\n<p>点击设置——账户——example（你的账户）<br>将”自动登录”开关打开（勾上清空钥匙串密码）<br>将”无密码登录”开关打开（勾上清空钥匙串密码）</p>\n<ol>\n<li>设置唤醒免密</li>\n</ol>\n<p>点击设置——电源管理<br>将”唤醒显示器时需要密码”开关关闭<br>将”待机恢复时需要密码”开关关闭</p>\n<h2 id=\"八-常用商店软件\"><a href=\"#八-常用商店软件\" class=\"headerlink\" title=\"八. 常用商店软件\"></a>八. 常用商店软件</h2><ol>\n<li>搜狗输入法</li>\n<li>百度网盘</li>\n<li>迅雷</li>\n<li>微信</li>\n<li>QQ</li>\n<li>VS Code</li>\n<li>Annaconda</li>\n</ol>\n<h2 id=\"九-命令行软件\"><a href=\"#九-命令行软件\" class=\"headerlink\" title=\"九 . 命令行软件\"></a>九 . 命令行软件</h2><ol>\n<li>安装Git<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install git</span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">\"464306924@qq.com\"</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">\"messj-0508\"</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>设置GitHub的ssh 连接，参考<a href=\"https://mwessj.xyz/2019/04/03/GitHub%E8%AE%BE%E7%BD%AE%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">《GitHub设置无密码登录》</a></p>\n<h3 id=\"2-安装Typora\"><a href=\"#2-安装Typora\" class=\"headerlink\" title=\"2.安装Typora\"></a>2.安装Typora</h3><ol>\n<li><p>下载<a href=\"https://typora.io/linux/Typora-linux-x64.tar.gz\" target=\"_blank\" rel=\"noopener\">二进制免安装包</a></p>\n</li>\n<li><p>解压缩到用户目录下</p>\n</li>\n<li><p>添加指令路径</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Terminal</span></span><br><span class=\"line\">sudo vim .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vim 在最后补充两句</span></span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:~/Typora</span><br><span class=\"line\">alias <span class=\"attribute\">typora</span>=<span class=\"string\">'Typora'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminal（重新加载bash配置）</span></span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加菜单启动项（可选）</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Terminal</span></span><br><span class=\"line\">cd /usr/share/applications</span><br><span class=\"line\">sudo vim Typora.desktop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Vim</span></span><br><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Version=1.0 <span class=\"comment\"># 版本号</span></span><br><span class=\"line\">Name=Typora    <span class=\"comment\"># 将要在启动器显示的名字</span></span><br><span class=\"line\">Comment=a markdown editor  <span class=\"comment\"># 说明</span></span><br><span class=\"line\">Exec=/xx/xx/Typora  <span class=\"comment\"># 可执行程序路径，一定要是完整的绝对路径</span></span><br><span class=\"line\">Icon=/xx/xx.png  <span class=\"comment\"># 程序图标</span></span><br><span class=\"line\">Terminal=false </span><br><span class=\"line\">Type=Application </span><br><span class=\"line\">Categories=Editor;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nodejs和npm（可选，hexo博客需要）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt <span class=\"keyword\">install</span> nodejs-legacy</span><br><span class=\"line\">sudo apt <span class=\"keyword\">install</span> node</span><br><span class=\"line\">sudo apt <span class=\"keyword\">install</span> nodejs-<span class=\"keyword\">bin</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo npm <span class=\"keyword\">install</span> -g n</span><br><span class=\"line\">sudo npm <span class=\"keyword\">install</span> hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">cd ~/Desktop</span><br><span class=\"line\">git <span class=\"keyword\">clone</span> git@github.com:messj<span class=\"number\">-0508</span>/messj<span class=\"number\">-0508.</span>github.io.git hexo</span><br><span class=\"line\"></span><br><span class=\"line\">cd hexo</span><br><span class=\"line\">npm <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"十-VS-Code-配置优化\"><a href=\"#十-VS-Code-配置优化\" class=\"headerlink\" title=\"十 . VS Code 配置优化\"></a>十 . VS Code 配置优化</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-修改系统默认编辑器\"><a href=\"#一-修改系统默认编辑器\" class=\"headerlink\" title=\"一 . 修改系统默认编辑器\"></a>一 . 修改系统默认编辑器</h2><p>系统默认编辑器是：nano</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo <span class=\"keyword\">update</span>-alternatives <span class=\"comment\">--config editor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入所要变更的编辑器的编号（Terminal上会有提示）</span></span><br></pre></td></tr></table></figure>\n\n<p>为方便复制粘贴，修改Terminal的设置。点击Terminal右上角菜单标志——设置。</p>\n<ol>\n<li>将终端中复制粘贴的快捷键设置为 Ctrl+C 和 Ctrl+V 。</li>\n<li>将终端中搜索的快捷键设置为 Ctrl+F 。</li>\n<li>将终端中放大缩小的快捷键设置为 Ctrl+N 和 Ctrl+M 。</li>\n<li>将光标中“选中光标时自动复制到剪切板”选项勾上。</li>\n</ol>\n<h2 id=\"二-设置sudo不用输入密码\"><a href=\"#二-设置sudo不用输入密码\" class=\"headerlink\" title=\"二 . 设置sudo不用输入密码\"></a>二 . 设置sudo不用输入密码</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开Terminal，输入以下指令：</span><br><span class=\"line\">sudo visudo</span><br><span class=\"line\"></span><br><span class=\"line\"># 在编辑器中更换<span class=\"string\">\"%admin ALL=(ALL) ALL\"</span>为以下指令：</span><br><span class=\"line\">%admin <span class=\"keyword\">ALL</span>=(<span class=\"keyword\">ALL</span>) NOPASSWD: <span class=\"keyword\">ALL</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-CPU优化\"><a href=\"#三-CPU优化\" class=\"headerlink\" title=\"三 . CPU优化\"></a>三 . CPU优化</h2><p>问题：Deepin Linux 15.10升级后CPU不会自动降频造成过热</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo gedit /etc/<span class=\"keyword\">default</span>/grub</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 编辑grub文件，其中两行改为如下：</span></span><br><span class=\"line\">GRUB_CMDLINE_LINUX=<span class=\"string\">\"splash quiet \"</span></span><br><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=<span class=\"string\">\"intel_pstate=disable\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 保存退出后更新一下grub</span></span><br><span class=\"line\">sudo update-grub</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 然后，重启系统。</span></span><br><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-修改WIFI配置文件\"><a href=\"#四-修改WIFI配置文件\" class=\"headerlink\" title=\"四 . 修改WIFI配置文件\"></a>四 . 修改WIFI配置文件</h2><p>问题：Deepin 15.8/Ubuntu 18.04用intel无线网卡速度跑不满</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo vim /etc/modprobe.d/iwlwifi.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 然后把iwlwifi.conf里面的11n_disable=1改成</span></span><br><span class=\"line\"><span class=\"number\">11</span>n_disable=<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 保存并重新启动</span></span><br><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五-镜像源（Apt软件源）的修改\"><a href=\"#五-镜像源（Apt软件源）的修改\" class=\"headerlink\" title=\"五 . 镜像源（Apt软件源）的修改\"></a>五 . 镜像源（Apt软件源）的修改</h2><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 打开Terminal，输入以下指令：</span></span><br><span class=\"line\">sudo vim /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 在编辑器中更换 http://packages.deepin.com 为 </span></span><br><span class=\"line\">https:<span class=\"comment\">//mirrors.tuna.tsinghua.edu.cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 更新</span></span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> upgrade</span><br></pre></td></tr></table></figure>\n\n<p>此外，deepin或是其他Linux（APT）系统中可能无法使用 add-apt-repository 命令。请执行以下操作，确保该命令能够被使用：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用以下两个安装命令（旧系统版本使用第一条，新版使用第二条）</span></span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install python-software-properties</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> upgrade</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六-安装pip并修改pip源\"><a href=\"#六-安装pip并修改pip源\" class=\"headerlink\" title=\"六 . 安装pip并修改pip源\"></a>六 . 安装pip并修改pip源</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装pip和pip3：</span><br><span class=\"line\">sudo apt install -<span class=\"keyword\">y</span> <span class=\"keyword\">python</span>-pip <span class=\"keyword\">python3</span>-pip</span><br><span class=\"line\"></span><br><span class=\"line\"># 更换pip源（以下更改用户pip源，若希望全局有效，直接 sudo <span class=\"keyword\">vim</span> /etc/pip.<span class=\"keyword\">conf</span> ）</span><br><span class=\"line\"><span class=\"keyword\">cd</span> ~</span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> .pip</span><br><span class=\"line\">sudo <span class=\"keyword\">vim</span> .pip/pip.<span class=\"keyword\">conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 添加以下内容至pip.<span class=\"keyword\">conf</span>文件</span><br><span class=\"line\">[<span class=\"keyword\">global</span>]</span><br><span class=\"line\"><span class=\"built_in\">index</span>-url = http<span class=\"variable\">s:</span>//pypi.tuna.tsinghua.edu.<span class=\"keyword\">cn</span>/simple</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七-登录和唤醒免密\"><a href=\"#七-登录和唤醒免密\" class=\"headerlink\" title=\"七. 登录和唤醒免密\"></a>七. 登录和唤醒免密</h2><ol>\n<li>设置自动免密登录</li>\n</ol>\n<p>点击设置——账户——example（你的账户）<br>将”自动登录”开关打开（勾上清空钥匙串密码）<br>将”无密码登录”开关打开（勾上清空钥匙串密码）</p>\n<ol>\n<li>设置唤醒免密</li>\n</ol>\n<p>点击设置——电源管理<br>将”唤醒显示器时需要密码”开关关闭<br>将”待机恢复时需要密码”开关关闭</p>\n<h2 id=\"八-常用商店软件\"><a href=\"#八-常用商店软件\" class=\"headerlink\" title=\"八. 常用商店软件\"></a>八. 常用商店软件</h2><ol>\n<li>搜狗输入法</li>\n<li>百度网盘</li>\n<li>迅雷</li>\n<li>微信</li>\n<li>QQ</li>\n<li>VS Code</li>\n<li>Annaconda</li>\n</ol>\n<h2 id=\"九-命令行软件\"><a href=\"#九-命令行软件\" class=\"headerlink\" title=\"九 . 命令行软件\"></a>九 . 命令行软件</h2><ol>\n<li>安装Git<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install git</span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">\"464306924@qq.com\"</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">\"messj-0508\"</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>设置GitHub的ssh 连接，参考<a href=\"https://mwessj.xyz/2019/04/03/GitHub%E8%AE%BE%E7%BD%AE%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">《GitHub设置无密码登录》</a></p>\n<h3 id=\"2-安装Typora\"><a href=\"#2-安装Typora\" class=\"headerlink\" title=\"2.安装Typora\"></a>2.安装Typora</h3><ol>\n<li><p>下载<a href=\"https://typora.io/linux/Typora-linux-x64.tar.gz\" target=\"_blank\" rel=\"noopener\">二进制免安装包</a></p>\n</li>\n<li><p>解压缩到用户目录下</p>\n</li>\n<li><p>添加指令路径</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Terminal</span></span><br><span class=\"line\">sudo vim .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vim 在最后补充两句</span></span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:~/Typora</span><br><span class=\"line\">alias <span class=\"attribute\">typora</span>=<span class=\"string\">'Typora'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Terminal（重新加载bash配置）</span></span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加菜单启动项（可选）</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Terminal</span></span><br><span class=\"line\">cd /usr/share/applications</span><br><span class=\"line\">sudo vim Typora.desktop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Vim</span></span><br><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Version=1.0 <span class=\"comment\"># 版本号</span></span><br><span class=\"line\">Name=Typora    <span class=\"comment\"># 将要在启动器显示的名字</span></span><br><span class=\"line\">Comment=a markdown editor  <span class=\"comment\"># 说明</span></span><br><span class=\"line\">Exec=/xx/xx/Typora  <span class=\"comment\"># 可执行程序路径，一定要是完整的绝对路径</span></span><br><span class=\"line\">Icon=/xx/xx.png  <span class=\"comment\"># 程序图标</span></span><br><span class=\"line\">Terminal=false </span><br><span class=\"line\">Type=Application </span><br><span class=\"line\">Categories=Editor;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nodejs和npm（可选，hexo博客需要）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt <span class=\"keyword\">install</span> nodejs-legacy</span><br><span class=\"line\">sudo apt <span class=\"keyword\">install</span> node</span><br><span class=\"line\">sudo apt <span class=\"keyword\">install</span> nodejs-<span class=\"keyword\">bin</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo npm <span class=\"keyword\">install</span> -g n</span><br><span class=\"line\">sudo npm <span class=\"keyword\">install</span> hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\">cd ~/Desktop</span><br><span class=\"line\">git <span class=\"keyword\">clone</span> git@github.com:messj<span class=\"number\">-0508</span>/messj<span class=\"number\">-0508.</span>github.io.git hexo</span><br><span class=\"line\"></span><br><span class=\"line\">cd hexo</span><br><span class=\"line\">npm <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"十-VS-Code-配置优化\"><a href=\"#十-VS-Code-配置优化\" class=\"headerlink\" title=\"十 . VS Code 配置优化\"></a>十 . VS Code 配置优化</h2>"},{"title":"Git 撤销合并操作","date":"2019-01-31T05:01:23.000Z","_content":"**利用Merge操作合并分支时，可能会出现一些错误，需要撤销合并。这里介绍如何撤销已经上传至github远程仓库的方法**\n\n当你使用 git merge 合并两个分支，你将会得到一个commit。执行 git show 之后，会有类似的输出：\n\n``` bash\ncommit 19b7d40d2ebefb4236a8ab630f89e4afca6e9dbe\nMerge: b0ef24a cca45f9\n......\n```\n其中，Merge 这一行代表的是合并所用到的两个分支(parents)。举个例子，通常，我们的稳定代码都在 master 分支，而开发过程使用 dev 分支，当开发完成后，再把 dev 分支 merge 进 master 分支：\n\n``` bash\na -> b -> c -> f -- g -> h (master)\n           \\      /\n            d -> e  (dev)\n```\ng 是 merge 后得到的代码，g 的两个 parent 分别是 f 和 e。\n\n当你撤销合并，需要添加-m参数来指定撤销合并至哪条分支(parent)。\n在你合并两个分支并试图撤销时，Git 并不知道你到底需要保留哪一个分支上所做的修改。从 Git 的角度来看，master 分支和 dev 在地位上是完全平等的，只是在 workflow 中，master 被人为约定成了「主分支」。\n\n于是 Git 需要你通过 m 或 mainline 参数来指定「主线」。merge commit 的 parents 一定是在两个不同的线索上，因此可以通过 parent 来表示「主线」。m 参数的值可以是 1 或者 2，对应着 parent 在 merge commit 信息中的顺序。\n因而，撤销g的合并操作恢复至原主分支f上：\n``` bash\n# g为merge后的索引号\ngit revert -m 1 g\n```\n从而变成：\n``` bash\na -> b -> c -> f -- g -> h -> G -> i (master)\n           \\      /\n            d -> e -> j -> k (dev)\n```\n此外，由于撤销操作，则在下一次dev与master合并时，merge操作不会合并d、e两个版本代码。因为git认为已经合并或没有合并的需要。此刻，由于新的要合并的dev是在原有d、e版本上开发的（此刻dev已修复bug），这样合并会出错。\n\n因而，需要先撤销G再合并，G为先前撤销合并恢复至主分支操作生成的编号。\n``` bash\ngit checkout master\ngit revert G\ngit merge dev\n```\n\n参考：https://blog.csdn.net/sndamhming/article/details/56011986","source":"_posts/Git撤销合并操作.md","raw":"---\ntitle: Git 撤销合并操作\ndate: 2019-01-31 13:01:23\ntags: [git]\n---\n**利用Merge操作合并分支时，可能会出现一些错误，需要撤销合并。这里介绍如何撤销已经上传至github远程仓库的方法**\n\n当你使用 git merge 合并两个分支，你将会得到一个commit。执行 git show 之后，会有类似的输出：\n\n``` bash\ncommit 19b7d40d2ebefb4236a8ab630f89e4afca6e9dbe\nMerge: b0ef24a cca45f9\n......\n```\n其中，Merge 这一行代表的是合并所用到的两个分支(parents)。举个例子，通常，我们的稳定代码都在 master 分支，而开发过程使用 dev 分支，当开发完成后，再把 dev 分支 merge 进 master 分支：\n\n``` bash\na -> b -> c -> f -- g -> h (master)\n           \\      /\n            d -> e  (dev)\n```\ng 是 merge 后得到的代码，g 的两个 parent 分别是 f 和 e。\n\n当你撤销合并，需要添加-m参数来指定撤销合并至哪条分支(parent)。\n在你合并两个分支并试图撤销时，Git 并不知道你到底需要保留哪一个分支上所做的修改。从 Git 的角度来看，master 分支和 dev 在地位上是完全平等的，只是在 workflow 中，master 被人为约定成了「主分支」。\n\n于是 Git 需要你通过 m 或 mainline 参数来指定「主线」。merge commit 的 parents 一定是在两个不同的线索上，因此可以通过 parent 来表示「主线」。m 参数的值可以是 1 或者 2，对应着 parent 在 merge commit 信息中的顺序。\n因而，撤销g的合并操作恢复至原主分支f上：\n``` bash\n# g为merge后的索引号\ngit revert -m 1 g\n```\n从而变成：\n``` bash\na -> b -> c -> f -- g -> h -> G -> i (master)\n           \\      /\n            d -> e -> j -> k (dev)\n```\n此外，由于撤销操作，则在下一次dev与master合并时，merge操作不会合并d、e两个版本代码。因为git认为已经合并或没有合并的需要。此刻，由于新的要合并的dev是在原有d、e版本上开发的（此刻dev已修复bug），这样合并会出错。\n\n因而，需要先撤销G再合并，G为先前撤销合并恢复至主分支操作生成的编号。\n``` bash\ngit checkout master\ngit revert G\ngit merge dev\n```\n\n参考：https://blog.csdn.net/sndamhming/article/details/56011986","slug":"Git撤销合并操作","published":1,"updated":"2019-07-26T06:55:21.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkz90004afp2ah2vf3bo","content":"<p><strong>利用Merge操作合并分支时，可能会出现一些错误，需要撤销合并。这里介绍如何撤销已经上传至github远程仓库的方法</strong></p>\n<p>当你使用 git merge 合并两个分支，你将会得到一个commit。执行 git show 之后，会有类似的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 19b7d40d2ebefb4236a8ab630f89e4afca6e9dbe</span><br><span class=\"line\">Merge: b0ef24a cca45f9</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>其中，Merge 这一行代表的是合并所用到的两个分支(parents)。举个例子，通常，我们的稳定代码都在 master 分支，而开发过程使用 dev 分支，当开发完成后，再把 dev 分支 merge 进 master 分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a -&gt; b -&gt; c -&gt; f -- g -&gt; h (master)</span><br><span class=\"line\">           \\      /</span><br><span class=\"line\">            d -&gt; e  (dev)</span><br></pre></td></tr></table></figure>\n\n<p>g 是 merge 后得到的代码，g 的两个 parent 分别是 f 和 e。</p>\n<p>当你撤销合并，需要添加-m参数来指定撤销合并至哪条分支(parent)。<br>在你合并两个分支并试图撤销时，Git 并不知道你到底需要保留哪一个分支上所做的修改。从 Git 的角度来看，master 分支和 dev 在地位上是完全平等的，只是在 workflow 中，master 被人为约定成了「主分支」。</p>\n<p>于是 Git 需要你通过 m 或 mainline 参数来指定「主线」。merge commit 的 parents 一定是在两个不同的线索上，因此可以通过 parent 来表示「主线」。m 参数的值可以是 1 或者 2，对应着 parent 在 merge commit 信息中的顺序。<br>因而，撤销g的合并操作恢复至原主分支f上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># g为merge后的索引号</span></span><br><span class=\"line\">git revert -m 1 g</span><br></pre></td></tr></table></figure>\n\n<p>从而变成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a -&gt; b -&gt; c -&gt; f -- g -&gt; h -&gt; G -&gt; i (master)</span><br><span class=\"line\">           \\      /</span><br><span class=\"line\">            d -&gt; e -&gt; j -&gt; k (dev)</span><br></pre></td></tr></table></figure>\n\n<p>此外，由于撤销操作，则在下一次dev与master合并时，merge操作不会合并d、e两个版本代码。因为git认为已经合并或没有合并的需要。此刻，由于新的要合并的dev是在原有d、e版本上开发的（此刻dev已修复bug），这样合并会出错。</p>\n<p>因而，需要先撤销G再合并，G为先前撤销合并恢复至主分支操作生成的编号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git revert G</span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://blog.csdn.net/sndamhming/article/details/56011986\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sndamhming/article/details/56011986</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>利用Merge操作合并分支时，可能会出现一些错误，需要撤销合并。这里介绍如何撤销已经上传至github远程仓库的方法</strong></p>\n<p>当你使用 git merge 合并两个分支，你将会得到一个commit。执行 git show 之后，会有类似的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 19b7d40d2ebefb4236a8ab630f89e4afca6e9dbe</span><br><span class=\"line\">Merge: b0ef24a cca45f9</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>其中，Merge 这一行代表的是合并所用到的两个分支(parents)。举个例子，通常，我们的稳定代码都在 master 分支，而开发过程使用 dev 分支，当开发完成后，再把 dev 分支 merge 进 master 分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a -&gt; b -&gt; c -&gt; f -- g -&gt; h (master)</span><br><span class=\"line\">           \\      /</span><br><span class=\"line\">            d -&gt; e  (dev)</span><br></pre></td></tr></table></figure>\n\n<p>g 是 merge 后得到的代码，g 的两个 parent 分别是 f 和 e。</p>\n<p>当你撤销合并，需要添加-m参数来指定撤销合并至哪条分支(parent)。<br>在你合并两个分支并试图撤销时，Git 并不知道你到底需要保留哪一个分支上所做的修改。从 Git 的角度来看，master 分支和 dev 在地位上是完全平等的，只是在 workflow 中，master 被人为约定成了「主分支」。</p>\n<p>于是 Git 需要你通过 m 或 mainline 参数来指定「主线」。merge commit 的 parents 一定是在两个不同的线索上，因此可以通过 parent 来表示「主线」。m 参数的值可以是 1 或者 2，对应着 parent 在 merge commit 信息中的顺序。<br>因而，撤销g的合并操作恢复至原主分支f上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># g为merge后的索引号</span></span><br><span class=\"line\">git revert -m 1 g</span><br></pre></td></tr></table></figure>\n\n<p>从而变成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a -&gt; b -&gt; c -&gt; f -- g -&gt; h -&gt; G -&gt; i (master)</span><br><span class=\"line\">           \\      /</span><br><span class=\"line\">            d -&gt; e -&gt; j -&gt; k (dev)</span><br></pre></td></tr></table></figure>\n\n<p>此外，由于撤销操作，则在下一次dev与master合并时，merge操作不会合并d、e两个版本代码。因为git认为已经合并或没有合并的需要。此刻，由于新的要合并的dev是在原有d、e版本上开发的（此刻dev已修复bug），这样合并会出错。</p>\n<p>因而，需要先撤销G再合并，G为先前撤销合并恢复至主分支操作生成的编号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git revert G</span><br><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://blog.csdn.net/sndamhming/article/details/56011986\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sndamhming/article/details/56011986</a></p>\n"},{"title":"Markdown tutorial","date":"2019-05-03T08:34:25.000Z","_content":"\n\n\nMarkdown是一种常用的标记语言，类似于html语言。许多博客都支持md格式，同时该语言也被github支持。\n\n**优点：**\n 1、简洁、无需排版。\n 2、操作简单。\n\n**缺点：**\n 1、需要记一些语法。\n 2、排版、格式有限。\n\n以下笔记总结于两篇博客，如下：\n\n<https://www.jianshu.com/p/191d1e21f7ed>\n\n<https://www.jianshu.com/p/2df05f279331>\n\n------\n\n## 一、标题\n\n在标题前加#即表示该段文字是标题。一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。\n\n示例：\n\n```bash\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n```\n\n效果：\n\n<div align=\"left\">![1553769689177](1553769689177.png)</div>\n\n------\n\n## 二、字体\n\n##### 加粗\n\n要加粗的文字左右分别用两个*号包起来\n\n##### 斜体\n\n要倾斜的文字左右分别用一个*号包起来\n\n##### 斜体加粗\n\n要倾斜和加粗的文字左右分别用三个*号包起来\n\n##### 删除线\n\n要加删除线的文字左右分别用两个~~号包起来\n\n示例：\n\n```bash\n**这是加粗的文字**\n*这是倾斜的文字*`\n***这是斜体加粗的文字***\n~~这是加删除线的文字~~\n```\n\n效果：\n\n**这是加粗的文字**\n*这是倾斜的文字*\n**这是斜体加粗的文字**\n~~这是加删除线的文字~~\n\n------\n\n## 三、分割线\n\n三个或以上的-或是*即可\n\n示例：\n\n```bash\n---\n----\n***\n*****\n```\n\n------\n\n## 四、图片\n\n语法：\n\n```bash\n![图片alt](图片地址 ''图片title'')\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n```\n\n示例：\n\n```bash\n![图片加载失败](1553769689177.png \"效果图\")\n```\n\n![图片加载失败](Markdown-tutorial/1553769689177.png \"效果图\")\n\n------\n\n## 五、超链接\n\n语法：\n\n```bash\n[超链接名](超链接地址 \"超链接title\")\ntitle可加可不加\n```\n\n示例：\n\n```bash\n[百度](http://baidu.com)\n```\n\n效果如下：\n[百度](http://baidu.com/)\n\n注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。\n\n------\n\n## 六、表格\n\n如果格式选择默认则按以下\n\n语法：\n\n```bash\n| 一个普通标题 | 一个普通标题 | 一个普通标题 |\n| ------ | ------ | ------ |\n| 短文本 | 中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本 | 中等文本 |\n```\n\n效果：\n\n| 一个普通标题     | 一个普通标题 | 一个普通标题     |\n| ---------------- | ------------ | ---------------- |\n| 短文本           | 中等文本     | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本       | 中等文本         |\n\n注：一些编辑器、解读器，表格的语句上一行必须为空行，不然表格不生效。\n\n如果有左右对齐的需求则按以下\n\nMarkdown 代码:\n\n```\n| 左对齐标题 | 右对齐标题 | 居中对齐标题 |\n| :------| ------: | :------: |\n| 短文本 | 中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本 | 中等文本 |\n```\n\n效果如下：\n\n| 左对齐标题       | 右对齐标题 |   居中对齐标题   |\n| :--------------- | ---------: | :--------------: |\n| 短文本           |   中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 |     短文本 |     中等文本     |\n\n------\n\n## 七、代码\n\n语法：\n 单行代码：代码之间分别用一个反引号包起来\n\n```bash\n    `代码内容`\n```\n\n代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行\n\n```bash\n(```)\n  代码...\n  代码...\n  代码...\n(```)\n```\n\n> 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。","source":"_posts/Markdown-tutorial.md","raw":"---\ntitle: Markdown tutorial\ndate: 2019-05-03 16:34:25\ntags: [Tutorial]\n---\n\n\n\nMarkdown是一种常用的标记语言，类似于html语言。许多博客都支持md格式，同时该语言也被github支持。\n\n**优点：**\n 1、简洁、无需排版。\n 2、操作简单。\n\n**缺点：**\n 1、需要记一些语法。\n 2、排版、格式有限。\n\n以下笔记总结于两篇博客，如下：\n\n<https://www.jianshu.com/p/191d1e21f7ed>\n\n<https://www.jianshu.com/p/2df05f279331>\n\n------\n\n## 一、标题\n\n在标题前加#即表示该段文字是标题。一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。\n\n示例：\n\n```bash\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n```\n\n效果：\n\n<div align=\"left\">![1553769689177](1553769689177.png)</div>\n\n------\n\n## 二、字体\n\n##### 加粗\n\n要加粗的文字左右分别用两个*号包起来\n\n##### 斜体\n\n要倾斜的文字左右分别用一个*号包起来\n\n##### 斜体加粗\n\n要倾斜和加粗的文字左右分别用三个*号包起来\n\n##### 删除线\n\n要加删除线的文字左右分别用两个~~号包起来\n\n示例：\n\n```bash\n**这是加粗的文字**\n*这是倾斜的文字*`\n***这是斜体加粗的文字***\n~~这是加删除线的文字~~\n```\n\n效果：\n\n**这是加粗的文字**\n*这是倾斜的文字*\n**这是斜体加粗的文字**\n~~这是加删除线的文字~~\n\n------\n\n## 三、分割线\n\n三个或以上的-或是*即可\n\n示例：\n\n```bash\n---\n----\n***\n*****\n```\n\n------\n\n## 四、图片\n\n语法：\n\n```bash\n![图片alt](图片地址 ''图片title'')\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n```\n\n示例：\n\n```bash\n![图片加载失败](1553769689177.png \"效果图\")\n```\n\n![图片加载失败](Markdown-tutorial/1553769689177.png \"效果图\")\n\n------\n\n## 五、超链接\n\n语法：\n\n```bash\n[超链接名](超链接地址 \"超链接title\")\ntitle可加可不加\n```\n\n示例：\n\n```bash\n[百度](http://baidu.com)\n```\n\n效果如下：\n[百度](http://baidu.com/)\n\n注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。\n\n------\n\n## 六、表格\n\n如果格式选择默认则按以下\n\n语法：\n\n```bash\n| 一个普通标题 | 一个普通标题 | 一个普通标题 |\n| ------ | ------ | ------ |\n| 短文本 | 中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本 | 中等文本 |\n```\n\n效果：\n\n| 一个普通标题     | 一个普通标题 | 一个普通标题     |\n| ---------------- | ------------ | ---------------- |\n| 短文本           | 中等文本     | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本       | 中等文本         |\n\n注：一些编辑器、解读器，表格的语句上一行必须为空行，不然表格不生效。\n\n如果有左右对齐的需求则按以下\n\nMarkdown 代码:\n\n```\n| 左对齐标题 | 右对齐标题 | 居中对齐标题 |\n| :------| ------: | :------: |\n| 短文本 | 中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 | 短文本 | 中等文本 |\n```\n\n效果如下：\n\n| 左对齐标题       | 右对齐标题 |   居中对齐标题   |\n| :--------------- | ---------: | :--------------: |\n| 短文本           |   中等文本 | 稍微长一点的文本 |\n| 稍微长一点的文本 |     短文本 |     中等文本     |\n\n------\n\n## 七、代码\n\n语法：\n 单行代码：代码之间分别用一个反引号包起来\n\n```bash\n    `代码内容`\n```\n\n代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行\n\n```bash\n(```)\n  代码...\n  代码...\n  代码...\n(```)\n```\n\n> 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。","slug":"Markdown-tutorial","published":1,"updated":"2019-07-26T06:55:21.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkza0005afp2ypfzcl1y","content":"<p>Markdown是一种常用的标记语言，类似于html语言。许多博客都支持md格式，同时该语言也被github支持。</p>\n<p><strong>优点：</strong><br> 1、简洁、无需排版。<br> 2、操作简单。</p>\n<p><strong>缺点：</strong><br> 1、需要记一些语法。<br> 2、排版、格式有限。</p>\n<p>以下笔记总结于两篇博客，如下：</p>\n<p><a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/191d1e21f7ed</a></p>\n<p><a href=\"https://www.jianshu.com/p/2df05f279331\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2df05f279331</a></p>\n<hr>\n<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a>一、标题</h2><p>在标题前加#即表示该段文字是标题。一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这是一级标题</span></span><br><span class=\"line\"><span class=\"comment\">## 这是二级标题</span></span><br><span class=\"line\"><span class=\"comment\">### 这是三级标题</span></span><br><span class=\"line\"><span class=\"comment\">#### 这是四级标题</span></span><br><span class=\"line\"><span class=\"comment\">##### 这是五级标题</span></span><br><span class=\"line\"><span class=\"comment\">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<div align=\"left\">![1553769689177](1553769689177.png)</div>\n\n<hr>\n<h2 id=\"二、字体\"><a href=\"#二、字体\" class=\"headerlink\" title=\"二、字体\"></a>二、字体</h2><h5 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h5><p>要加粗的文字左右分别用两个*号包起来</p>\n<h5 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h5><p>要倾斜的文字左右分别用一个*号包起来</p>\n<h5 id=\"斜体加粗\"><a href=\"#斜体加粗\" class=\"headerlink\" title=\"斜体加粗\"></a>斜体加粗</h5><p>要倾斜和加粗的文字左右分别用三个*号包起来</p>\n<h5 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h5><p>要加删除线的文字左右分别用两个~~号包起来</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**这是加粗的文字**</span><br><span class=\"line\">*这是倾斜的文字*`</span><br><span class=\"line\">***这是斜体加粗的文字***</span><br><span class=\"line\">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong>这是斜体加粗的文字</strong><br><del>这是加删除线的文字</del></p>\n<hr>\n<h2 id=\"三、分割线\"><a href=\"#三、分割线\" class=\"headerlink\" title=\"三、分割线\"></a>三、分割线</h2><p>三个或以上的-或是*即可</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">----</span><br><span class=\"line\">***</span><br><span class=\"line\">*****</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"四、图片\"><a href=\"#四、图片\" class=\"headerlink\" title=\"四、图片\"></a>四、图片</h2><p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片alt](图片地址 <span class=\"string\">''</span>图片title<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class=\"line\">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片加载失败](1553769689177.png <span class=\"string\">\"效果图\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/05/03/Markdown-tutorial/1553769689177.png\" alt=\"图片加载失败\" title=\"效果图\"></p>\n<hr>\n<h2 id=\"五、超链接\"><a href=\"#五、超链接\" class=\"headerlink\" title=\"五、超链接\"></a>五、超链接</h2><p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[超链接名](超链接地址 <span class=\"string\">\"超链接title\"</span>)</span><br><span class=\"line\">title可加可不加</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><a href=\"http://baidu.com/\" target=\"_blank\" rel=\"noopener\">百度</a></p>\n<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>\n<hr>\n<h2 id=\"六、表格\"><a href=\"#六、表格\" class=\"headerlink\" title=\"六、表格\"></a>六、表格</h2><p>如果格式选择默认则按以下</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class=\"line\">| ------ | ------ | ------ |</span><br><span class=\"line\">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class=\"line\">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<table>\n<thead>\n<tr>\n<th>一个普通标题</th>\n<th>一个普通标题</th>\n<th>一个普通标题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>短文本</td>\n<td>中等文本</td>\n<td>稍微长一点的文本</td>\n</tr>\n<tr>\n<td>稍微长一点的文本</td>\n<td>短文本</td>\n<td>中等文本</td>\n</tr>\n</tbody></table>\n<p>注：一些编辑器、解读器，表格的语句上一行必须为空行，不然表格不生效。</p>\n<p>如果有左右对齐的需求则按以下</p>\n<p>Markdown 代码:</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> 左对齐标题 </span>|<span class=\"string\"> 右对齐标题 </span>|<span class=\"string\"> 居中对齐标题 </span>|</span><br><span class=\"line\">|<span class=\"string\"> :------</span>|<span class=\"string\"> ------: </span>|<span class=\"string\"> :------: </span>|</span><br><span class=\"line\">|<span class=\"string\"> 短文本 </span>|<span class=\"string\"> 中等文本 </span>|<span class=\"string\"> 稍微长一点的文本 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 稍微长一点的文本 </span>|<span class=\"string\"> 短文本 </span>|<span class=\"string\"> 中等文本 </span>|</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐标题</th>\n<th align=\"right\">右对齐标题</th>\n<th align=\"center\">居中对齐标题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">短文本</td>\n<td align=\"right\">中等文本</td>\n<td align=\"center\">稍微长一点的文本</td>\n</tr>\n<tr>\n<td align=\"left\">稍微长一点的文本</td>\n<td align=\"right\">短文本</td>\n<td align=\"center\">中等文本</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"七、代码\"><a href=\"#七、代码\" class=\"headerlink\" title=\"七、代码\"></a>七、代码</h2><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`代码内容`</span><br></pre></td></tr></table></figure>\n\n<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(```)</span><br><span class=\"line\">  代码...</span><br><span class=\"line\">  代码...</span><br><span class=\"line\">  代码...</span><br><span class=\"line\">(```)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Markdown是一种常用的标记语言，类似于html语言。许多博客都支持md格式，同时该语言也被github支持。</p>\n<p><strong>优点：</strong><br> 1、简洁、无需排版。<br> 2、操作简单。</p>\n<p><strong>缺点：</strong><br> 1、需要记一些语法。<br> 2、排版、格式有限。</p>\n<p>以下笔记总结于两篇博客，如下：</p>\n<p><a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/191d1e21f7ed</a></p>\n<p><a href=\"https://www.jianshu.com/p/2df05f279331\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2df05f279331</a></p>\n<hr>\n<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a>一、标题</h2><p>在标题前加#即表示该段文字是标题。一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这是一级标题</span></span><br><span class=\"line\"><span class=\"comment\">## 这是二级标题</span></span><br><span class=\"line\"><span class=\"comment\">### 这是三级标题</span></span><br><span class=\"line\"><span class=\"comment\">#### 这是四级标题</span></span><br><span class=\"line\"><span class=\"comment\">##### 这是五级标题</span></span><br><span class=\"line\"><span class=\"comment\">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<div align=\"left\">![1553769689177](1553769689177.png)</div>\n\n<hr>\n<h2 id=\"二、字体\"><a href=\"#二、字体\" class=\"headerlink\" title=\"二、字体\"></a>二、字体</h2><h5 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h5><p>要加粗的文字左右分别用两个*号包起来</p>\n<h5 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h5><p>要倾斜的文字左右分别用一个*号包起来</p>\n<h5 id=\"斜体加粗\"><a href=\"#斜体加粗\" class=\"headerlink\" title=\"斜体加粗\"></a>斜体加粗</h5><p>要倾斜和加粗的文字左右分别用三个*号包起来</p>\n<h5 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h5><p>要加删除线的文字左右分别用两个~~号包起来</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**这是加粗的文字**</span><br><span class=\"line\">*这是倾斜的文字*`</span><br><span class=\"line\">***这是斜体加粗的文字***</span><br><span class=\"line\">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong>这是斜体加粗的文字</strong><br><del>这是加删除线的文字</del></p>\n<hr>\n<h2 id=\"三、分割线\"><a href=\"#三、分割线\" class=\"headerlink\" title=\"三、分割线\"></a>三、分割线</h2><p>三个或以上的-或是*即可</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">----</span><br><span class=\"line\">***</span><br><span class=\"line\">*****</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"四、图片\"><a href=\"#四、图片\" class=\"headerlink\" title=\"四、图片\"></a>四、图片</h2><p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片alt](图片地址 <span class=\"string\">''</span>图片title<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class=\"line\">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片加载失败](1553769689177.png <span class=\"string\">\"效果图\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/05/03/Markdown-tutorial/1553769689177.png\" alt=\"图片加载失败\" title=\"效果图\"></p>\n<hr>\n<h2 id=\"五、超链接\"><a href=\"#五、超链接\" class=\"headerlink\" title=\"五、超链接\"></a>五、超链接</h2><p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[超链接名](超链接地址 <span class=\"string\">\"超链接title\"</span>)</span><br><span class=\"line\">title可加可不加</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><a href=\"http://baidu.com/\" target=\"_blank\" rel=\"noopener\">百度</a></p>\n<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>\n<hr>\n<h2 id=\"六、表格\"><a href=\"#六、表格\" class=\"headerlink\" title=\"六、表格\"></a>六、表格</h2><p>如果格式选择默认则按以下</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class=\"line\">| ------ | ------ | ------ |</span><br><span class=\"line\">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class=\"line\">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<table>\n<thead>\n<tr>\n<th>一个普通标题</th>\n<th>一个普通标题</th>\n<th>一个普通标题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>短文本</td>\n<td>中等文本</td>\n<td>稍微长一点的文本</td>\n</tr>\n<tr>\n<td>稍微长一点的文本</td>\n<td>短文本</td>\n<td>中等文本</td>\n</tr>\n</tbody></table>\n<p>注：一些编辑器、解读器，表格的语句上一行必须为空行，不然表格不生效。</p>\n<p>如果有左右对齐的需求则按以下</p>\n<p>Markdown 代码:</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> 左对齐标题 </span>|<span class=\"string\"> 右对齐标题 </span>|<span class=\"string\"> 居中对齐标题 </span>|</span><br><span class=\"line\">|<span class=\"string\"> :------</span>|<span class=\"string\"> ------: </span>|<span class=\"string\"> :------: </span>|</span><br><span class=\"line\">|<span class=\"string\"> 短文本 </span>|<span class=\"string\"> 中等文本 </span>|<span class=\"string\"> 稍微长一点的文本 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 稍微长一点的文本 </span>|<span class=\"string\"> 短文本 </span>|<span class=\"string\"> 中等文本 </span>|</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐标题</th>\n<th align=\"right\">右对齐标题</th>\n<th align=\"center\">居中对齐标题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">短文本</td>\n<td align=\"right\">中等文本</td>\n<td align=\"center\">稍微长一点的文本</td>\n</tr>\n<tr>\n<td align=\"left\">稍微长一点的文本</td>\n<td align=\"right\">短文本</td>\n<td align=\"center\">中等文本</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"七、代码\"><a href=\"#七、代码\" class=\"headerlink\" title=\"七、代码\"></a>七、代码</h2><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`代码内容`</span><br></pre></td></tr></table></figure>\n\n<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(```)</span><br><span class=\"line\">  代码...</span><br><span class=\"line\">  代码...</span><br><span class=\"line\">  代码...</span><br><span class=\"line\">(```)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>\n</blockquote>\n"},{"title":"subsystem of Windows-System:Ubuntu16.04","date":"2019-05-03T06:31:53.000Z","_content":"\n## Unit 1 : How to install subsystem?\n\n**Step1 : Open Microsoft Store and search the key word: \"Ubuntu\" ，then choose the product: \"Ubuntu 16.04 LTS\" . **\n\n![Sample Picture](Windows-System-Ubuntu16-04\\1.PNG)\n\n**Step2 : Click the button: Get , and wait for it to finish**\n\nIt's ok! You can launch it , but maybe you can have the problem bellow.\n\n**Problem1 : WslRegisterDistribution failed with error: 0x8007019e .**\n``` vim\n1. OPen the project \"Windows PowerShell(Admin)\"\n2. Enter the command \"Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\"\n3. When the process was completed , reboot your system.\n\n```\n\n## Unit 2 ：How to use it?\n\n### 1. Query Ubuntu's  version\n\n**Enter the command:**\n\n``` shell\ncat /etc/os-release\n```\n\n![Sample Picture](Windows-System-Ubuntu16-04\\2.PNG)\n\n### 2. Update the software source of Ubuntu\n\n**Enter the command as follow:**\n\n``` bash\ncd /etc/apt\nsudo cp sources.list sources.list.bak\nsudo vi sources.list\n```\n**Delete all content of the file , and enter the content as follow:**\n\n``` vi\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n```\n**Enter the command to update software:**\n\n``` bash\nsudo apt-get upgrade \nsudo apt-get update \n```\n\n### 3. Access the file of Windows System\n\nYou can access the file in \"/mnt\" . For example , if  accessing the file located in \"C:\\Users\\\" , you can enter the command:\n``` bash\ncd /mnt/c/Users/\n```","source":"_posts/Windows-System-Ubuntu16-04.md","raw":"---\ntitle: 'subsystem of Windows-System:Ubuntu16.04'\ndate: 2019-05-03 14:31:53\ntags: [Ubuntu, Tutorial]\n---\n\n## Unit 1 : How to install subsystem?\n\n**Step1 : Open Microsoft Store and search the key word: \"Ubuntu\" ，then choose the product: \"Ubuntu 16.04 LTS\" . **\n\n![Sample Picture](Windows-System-Ubuntu16-04\\1.PNG)\n\n**Step2 : Click the button: Get , and wait for it to finish**\n\nIt's ok! You can launch it , but maybe you can have the problem bellow.\n\n**Problem1 : WslRegisterDistribution failed with error: 0x8007019e .**\n``` vim\n1. OPen the project \"Windows PowerShell(Admin)\"\n2. Enter the command \"Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\"\n3. When the process was completed , reboot your system.\n\n```\n\n## Unit 2 ：How to use it?\n\n### 1. Query Ubuntu's  version\n\n**Enter the command:**\n\n``` shell\ncat /etc/os-release\n```\n\n![Sample Picture](Windows-System-Ubuntu16-04\\2.PNG)\n\n### 2. Update the software source of Ubuntu\n\n**Enter the command as follow:**\n\n``` bash\ncd /etc/apt\nsudo cp sources.list sources.list.bak\nsudo vi sources.list\n```\n**Delete all content of the file , and enter the content as follow:**\n\n``` vi\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n```\n**Enter the command to update software:**\n\n``` bash\nsudo apt-get upgrade \nsudo apt-get update \n```\n\n### 3. Access the file of Windows System\n\nYou can access the file in \"/mnt\" . For example , if  accessing the file located in \"C:\\Users\\\" , you can enter the command:\n``` bash\ncd /mnt/c/Users/\n```","slug":"Windows-System-Ubuntu16-04","published":1,"updated":"2019-07-26T06:55:21.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkzb0006afp24vz1c632","content":"<h2 id=\"Unit-1-How-to-install-subsystem\"><a href=\"#Unit-1-How-to-install-subsystem\" class=\"headerlink\" title=\"Unit 1 : How to install subsystem?\"></a>Unit 1 : How to install subsystem?</h2><p>*<em>Step1 : Open Microsoft Store and search the key word: “Ubuntu” ，then choose the product: “Ubuntu 16.04 LTS” . *</em></p>\n<p><img src=\"/2019/05/03/Windows-System-Ubuntu16-04/Windows-System-Ubuntu16-04%5C1.PNG\" alt=\"Sample Picture\"></p>\n<p><strong>Step2 : Click the button: Get , and wait for it to finish</strong></p>\n<p>It’s ok! You can launch it , but maybe you can have the problem bellow.</p>\n<p><strong>Problem1 : WslRegisterDistribution failed with error: 0x8007019e .</strong></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. OPen the project <span class=\"string\">\"Windows PowerShell(Admin)\"</span></span><br><span class=\"line\"><span class=\"number\">2</span>. Enter the <span class=\"keyword\">command</span> <span class=\"string\">\"Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\"</span></span><br><span class=\"line\"><span class=\"number\">3</span>. When the process was completed , reboot your <span class=\"built_in\">system</span>.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Unit-2-：How-to-use-it\"><a href=\"#Unit-2-：How-to-use-it\" class=\"headerlink\" title=\"Unit 2 ：How to use it?\"></a>Unit 2 ：How to use it?</h2><h3 id=\"1-Query-Ubuntu’s-version\"><a href=\"#1-Query-Ubuntu’s-version\" class=\"headerlink\" title=\"1. Query Ubuntu’s  version\"></a>1. Query Ubuntu’s  version</h3><p><strong>Enter the command:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/os-release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/05/03/Windows-System-Ubuntu16-04/Windows-System-Ubuntu16-04%5C2.PNG\" alt=\"Sample Picture\"></p>\n<h3 id=\"2-Update-the-software-source-of-Ubuntu\"><a href=\"#2-Update-the-software-source-of-Ubuntu\" class=\"headerlink\" title=\"2. Update the software source of Ubuntu\"></a>2. Update the software source of Ubuntu</h3><p><strong>Enter the command as follow:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/apt</span><br><span class=\"line\">sudo cp sources.list sources.list.bak</span><br><span class=\"line\">sudo vi sources.list</span><br></pre></td></tr></table></figure>\n\n<p><strong>Delete all content of the file , and enter the content as follow:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p><strong>Enter the command to update software:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get upgrade </span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Access-the-file-of-Windows-System\"><a href=\"#3-Access-the-file-of-Windows-System\" class=\"headerlink\" title=\"3. Access the file of Windows System\"></a>3. Access the file of Windows System</h3><p>You can access the file in “/mnt” . For example , if  accessing the file located in “C:\\Users&quot; , you can enter the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /mnt/c/Users/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Unit-1-How-to-install-subsystem\"><a href=\"#Unit-1-How-to-install-subsystem\" class=\"headerlink\" title=\"Unit 1 : How to install subsystem?\"></a>Unit 1 : How to install subsystem?</h2><p>*<em>Step1 : Open Microsoft Store and search the key word: “Ubuntu” ，then choose the product: “Ubuntu 16.04 LTS” . *</em></p>\n<p><img src=\"/2019/05/03/Windows-System-Ubuntu16-04/Windows-System-Ubuntu16-04%5C1.PNG\" alt=\"Sample Picture\"></p>\n<p><strong>Step2 : Click the button: Get , and wait for it to finish</strong></p>\n<p>It’s ok! You can launch it , but maybe you can have the problem bellow.</p>\n<p><strong>Problem1 : WslRegisterDistribution failed with error: 0x8007019e .</strong></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. OPen the project <span class=\"string\">\"Windows PowerShell(Admin)\"</span></span><br><span class=\"line\"><span class=\"number\">2</span>. Enter the <span class=\"keyword\">command</span> <span class=\"string\">\"Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\"</span></span><br><span class=\"line\"><span class=\"number\">3</span>. When the process was completed , reboot your <span class=\"built_in\">system</span>.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Unit-2-：How-to-use-it\"><a href=\"#Unit-2-：How-to-use-it\" class=\"headerlink\" title=\"Unit 2 ：How to use it?\"></a>Unit 2 ：How to use it?</h2><h3 id=\"1-Query-Ubuntu’s-version\"><a href=\"#1-Query-Ubuntu’s-version\" class=\"headerlink\" title=\"1. Query Ubuntu’s  version\"></a>1. Query Ubuntu’s  version</h3><p><strong>Enter the command:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/os-release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/05/03/Windows-System-Ubuntu16-04/Windows-System-Ubuntu16-04%5C2.PNG\" alt=\"Sample Picture\"></p>\n<h3 id=\"2-Update-the-software-source-of-Ubuntu\"><a href=\"#2-Update-the-software-source-of-Ubuntu\" class=\"headerlink\" title=\"2. Update the software source of Ubuntu\"></a>2. Update the software source of Ubuntu</h3><p><strong>Enter the command as follow:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/apt</span><br><span class=\"line\">sudo cp sources.list sources.list.bak</span><br><span class=\"line\">sudo vi sources.list</span><br></pre></td></tr></table></figure>\n\n<p><strong>Delete all content of the file , and enter the content as follow:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p><strong>Enter the command to update software:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get upgrade </span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Access-the-file-of-Windows-System\"><a href=\"#3-Access-the-file-of-Windows-System\" class=\"headerlink\" title=\"3. Access the file of Windows System\"></a>3. Access the file of Windows System</h3><p>You can access the file in “/mnt” . For example , if  accessing the file located in “C:\\Users&quot; , you can enter the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /mnt/c/Users/</span><br></pre></td></tr></table></figure>"},{"title":"安装教程：Ubuntu16.04+CUDA9.0+CUDNN7.1+caffe(gpu)+opencv","date":"2018-12-27T17:45:17.000Z","_content":"**本教程适用于CUDA9.0+CUDNN7.1+OPENCV(3.4.0)**\n\n## 一、依赖包安装\n\n 在Ubuntu的Terminal中输入：\n``` bash\nsudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler\nsudo apt-get install --no-install-recommends libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\nsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n```\n\n\n## 二、驱动安装(Nvidia 384.X版本的驱动)\n方式一\n在Terminal输入：\n``` bash\nsudo apt-get update  \nsudo add-apt-repository ppa:graphics-drivers/ppa \nsudo apt-get update \nsudo apt-get install nvidia-384 \nsudo apt-get install mesa-common-dev \nsudo apt-getinstall freeglut3-dev\n```\n方式二\n直接在Ubuntu中的System Settings-->Software&Updates中的additional drivers：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/1.png)\n驱动安装成功的标志：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/2.png)\n\n## 三、CUDA9.0安装\n请通过官网下载CUDA安装文件（.run文件)，运行文件命令如下：\n``` bash\n# 先CD至.run文件的文件夹，再运行该命令\nsudo sh cuda_9.0.176_384.81_linux.run\n```\n先按q直接跳过阅读协议，然后accept，后面的除了Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 384.81?这样的选n,其它的有y选y，或者直接回车默认\n检查一下环境变量\n``` bash\ngedit ~/.bashr\n```\n末尾添加\n``` bash\n#cuda\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64/:$LD_LIBRARY_PATH\nexport PATH=/usr/local/cuda-9.0/bin:$PATH\n```\n然后激活\n``` bash\nsource ~/.bashrc\n```\n检验安装是否完整：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/3.png)\n\n## 四、CUDNN7.1安装\n请通过官网下载CUDNN安装文件（.tgz文件)，直接在Terminal中cd至所在文件夹，运行以下命令：\n``` bash\ntar -zxvf cudnn-9.0-linux-x64-v7.1.tgz \nsudo cp cuda/include/cudnn.h /usr/local/cuda/include/ \nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ -d \nsudo chmod a+r /usr/local/cuda/include/cudnn.h \nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n```\n检验是否安装完整：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/4.png)\n\n## 五、Opencv源码编译安装\n将下载好的opencv源码（.zip文件）解压缩至home文件夹下，然后在Terminal中输入：\n``` bash\ncd ~/opencv-3.4.1\nmkdir build \ncd build \ncmake -D CMAKE_BUILD_TYPE=Release .. \nsudo make -j8\nsudo make install\n```\n安装完后检验:\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/5.png)\n\n## 六、Caffe安装\n此处我直接安装到home目录，执行：\n``` bash\ncd ~ \ngit clone https://github.com/BVLC/caffe.git #开始clone \n```\n等待下载结束，下载结束后在你的home路径下会存在，caffe文件夹。接下来进入caffe并开始配置caffe，配置如下:\n``` bash\nsudo cp Makefile.config.example Makefile.config\nsudo gedit Makefile.config #或者sudo vim Makefile.config\n```\n修改Makefile.config内容：\n``` bash\n将：\n#USE_CUDNN := 1\n修改为： \nUSE_CUDNN := 1\n\n将：\n#OPENCV_VERSION := 3 \n修改为： \nOPENCV_VERSION := 3\n\n将：\n#WITH_PYTHON_LAYER := 1\n修改为\nWITH_PYTHON_LAYER := 1\n\n将：\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib\n修改为：\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n\n将\n# CUDA architecture setting: going with all of them.\n# For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.\n# For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.\n# For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.\nCUDA_ARCH := -gencode arch=compute_20,code=sm_20 \\\n           -gencode arch=compute_20,code=sm_21 \\\n           -gencode arch=compute_30,code=sm_30 \\\n           -gencode arch=compute_35,code=sm_35 \\\n           -gencode arch=compute_50,code=sm_50 \\\n           -gencode arch=compute_52,code=sm_52 \\\n           -gencode arch=compute_60,code=sm_60 \\\n           -gencode arch=compute_61,code=sm_61 \\\n           -gencode arch=compute_61,code=compute_61\n\n改为：\n# CUDA architecture setting: going with all of them.\n# For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.\n# For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.\n# For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.\nCUDA_ARCH := -gencode arch=compute_30,code=sm_30 \\\n           -gencode arch=compute_35,code=sm_35 \\\n           -gencode arch=compute_50,code=sm_50 \\\n           -gencode arch=compute_52,code=sm_52 \\\n           -gencode arch=compute_60,code=sm_60 \\\n           -gencode arch=compute_61,code=sm_61 \\\n           -gencode arch=compute_61,code=compute_61\n\n```\n修改Makefile文件：\n``` bash\n将：\nNVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)\n替换为：\nNVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\n将：\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5\n改为：\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n```\n配置完好之后开始编译：\n``` bash\ncd caffe\nsudo make clean\nsudo make all #或者make all -j4(代表4核，或者j8)\nsudo make test\nsudo make runtest #或者sudo make runtest -j8\nsudo make pycaffe\n```\n检验是否安装完整：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/6.png)\n所有的test中，如果编译不报错，则说明安装完整。\n","source":"_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv.md","raw":"---\ntitle: 安装教程：Ubuntu16.04+CUDA9.0+CUDNN7.1+caffe(gpu)+opencv\ndate: 2018-12-28 01:45:17\ntags: [caffe]\n---\n**本教程适用于CUDA9.0+CUDNN7.1+OPENCV(3.4.0)**\n\n## 一、依赖包安装\n\n 在Ubuntu的Terminal中输入：\n``` bash\nsudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler\nsudo apt-get install --no-install-recommends libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev\nsudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev\n```\n\n\n## 二、驱动安装(Nvidia 384.X版本的驱动)\n方式一\n在Terminal输入：\n``` bash\nsudo apt-get update  \nsudo add-apt-repository ppa:graphics-drivers/ppa \nsudo apt-get update \nsudo apt-get install nvidia-384 \nsudo apt-get install mesa-common-dev \nsudo apt-getinstall freeglut3-dev\n```\n方式二\n直接在Ubuntu中的System Settings-->Software&Updates中的additional drivers：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/1.png)\n驱动安装成功的标志：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/2.png)\n\n## 三、CUDA9.0安装\n请通过官网下载CUDA安装文件（.run文件)，运行文件命令如下：\n``` bash\n# 先CD至.run文件的文件夹，再运行该命令\nsudo sh cuda_9.0.176_384.81_linux.run\n```\n先按q直接跳过阅读协议，然后accept，后面的除了Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 384.81?这样的选n,其它的有y选y，或者直接回车默认\n检查一下环境变量\n``` bash\ngedit ~/.bashr\n```\n末尾添加\n``` bash\n#cuda\nexport LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64/:$LD_LIBRARY_PATH\nexport PATH=/usr/local/cuda-9.0/bin:$PATH\n```\n然后激活\n``` bash\nsource ~/.bashrc\n```\n检验安装是否完整：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/3.png)\n\n## 四、CUDNN7.1安装\n请通过官网下载CUDNN安装文件（.tgz文件)，直接在Terminal中cd至所在文件夹，运行以下命令：\n``` bash\ntar -zxvf cudnn-9.0-linux-x64-v7.1.tgz \nsudo cp cuda/include/cudnn.h /usr/local/cuda/include/ \nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ -d \nsudo chmod a+r /usr/local/cuda/include/cudnn.h \nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n```\n检验是否安装完整：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/4.png)\n\n## 五、Opencv源码编译安装\n将下载好的opencv源码（.zip文件）解压缩至home文件夹下，然后在Terminal中输入：\n``` bash\ncd ~/opencv-3.4.1\nmkdir build \ncd build \ncmake -D CMAKE_BUILD_TYPE=Release .. \nsudo make -j8\nsudo make install\n```\n安装完后检验:\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/5.png)\n\n## 六、Caffe安装\n此处我直接安装到home目录，执行：\n``` bash\ncd ~ \ngit clone https://github.com/BVLC/caffe.git #开始clone \n```\n等待下载结束，下载结束后在你的home路径下会存在，caffe文件夹。接下来进入caffe并开始配置caffe，配置如下:\n``` bash\nsudo cp Makefile.config.example Makefile.config\nsudo gedit Makefile.config #或者sudo vim Makefile.config\n```\n修改Makefile.config内容：\n``` bash\n将：\n#USE_CUDNN := 1\n修改为： \nUSE_CUDNN := 1\n\n将：\n#OPENCV_VERSION := 3 \n修改为： \nOPENCV_VERSION := 3\n\n将：\n#WITH_PYTHON_LAYER := 1\n修改为\nWITH_PYTHON_LAYER := 1\n\n将：\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib\n修改为：\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n\n将\n# CUDA architecture setting: going with all of them.\n# For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.\n# For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.\n# For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.\nCUDA_ARCH := -gencode arch=compute_20,code=sm_20 \\\n           -gencode arch=compute_20,code=sm_21 \\\n           -gencode arch=compute_30,code=sm_30 \\\n           -gencode arch=compute_35,code=sm_35 \\\n           -gencode arch=compute_50,code=sm_50 \\\n           -gencode arch=compute_52,code=sm_52 \\\n           -gencode arch=compute_60,code=sm_60 \\\n           -gencode arch=compute_61,code=sm_61 \\\n           -gencode arch=compute_61,code=compute_61\n\n改为：\n# CUDA architecture setting: going with all of them.\n# For CUDA &lt; 6.0, comment the *_50 through *_61 lines for compatibility.\n# For CUDA &lt; 8.0, comment the *_60 and *_61 lines for compatibility.\n# For CUDA &gt;= 9.0, comment the *_20 and *_21 lines for compatibility.\nCUDA_ARCH := -gencode arch=compute_30,code=sm_30 \\\n           -gencode arch=compute_35,code=sm_35 \\\n           -gencode arch=compute_50,code=sm_50 \\\n           -gencode arch=compute_52,code=sm_52 \\\n           -gencode arch=compute_60,code=sm_60 \\\n           -gencode arch=compute_61,code=sm_61 \\\n           -gencode arch=compute_61,code=compute_61\n\n```\n修改Makefile文件：\n``` bash\n将：\nNVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)\n替换为：\nNVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\n将：\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5\n改为：\nLIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial\n```\n配置完好之后开始编译：\n``` bash\ncd caffe\nsudo make clean\nsudo make all #或者make all -j4(代表4核，或者j8)\nsudo make test\nsudo make runtest #或者sudo make runtest -j8\nsudo make pycaffe\n```\n检验是否安装完整：\n![效果图](安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/6.png)\n所有的test中，如果编译不报错，则说明安装完整。\n","slug":"安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv","published":1,"updated":"2019-07-26T06:55:21.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkzc0009afp2386vkq8b","content":"<p><strong>本教程适用于CUDA9.0+CUDNN7.1+OPENCV(3.4.0)</strong></p>\n<h2 id=\"一、依赖包安装\"><a href=\"#一、依赖包安装\" class=\"headerlink\" title=\"一、依赖包安装\"></a>一、依赖包安装</h2><p> 在Ubuntu的Terminal中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class=\"line\">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class=\"line\">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class=\"line\">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、驱动安装-Nvidia-384-X版本的驱动\"><a href=\"#二、驱动安装-Nvidia-384-X版本的驱动\" class=\"headerlink\" title=\"二、驱动安装(Nvidia 384.X版本的驱动)\"></a>二、驱动安装(Nvidia 384.X版本的驱动)</h2><p>方式一<br>在Terminal输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update  </span><br><span class=\"line\">sudo add-apt-repository ppa:graphics-drivers/ppa </span><br><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get install nvidia-384 </span><br><span class=\"line\">sudo apt-get install mesa-common-dev </span><br><span class=\"line\">sudo apt-getinstall freeglut3-dev</span><br></pre></td></tr></table></figure>\n\n<p>方式二<br>直接在Ubuntu中的System Settings–&gt;Software&amp;Updates中的additional drivers：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/1.png\" alt=\"效果图\"><br>驱动安装成功的标志：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/2.png\" alt=\"效果图\"></p>\n<h2 id=\"三、CUDA9-0安装\"><a href=\"#三、CUDA9-0安装\" class=\"headerlink\" title=\"三、CUDA9.0安装\"></a>三、CUDA9.0安装</h2><p>请通过官网下载CUDA安装文件（.run文件)，运行文件命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先CD至.run文件的文件夹，再运行该命令</span></span><br><span class=\"line\">sudo sh cuda_9.0.176_384.81_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>先按q直接跳过阅读协议，然后accept，后面的除了Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 384.81?这样的选n,其它的有y选y，或者直接回车默认<br>检查一下环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gedit ~/.bashr</span><br></pre></td></tr></table></figure>\n\n<p>末尾添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cuda</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda-9.0/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>然后激活</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>检验安装是否完整：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/3.png\" alt=\"效果图\"></p>\n<h2 id=\"四、CUDNN7-1安装\"><a href=\"#四、CUDNN7-1安装\" class=\"headerlink\" title=\"四、CUDNN7.1安装\"></a>四、CUDNN7.1安装</h2><p>请通过官网下载CUDNN安装文件（.tgz文件)，直接在Terminal中cd至所在文件夹，运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cudnn-9.0-linux-x64-v7.1.tgz </span><br><span class=\"line\">sudo cp cuda/include/cudnn.h /usr/<span class=\"built_in\">local</span>/cuda/include/ </span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn* /usr/<span class=\"built_in\">local</span>/cuda/lib64/ -d </span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h </span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n<p>检验是否安装完整：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/4.png\" alt=\"效果图\"></p>\n<h2 id=\"五、Opencv源码编译安装\"><a href=\"#五、Opencv源码编译安装\" class=\"headerlink\" title=\"五、Opencv源码编译安装\"></a>五、Opencv源码编译安装</h2><p>将下载好的opencv源码（.zip文件）解压缩至home文件夹下，然后在Terminal中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/opencv-3.4.1</span><br><span class=\"line\">mkdir build </span><br><span class=\"line\"><span class=\"built_in\">cd</span> build </span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release .. </span><br><span class=\"line\">sudo make -j8</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完后检验:<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/5.png\" alt=\"效果图\"></p>\n<h2 id=\"六、Caffe安装\"><a href=\"#六、Caffe安装\" class=\"headerlink\" title=\"六、Caffe安装\"></a>六、Caffe安装</h2><p>此处我直接安装到home目录，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ </span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/BVLC/caffe.git <span class=\"comment\">#开始clone</span></span><br></pre></td></tr></table></figure>\n\n<p>等待下载结束，下载结束后在你的home路径下会存在，caffe文件夹。接下来进入caffe并开始配置caffe，配置如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp Makefile.config.example Makefile.config</span><br><span class=\"line\">sudo gedit Makefile.config <span class=\"comment\">#或者sudo vim Makefile.config</span></span><br></pre></td></tr></table></figure>\n\n<p>修改Makefile.config内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\"><span class=\"comment\">#USE_CUDNN := 1</span></span><br><span class=\"line\">修改为： </span><br><span class=\"line\">USE_CUDNN := 1</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\"><span class=\"comment\">#OPENCV_VERSION := 3 </span></span><br><span class=\"line\">修改为： </span><br><span class=\"line\">OPENCV_VERSION := 3</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\"><span class=\"comment\">#WITH_PYTHON_LAYER := 1</span></span><br><span class=\"line\">修改为</span><br><span class=\"line\">WITH_PYTHON_LAYER := 1</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/<span class=\"built_in\">local</span>/include</span><br><span class=\"line\">LIBRARY_DIRS := $(PYTHON_LIB) /usr/<span class=\"built_in\">local</span>/lib /usr/lib</span><br><span class=\"line\">修改为：</span><br><span class=\"line\">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/<span class=\"built_in\">local</span>/include /usr/include/hdf5/serial</span><br><span class=\"line\">LIBRARY_DIRS := $(PYTHON_LIB) /usr/<span class=\"built_in\">local</span>/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class=\"line\"></span><br><span class=\"line\">将</span><br><span class=\"line\"><span class=\"comment\"># CUDA architecture setting: going with all of them.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 6.0, comment the *_50 through *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 8.0, comment the *_60 and *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;gt;= 9.0, comment the *_20 and *_21 lines for compatibility.</span></span><br><span class=\"line\">CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \\</span><br><span class=\"line\">           -gencode arch=compute_20,code=sm_21 \\</span><br><span class=\"line\">           -gencode arch=compute_30,code=sm_30 \\</span><br><span class=\"line\">           -gencode arch=compute_35,code=sm_35 \\</span><br><span class=\"line\">           -gencode arch=compute_50,code=sm_50 \\</span><br><span class=\"line\">           -gencode arch=compute_52,code=sm_52 \\</span><br><span class=\"line\">           -gencode arch=compute_60,code=sm_60 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=sm_61 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=compute_61</span><br><span class=\"line\"></span><br><span class=\"line\">改为：</span><br><span class=\"line\"><span class=\"comment\"># CUDA architecture setting: going with all of them.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 6.0, comment the *_50 through *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 8.0, comment the *_60 and *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;gt;= 9.0, comment the *_20 and *_21 lines for compatibility.</span></span><br><span class=\"line\">CUDA_ARCH := -gencode arch=compute_30,code=sm_30 \\</span><br><span class=\"line\">           -gencode arch=compute_35,code=sm_35 \\</span><br><span class=\"line\">           -gencode arch=compute_50,code=sm_50 \\</span><br><span class=\"line\">           -gencode arch=compute_52,code=sm_52 \\</span><br><span class=\"line\">           -gencode arch=compute_60,code=sm_60 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=sm_61 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=compute_61</span><br></pre></td></tr></table></figure>\n\n<p>修改Makefile文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">NVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)</span><br><span class=\"line\">替换为：</span><br><span class=\"line\">NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5</span><br><span class=\"line\">改为：</span><br><span class=\"line\">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial</span><br></pre></td></tr></table></figure>\n\n<p>配置完好之后开始编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> caffe</span><br><span class=\"line\">sudo make clean</span><br><span class=\"line\">sudo make all <span class=\"comment\">#或者make all -j4(代表4核，或者j8)</span></span><br><span class=\"line\">sudo make <span class=\"built_in\">test</span></span><br><span class=\"line\">sudo make runtest <span class=\"comment\">#或者sudo make runtest -j8</span></span><br><span class=\"line\">sudo make pycaffe</span><br></pre></td></tr></table></figure>\n\n<p>检验是否安装完整：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/6.png\" alt=\"效果图\"><br>所有的test中，如果编译不报错，则说明安装完整。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>本教程适用于CUDA9.0+CUDNN7.1+OPENCV(3.4.0)</strong></p>\n<h2 id=\"一、依赖包安装\"><a href=\"#一、依赖包安装\" class=\"headerlink\" title=\"一、依赖包安装\"></a>一、依赖包安装</h2><p> 在Ubuntu的Terminal中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class=\"line\">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class=\"line\">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class=\"line\">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、驱动安装-Nvidia-384-X版本的驱动\"><a href=\"#二、驱动安装-Nvidia-384-X版本的驱动\" class=\"headerlink\" title=\"二、驱动安装(Nvidia 384.X版本的驱动)\"></a>二、驱动安装(Nvidia 384.X版本的驱动)</h2><p>方式一<br>在Terminal输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update  </span><br><span class=\"line\">sudo add-apt-repository ppa:graphics-drivers/ppa </span><br><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get install nvidia-384 </span><br><span class=\"line\">sudo apt-get install mesa-common-dev </span><br><span class=\"line\">sudo apt-getinstall freeglut3-dev</span><br></pre></td></tr></table></figure>\n\n<p>方式二<br>直接在Ubuntu中的System Settings–&gt;Software&amp;Updates中的additional drivers：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/1.png\" alt=\"效果图\"><br>驱动安装成功的标志：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/2.png\" alt=\"效果图\"></p>\n<h2 id=\"三、CUDA9-0安装\"><a href=\"#三、CUDA9-0安装\" class=\"headerlink\" title=\"三、CUDA9.0安装\"></a>三、CUDA9.0安装</h2><p>请通过官网下载CUDA安装文件（.run文件)，运行文件命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先CD至.run文件的文件夹，再运行该命令</span></span><br><span class=\"line\">sudo sh cuda_9.0.176_384.81_linux.run</span><br></pre></td></tr></table></figure>\n\n<p>先按q直接跳过阅读协议，然后accept，后面的除了Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 384.81?这样的选n,其它的有y选y，或者直接回车默认<br>检查一下环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gedit ~/.bashr</span><br></pre></td></tr></table></figure>\n\n<p>末尾添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cuda</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=/usr/<span class=\"built_in\">local</span>/cuda-9.0/lib64/:<span class=\"variable\">$LD_LIBRARY_PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/cuda-9.0/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>然后激活</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>检验安装是否完整：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/3.png\" alt=\"效果图\"></p>\n<h2 id=\"四、CUDNN7-1安装\"><a href=\"#四、CUDNN7-1安装\" class=\"headerlink\" title=\"四、CUDNN7.1安装\"></a>四、CUDNN7.1安装</h2><p>请通过官网下载CUDNN安装文件（.tgz文件)，直接在Terminal中cd至所在文件夹，运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cudnn-9.0-linux-x64-v7.1.tgz </span><br><span class=\"line\">sudo cp cuda/include/cudnn.h /usr/<span class=\"built_in\">local</span>/cuda/include/ </span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn* /usr/<span class=\"built_in\">local</span>/cuda/lib64/ -d </span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/include/cudnn.h </span><br><span class=\"line\">sudo chmod a+r /usr/<span class=\"built_in\">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n<p>检验是否安装完整：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/4.png\" alt=\"效果图\"></p>\n<h2 id=\"五、Opencv源码编译安装\"><a href=\"#五、Opencv源码编译安装\" class=\"headerlink\" title=\"五、Opencv源码编译安装\"></a>五、Opencv源码编译安装</h2><p>将下载好的opencv源码（.zip文件）解压缩至home文件夹下，然后在Terminal中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/opencv-3.4.1</span><br><span class=\"line\">mkdir build </span><br><span class=\"line\"><span class=\"built_in\">cd</span> build </span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release .. </span><br><span class=\"line\">sudo make -j8</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完后检验:<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/5.png\" alt=\"效果图\"></p>\n<h2 id=\"六、Caffe安装\"><a href=\"#六、Caffe安装\" class=\"headerlink\" title=\"六、Caffe安装\"></a>六、Caffe安装</h2><p>此处我直接安装到home目录，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ </span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/BVLC/caffe.git <span class=\"comment\">#开始clone</span></span><br></pre></td></tr></table></figure>\n\n<p>等待下载结束，下载结束后在你的home路径下会存在，caffe文件夹。接下来进入caffe并开始配置caffe，配置如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp Makefile.config.example Makefile.config</span><br><span class=\"line\">sudo gedit Makefile.config <span class=\"comment\">#或者sudo vim Makefile.config</span></span><br></pre></td></tr></table></figure>\n\n<p>修改Makefile.config内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\"><span class=\"comment\">#USE_CUDNN := 1</span></span><br><span class=\"line\">修改为： </span><br><span class=\"line\">USE_CUDNN := 1</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\"><span class=\"comment\">#OPENCV_VERSION := 3 </span></span><br><span class=\"line\">修改为： </span><br><span class=\"line\">OPENCV_VERSION := 3</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\"><span class=\"comment\">#WITH_PYTHON_LAYER := 1</span></span><br><span class=\"line\">修改为</span><br><span class=\"line\">WITH_PYTHON_LAYER := 1</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/<span class=\"built_in\">local</span>/include</span><br><span class=\"line\">LIBRARY_DIRS := $(PYTHON_LIB) /usr/<span class=\"built_in\">local</span>/lib /usr/lib</span><br><span class=\"line\">修改为：</span><br><span class=\"line\">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/<span class=\"built_in\">local</span>/include /usr/include/hdf5/serial</span><br><span class=\"line\">LIBRARY_DIRS := $(PYTHON_LIB) /usr/<span class=\"built_in\">local</span>/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class=\"line\"></span><br><span class=\"line\">将</span><br><span class=\"line\"><span class=\"comment\"># CUDA architecture setting: going with all of them.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 6.0, comment the *_50 through *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 8.0, comment the *_60 and *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;gt;= 9.0, comment the *_20 and *_21 lines for compatibility.</span></span><br><span class=\"line\">CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \\</span><br><span class=\"line\">           -gencode arch=compute_20,code=sm_21 \\</span><br><span class=\"line\">           -gencode arch=compute_30,code=sm_30 \\</span><br><span class=\"line\">           -gencode arch=compute_35,code=sm_35 \\</span><br><span class=\"line\">           -gencode arch=compute_50,code=sm_50 \\</span><br><span class=\"line\">           -gencode arch=compute_52,code=sm_52 \\</span><br><span class=\"line\">           -gencode arch=compute_60,code=sm_60 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=sm_61 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=compute_61</span><br><span class=\"line\"></span><br><span class=\"line\">改为：</span><br><span class=\"line\"><span class=\"comment\"># CUDA architecture setting: going with all of them.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 6.0, comment the *_50 through *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;lt; 8.0, comment the *_60 and *_61 lines for compatibility.</span></span><br><span class=\"line\"><span class=\"comment\"># For CUDA &amp;gt;= 9.0, comment the *_20 and *_21 lines for compatibility.</span></span><br><span class=\"line\">CUDA_ARCH := -gencode arch=compute_30,code=sm_30 \\</span><br><span class=\"line\">           -gencode arch=compute_35,code=sm_35 \\</span><br><span class=\"line\">           -gencode arch=compute_50,code=sm_50 \\</span><br><span class=\"line\">           -gencode arch=compute_52,code=sm_52 \\</span><br><span class=\"line\">           -gencode arch=compute_60,code=sm_60 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=sm_61 \\</span><br><span class=\"line\">           -gencode arch=compute_61,code=compute_61</span><br></pre></td></tr></table></figure>\n\n<p>修改Makefile文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">NVCCFLAGS +=-ccbin=$(CXX) -Xcompiler-fPIC $(COMMON_FLAGS)</span><br><span class=\"line\">替换为：</span><br><span class=\"line\">NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</span><br><span class=\"line\"></span><br><span class=\"line\">将：</span><br><span class=\"line\">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5</span><br><span class=\"line\">改为：</span><br><span class=\"line\">LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial</span><br></pre></td></tr></table></figure>\n\n<p>配置完好之后开始编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> caffe</span><br><span class=\"line\">sudo make clean</span><br><span class=\"line\">sudo make all <span class=\"comment\">#或者make all -j4(代表4核，或者j8)</span></span><br><span class=\"line\">sudo make <span class=\"built_in\">test</span></span><br><span class=\"line\">sudo make runtest <span class=\"comment\">#或者sudo make runtest -j8</span></span><br><span class=\"line\">sudo make pycaffe</span><br></pre></td></tr></table></figure>\n\n<p>检验是否安装完整：<br><img src=\"/2018/12/28/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%9AUbuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/6.png\" alt=\"效果图\"><br>所有的test中，如果编译不报错，则说明安装完整。</p>\n"},{"title":"提醒事项","date":"2019-04-18T19:09:46.000Z","_content":"\n# 每日任务\n\n|项目|优先级|坚持天数|\n| :-----: | :-----: | :-----: |\n|背单词|1|100天|\n|跑步|2|50天|\n\n# 未竟事业记录表\n\n只记录没有完成每日任务的时候\n\n","source":"_posts/提醒事项.md","raw":"---\ntitle: 提醒事项\ndate: 2019-04-19 03:09:46\ntags: [生活点滴]\n---\n\n# 每日任务\n\n|项目|优先级|坚持天数|\n| :-----: | :-----: | :-----: |\n|背单词|1|100天|\n|跑步|2|50天|\n\n# 未竟事业记录表\n\n只记录没有完成每日任务的时候\n\n","slug":"提醒事项","published":1,"updated":"2019-07-26T06:55:21.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkzd000aafp2l9qf12re","content":"<h1 id=\"每日任务\"><a href=\"#每日任务\" class=\"headerlink\" title=\"每日任务\"></a>每日任务</h1><table>\n<thead>\n<tr>\n<th align=\"center\">项目</th>\n<th align=\"center\">优先级</th>\n<th align=\"center\">坚持天数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">背单词</td>\n<td align=\"center\">1</td>\n<td align=\"center\">100天</td>\n</tr>\n<tr>\n<td align=\"center\">跑步</td>\n<td align=\"center\">2</td>\n<td align=\"center\">50天</td>\n</tr>\n</tbody></table>\n<h1 id=\"未竟事业记录表\"><a href=\"#未竟事业记录表\" class=\"headerlink\" title=\"未竟事业记录表\"></a>未竟事业记录表</h1><p>只记录没有完成每日任务的时候</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"每日任务\"><a href=\"#每日任务\" class=\"headerlink\" title=\"每日任务\"></a>每日任务</h1><table>\n<thead>\n<tr>\n<th align=\"center\">项目</th>\n<th align=\"center\">优先级</th>\n<th align=\"center\">坚持天数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">背单词</td>\n<td align=\"center\">1</td>\n<td align=\"center\">100天</td>\n</tr>\n<tr>\n<td align=\"center\">跑步</td>\n<td align=\"center\">2</td>\n<td align=\"center\">50天</td>\n</tr>\n</tbody></table>\n<h1 id=\"未竟事业记录表\"><a href=\"#未竟事业记录表\" class=\"headerlink\" title=\"未竟事业记录表\"></a>未竟事业记录表</h1><p>只记录没有完成每日任务的时候</p>\n"},{"title":"落星","date":"2019-04-18T18:53:28.000Z","_content":"\n去不该去的地方，做不该做的事情，这也是勇气啊！             ——《侠肝义胆沈剑心》（2019.04.19）\n\n","source":"_posts/落星.md","raw":"---\ntitle: 落星\ndate: 2019-04-19 02:53:28\ntags: [生活点滴]\n---\n\n去不该去的地方，做不该做的事情，这也是勇气啊！             ——《侠肝义胆沈剑心》（2019.04.19）\n\n","slug":"落星","published":1,"updated":"2019-07-26T06:55:21.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsmkze000cafp2fdrak4mi","content":"<p>去不该去的地方，做不该做的事情，这也是勇气啊！             ——《侠肝义胆沈剑心》（2019.04.19）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>去不该去的地方，做不该做的事情，这也是勇气啊！             ——《侠肝义胆沈剑心》（2019.04.19）</p>\n"},{"title":"caffe-yolo summary","date":"2019-01-08T03:02:41.000Z","_content":"**本博文记录博主对caffe的初步理解以及yolo在caffe上的运行**\n\n## 一、数据处理篇\n### 1.1 Dataset转化为LMDB\n&nbsp;&nbsp;&nbsp;&nbsp;如先前所做的总结，在这里再次强调一下，首先要将数据转化为LMDB或LEVELDB格式，再输入至caffe的数据输入层。而图片转化为LMDB格式时，其形状或维度含义为[heights, weights, channels] 。其代码（位于caffe/src/caffe/util/io.cpp）如下:\n``` c++\nvoid CVMatToDatum(const cv::Mat& cv_img, Datum* datum) {a  CHECK(cv_img.depth() == CV_8U) << \"Image data type must be unsigned byte\";\n  datum->set_channels(cv_img.channels());\n  datum->set_height(cv_img.rows);\n  datum->set_width(cv_img.cols);\n  datum->clear_data();\n  datum->clear_float_data();\n  datum->set_encoded(false);\n  int datum_channels = datum->channels();\n  int datum_height = datum->height();\n  int datum_width = datum->width();\n  int datum_size = datum_channels * datum_height * datum_width;\n  std::string buffer(datum_size, ' ');\n  for (int h = 0; h < datum_height; ++h) {\n    const uchar* ptr = cv_img.ptr<uchar>(h);\n    int img_index = 0;\n    for (int w = 0; w < datum_width; ++w) {\n      for (int c = 0; c < datum_channels; ++c) {\n        int datum_index = (c * datum_height + h) * datum_width + w;\n        buffer[datum_index] = static_cast<char>(ptr[img_index++]);\n      }\n    }\n  }\n  datum->set_data(buffer);\n}\n```\n\n而label文件对bounding-box的标记也从[Xmin, Ymin, Xmax, Ymax] 转化为[Xmid, Ymid, W, H]，同时，对其进行了归一化操作；并将不同class转为对应的index（按照label_map进行`映射）。其代码（位于caffe/src/caffe/util/io.cpp）如下:\n\n``` c++\nvoid ParseXmlToDatum(const string& annoname, const map<string, int>& label_map,\n    int ori_w, int ori_h, Datum* datum) {\n  ptree pt;\n  read_xml(annoname, pt);\n  int width(0), height(0);\n  try {\n    height = pt.get<int>(\"annotation.size.height\");\n    width = pt.get<int>(\"annotation.size.width\");\n    CHECK_EQ(ori_w, width);\n    CHECK_EQ(ori_h, height);\n  } catch (const ptree_error &e) {\n    LOG(WARNING) << \"When paring \" << annoname << \": \" << e.what();\n  }\n  datum->clear_float_data();\n  BOOST_FOREACH(ptree::value_type &v1, pt.get_child(\"annotation\")) {\n    if (v1.first == \"object\") {\n      ptree object = v1.second;\n      int label(-1);\n      vector<float> box(4, 0);\n      int difficult(0);\n      BOOST_FOREACH(ptree::value_type &v2, object.get_child(\"\")) {\n        ptree pt2 = v2.second;\n        if (v2.first == \"name\") {\n          string name = pt2.data();\n          // map name to label\n          label = name_to_label(name, label_map);\n          if (label < 0) {\n            LOG(FATAL) << \"Anno file \" << annoname << \" -> unknown name: \" << name;\n          }\n        } else if (v2.first == \"bndbox\") {\n          int xmin = pt2.get(\"xmin\", 0);\n          int ymin = pt2.get(\"ymin\", 0);\n          int xmax = pt2.get(\"xmax\", 0);\n          int ymax = pt2.get(\"ymax\", 0);\n          LOG_IF(WARNING, xmin < 0 || xmin > ori_w) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, xmax < 0 || xmax > ori_w) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, ymin < 0 || ymin > ori_h) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, ymax < 0 || ymax > ori_h) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, xmin > xmax) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, ymin > ymax) << annoname <<\n              \" bounding box exceeds image boundary\";\n          box[0] = float(xmin + (xmax - xmin) / 2.) / ori_w;\n          box[1] = float(ymin + (ymax - ymin) / 2.) / ori_h;\n          box[2] = float(xmax - xmin) / ori_w;\n          box[3] = float(ymax - ymin) / ori_h;\n        } else if (v2.first == \"difficult\") {\n          difficult = atoi(pt2.data().c_str());\n        }\n      }\n      CHECK_GE(label, 0) << \"label must start at 0\";\n      datum->add_float_data(float(label));\n      datum->add_float_data(float(difficult));\n      for (int i = 0; i < 4; ++i) {\n        datum->add_float_data(box[i]);\n      }\n    }\n  }\n}\n```\n### 1.2 DataLayer\nyolo网络训练、测试时所用的DataLayer是BoxDataLayer，该数据输入层是由caffe-yolo原作者编写。这里做一下简单的代码分析：\n\n``` c++\n#ifdef USE_OPENCV\n#include <opencv2/core/core.hpp>\n#endif  // USE_OPENCV\n#include <stdint.h>\n\n#include <vector>\n\n#include \"caffe/data_transformer.hpp\"\n#include \"caffe/layers/box_data_layer.hpp\"\n#include \"caffe/util/benchmark.hpp\"\n\nnamespace caffe {\n//构造函数，初始化Layer参数，reader_参数; BasePrefetchingDataLayer带预取功能的数据读取层\ntemplate <typename Dtype>\nBoxDataLayer<Dtype>::BoxDataLayer(const LayerParameter& param)\n  : BasePrefetchingDataLayer<Dtype>(param),\n    reader_(param) {\n}\n//解析函数\ntemplate <typename Dtype>\nBoxDataLayer<Dtype>::~BoxDataLayer() {\n  this->StopInternalThread();\n}\n//BoxDataLayer层设置\ntemplate <typename Dtype>\nvoid BoxDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,\n      const vector<Blob<Dtype>*>& top) {\n  this->box_label_ = true;\n  const DataParameter param = this->layer_param_.data_param();\n  const int batch_size = param.batch_size();\n  // 读取数据，并使用它来初始化blob的top。\n  Datum& datum = *(reader_.full().peek());\n\n  // 使用data_transformer从datum得到预期的blob形状。\n  vector<int> top_shape = this->data_transformer_->InferBlobShape(datum);\n  this->transformed_data_.Reshape(top_shape);\n  // Reshape top[0] and prefetch_data according to the batch_size.\n  top_shape[0] = batch_size;\n  top[0]->Reshape(top_shape);\n  //PREFETCH_COUNT-预取的数据批量数目\n  for (int i = 0; i < this->PREFETCH_COUNT; ++i) {\n    this->prefetch_[i].data_.Reshape(top_shape);\n  }\n  LOG(INFO) << \"output data size: \" << top[0]->num() << \",\"\n      << top[0]->channels() << \",\" << top[0]->height() << \",\"\n      << top[0]->width();\n  // label\n  if (this->output_labels_) {\n    if (param.side_size() > 0) {\n      for (int i = 0; i < param.side_size(); ++i) {\n        sides_.push_back(param.side(i));\n      }\n    }\n    if (sides_.size() == 0) {\n      sides_.push_back(7);\n    }\n    CHECK_EQ(sides_.size(), top.size() - 1) <<\n      \"side num not equal to top size\";\n    for (int i = 0; i < this->PREFETCH_COUNT; ++i) {\n      this->prefetch_[i].multi_label_.clear();\n    }\n    for (int i = 0; i < sides_.size(); ++i) {\n      vector<int> label_shape(1, batch_size);\n      int label_size = sides_[i] * sides_[i] * (1 + 1 + 1 + 4);\n      label_shape.push_back(label_size);\n      top[i+1]->Reshape(label_shape);\n      for (int j = 0; j < this->PREFETCH_COUNT; ++j) {\n        shared_ptr<Blob<Dtype> > tmp_blob;\n        tmp_blob.reset(new Blob<Dtype>(label_shape));\n        this->prefetch_[j].multi_label_.push_back(tmp_blob);\n      }\n    }\n  }\n}\n\n// This function is called on prefetch thread\n// 批量导入数据\ntemplate<typename Dtype>\nvoid BoxDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {\n  CPUTimer batch_timer;\n  batch_timer.Start();\n  double read_time = 0;\n  double trans_time = 0;\n  CPUTimer timer;\n  CHECK(batch->data_.count());\n  CHECK(this->transformed_data_.count());\n\n  // Reshape according to the first datum of each batch\n  // on single input batches allows for inputs of varying dimension.\n  const int batch_size = this->layer_param_.data_param().batch_size();\n  Datum& datum = *(reader_.full().peek());\n  // Use data_transformer to infer the expected blob shape from datum.\n  vector<int> top_shape = this->data_transformer_->InferBlobShape(datum);\n  this->transformed_data_.Reshape(top_shape);\n  // Reshape batch according to the batch_size.\n  top_shape[0] = batch_size;\n  batch->data_.Reshape(top_shape);\n\n  Dtype* top_data = batch->data_.mutable_cpu_data();\n  vector<Dtype*> top_label;\n\n  if (this->output_labels_) {\n    for (int i = 0; i < sides_.size(); ++i) {\n      top_label.push_back(batch->multi_label_[i]->mutable_cpu_data());\n    }\n  }\n  for (int item_id = 0; item_id < batch_size; ++item_id) {\n    timer.Start();\n    // get a datum\n    Datum& datum = *(reader_.full().pop(\"Waiting for data\"));\n    read_time += timer.MicroSeconds();\n    timer.Start();\n    // Apply data transformations (mirror, scale, crop...)\n    int offset = batch->data_.offset(item_id);\n    vector<BoxLabel> box_labels;\n    this->transformed_data_.set_cpu_data(top_data + offset);\n    if (this->output_labels_) {\n      // rand sample a patch, adjust box labels\n      this->data_transformer_->Transform(datum, &(this->transformed_data_), &box_labels);\n      // transform label\n      for (int i = 0; i < sides_.size(); ++i) {\n        int label_offset = batch->multi_label_[i]->offset(item_id);\n        int count  = batch->multi_label_[i]->count(1);\n        transform_label(count, top_label[i] + label_offset, box_labels, sides_[i]);\n      }\n    } else {\n      this->data_transformer_->Transform(datum, &(this->transformed_data_));\n    }\n    trans_time += timer.MicroSeconds();\n\n    reader_.free().push(const_cast<Datum*>(&datum));\n  }\n  timer.Stop();\n  batch_timer.Stop();\n  DLOG(INFO) << \"Prefetch batch: \" << batch_timer.MilliSeconds() << \" ms.\";\n  DLOG(INFO) << \"     Read time: \" << read_time / 1000 << \" ms.\";\n  DLOG(INFO) << \"Transform time: \" << trans_time / 1000 << \" ms.\";\n}\n//生成通过数据转化器生成的数据对应的label\ntemplate<typename Dtype>\nvoid BoxDataLayer<Dtype>::transform_label(int count, Dtype* top_label,\n    const vector<BoxLabel>& box_labels, int side) {\n  int locations = pow(side, 2);\n  CHECK_EQ(count, locations * 7) <<\n    \"side and count not match\";\n  // difficult\n  caffe_set(locations, Dtype(0), top_label);\n  // isobj\n  caffe_set(locations, Dtype(0), top_label + locations);\n  // class label\n  caffe_set(locations, Dtype(-1), top_label + locations * 2);\n  // box\n  caffe_set(locations*4, Dtype(0), top_label + locations * 3);\n  for (int i = 0; i < box_labels.size(); ++i) {\n    float difficult = box_labels[i].difficult_;\n    if (difficult != 0. && difficult != 1.) {\n      LOG(WARNING) << \"Difficult must be 0 or 1\";\n    }\n    float class_label = box_labels[i].class_label_;\n    CHECK_GE(class_label, 0) << \"class_label must >= 0\";\n    float x = box_labels[i].box_[0];\n    float y = box_labels[i].box_[1];\n    // LOG(INFO) << \"x: \" << x << \" y: \" << y;\n    int x_index = floor(x * side);\n    int y_index = floor(y * side);\n    x_index = std::min(x_index, side - 1);\n    y_index = std::min(y_index, side - 1);\n    int dif_index = side * y_index + x_index;\n    int obj_index = locations + dif_index;\n    int class_index = locations * 2 + dif_index;\n    int cor_index = locations * 3 + dif_index * 4;\n    top_label[dif_index] = difficult;\n    top_label[obj_index] = 1;\n    // LOG(INFO) << \"dif_index: \" << dif_index << \" class_label: \" << class_label;\n    top_label[class_index] = class_label;\n    for (int j = 0; j < 4; ++j) {\n      top_label[cor_index + j] = box_labels[i].box_[j];\n    }\n  }\n}\n//实例化BoxDataLayer、BoxData\nINSTANTIATE_CLASS(BoxDataLayer);\nREGISTER_LAYER_CLASS(BoxData);\n\n}  // namespace caffe\n```\n### 1.3 Input与预处理\n&nbsp;&nbsp;&nbsp;&nbsp;在进行图像预处理时，可以使用去均值操作，其目的是使得像素值更接近（0,0,0）原点，从而加快收敛速度。如果在数据层加入去均值操作，预测时也需要进行去均值操作。如无，则无需！其方法如下：\n``` \n//(104,117,123)为imagenet均值，可自行根据数据集生成均值。\nmean_value: 104\nmean_value: 117\nmean_value: 123\n```\n&nbsp;&nbsp;&nbsp;&nbsp;同时，图像预处理的目的之一是保证输入数据与网络输入层所要求的shape保持一致。通过opencv.imread(img_path)函数读取的图片为（heights, weights, channels）。而deploy.prototxt中的input层为（channels, heights, weights）。因此，在进行预测时需要对输入图片进行预处理。\n``` python\nim = cv2.imread(im_path)\nim = cv2.resize(im, (160, 160))\nim = np.require(im.transpose((2, 0, 1)), dtype=np.float32)\n#在训练时没有进行去均值，因此在预测时也没有进行去均值。\n#im -= mean\n```\n而转化为graph文件后，其网络输入层为（heights, weights, channels），附件为转为graph文件后的网络结构图：\n[点击查看或下载](output.gv.svg)\n因此，无需对输入图片进行预处理：\n``` bash\nim = cv2.imread(input_image_path)\nim = cv2.resize(im, (160, 160))\n```\n\n## 二、caffe简介\n### 2.1 Project结构\n&nbsp;&nbsp;&nbsp;&nbsp;在caffe架构下搭建网络是通过prototxt文件描述的，以此建立统一的参数管理机制。在prototxt文件中，不仅包含基本的网络结构，还包含Loss层（Train时需要）、输入数据的路径和结构（Train与Test时需要）、输入数据size/ shape（如160*160*3,Deploy时需要）。因此，不同于keras，caffe的网络结构文件需要多个。\n&nbsp;&nbsp;&nbsp;&nbsp;首先，solver.prototxt（即求解器）的主要功能是设置超参数，确定优化方式；其次， train.prototxt与test.prototxt的主要功能是搭建网络结构，设置结构参数用于训练与测试，确定loss层；最后，deploy.prototxt的主要功能是搭建最基础的网络结构用于预测。\n![效果图](caffe-yolo-summary/1.png)\n### 2.2 网络结构\ndeploy.prototxt内容如下：\n``` bash\nname: \"tiny-yolo\"\ninput: \"data\"\ninput_shape {\n  dim: 1\n  dim: 3\n  dim: 160\n  dim: 160\n}\nlayer {\n  name: \"conv1\"\n  type: \"Convolution\"\n  bottom: \"data\"\n  top: \"conv1\"\n  convolution_param {\n    num_output: 16\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn1\"\n  type: \"BatchNorm\"\n  bottom: \"conv1\"\n  top: \"bn1\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale1\"\n  type: \"Scale\"\n  bottom: \"bn1\"\n  top: \"scale1\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu1\"\n  type: \"ReLU\"\n  bottom: \"scale1\"\n  top: \"scale1\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool1\"\n  type: \"Pooling\"\n  bottom: \"scale1\"\n  top: \"pool1\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv2\"\n  type: \"Convolution\"\n  bottom: \"pool1\"\n  top: \"conv2\"\n  convolution_param {\n    num_output: 32\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn2\"\n  type: \"BatchNorm\"\n  bottom: \"conv2\"\n  top: \"bn2\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale2\"\n  type: \"Scale\"\n  bottom: \"bn2\"\n  top: \"scale2\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu2\"\n  type: \"ReLU\"\n  bottom: \"scale2\"\n  top: \"scale2\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool2\"\n  type: \"Pooling\"\n  bottom: \"scale2\"\n  top: \"pool2\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv3\"\n  type: \"Convolution\"\n  bottom: \"pool2\"\n  top: \"conv3\"\n  convolution_param {\n    num_output: 64\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn3\"\n  type: \"BatchNorm\"\n  bottom: \"conv3\"\n  top: \"bn3\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale3\"\n  type: \"Scale\"\n  bottom: \"bn3\"\n  top: \"scale3\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu3\"\n  type: \"ReLU\"\n  bottom: \"scale3\"\n  top: \"scale3\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool3\"\n  type: \"Pooling\"\n  bottom: \"scale3\"\n  top: \"pool3\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\n\nlayer {\n  name: \"conv4\"\n  type: \"Convolution\"\n  bottom: \"pool3\"\n  top: \"conv4\"\n  convolution_param {\n    num_output: 128\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn4\"\n  type: \"BatchNorm\"\n  bottom: \"conv4\"\n  top: \"bn4\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale4\"\n  type: \"Scale\"\n  bottom: \"bn4\"\n  top: \"scale4\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu4\"\n  type: \"ReLU\"\n  bottom: \"scale4\"\n  top: \"scale4\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool4\"\n  type: \"Pooling\"\n  bottom: \"scale4\"\n  top: \"pool4\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv5\"\n  type: \"Convolution\"\n  bottom: \"pool4\"\n  top: \"conv5\"\n  convolution_param {\n    num_output: 256\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn5\"\n  type: \"BatchNorm\"\n  bottom: \"conv5\"\n  top: \"bn5\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale5\"\n  type: \"Scale\"\n  bottom: \"bn5\"\n  top: \"scale5\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu5\"\n  type: \"ReLU\"\n  bottom: \"scale5\"\n  top: \"scale5\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool5\"\n  type: \"Pooling\"\n  bottom: \"scale5\"\n  top: \"pool5\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv6\"\n  type: \"Convolution\"\n  bottom: \"pool5\"\n  top: \"conv6\"\n  convolution_param {\n    num_output: 512\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn6\"\n  type: \"BatchNorm\"\n  bottom: \"conv6\"\n  top: \"bn6\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale6\"\n  type: \"Scale\"\n  bottom: \"bn6\"\n  top: \"scale6\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu6\"\n  type: \"ReLU\"\n  bottom: \"scale6\"\n  top: \"scale6\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool6\"\n  type: \"Pooling\"\n  bottom: \"scale6\"\n  top: \"pool6\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv7\"\n  type: \"Convolution\"\n  bottom: \"pool6\"\n  top: \"conv7\"\n  convolution_param {\n    num_output: 1024\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn7\"\n  type: \"BatchNorm\"\n  bottom: \"conv7\"\n  top: \"bn7\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale7\"\n  type: \"Scale\"\n  bottom: \"bn7\"\n  top: \"scale7\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu7\"\n  type: \"ReLU\"\n  bottom: \"scale7\"\n  top: \"scale7\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"conv8\"\n  type: \"Convolution\"\n  bottom: \"scale7\"\n  top: \"conv8\"\n  convolution_param {\n    num_output: 256\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn8\"\n  type: \"BatchNorm\"\n  bottom: \"conv8\"\n  top: \"bn8\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale8\"\n  type: \"Scale\"\n  bottom: \"bn8\"\n  top: \"scale8\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu8\"\n  type: \"ReLU\"\n  bottom: \"scale8\"\n  top: \"scale8\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"fc9\"\n  type: \"InnerProduct\"\n  bottom: \"scale8\"\n  top: \"fc9\"\n  inner_product_param {\n    num_output: 300\n  }\n}\n```\n\n## 三、Tiny YOLO\n**&nbsp;&nbsp;&nbsp;&nbsp;Tiny-YOLO是YOLO算法的简单实现。相比于YOLO算法，它的网络结构更浅，仅有9层。除此外，其理论基础与YOLO并无二致。**\n### 3.1 Yolo Innovation\n&nbsp;&nbsp;&nbsp;&nbsp;YOLO算法首创的实现了端到端的目标检测算法，是速度惊人、准确度较好的one-stage算法。YOLO算法将整张图片划分为SXS的grid，采用一次性预测所有格子所含目标的bounding-box、confidence以及P(object)和P(class|object)。\n&nbsp;&nbsp;&nbsp;&nbsp;网络的输出结果为一个向量，size为：S * S * (B * 5 +C)。其中，S为划分网格数，B为每个网格负责目标个数，C为类别个数。其含义为：每个网格会对应B个边界框，边界框的宽高范围为全图，而中心点落于该网格；每个边界框对应一个置信度值，代表该处是否有物体及定位准确度（即Confidence = P(object) * IOU(predict-box, ground-truth)。）；每个网格对应C个概率，分别代表每个class出现的概率。\n&nbsp;&nbsp;&nbsp;&nbsp;而YOLO是如何实现对输入图像的分格呢？\n&nbsp;&nbsp;&nbsp;&nbsp;原作者巧妙地在最后预测层设置了S * S * (B * 5 +C)个神经元（该层为全连接层，在yolo2中该层为1*1的卷积层），通过训练将对应不同网格的ground-truth收敛到对应的网格的输出中。\n### 3.2 Loss\n&nbsp;&nbsp;&nbsp;&nbsp;损失函数的设计目标就是让坐标（x,y,w,h），confidence，classification 这个三个方面达到很好的平衡。简单的全部采用了sum-squared error loss来做这件事会有以下不足： \n首先，(num_side*4)维的localization error和(num_classes)维的classification error每一个维度产生的代价同等重要，这显然是不合理的。 \n其次，如果一些栅格中没有object（一幅图中这种栅格很多），那么就会将这些栅格中的bounding box的confidence置为0，相比于较少的有object的栅格，这些不包含物体的栅格对梯度更新的贡献会远大于包含物体的栅格对梯度更新的贡献，这会导致网络不稳定甚至发散。\n&nbsp;&nbsp;&nbsp;&nbsp;因此，YOLO采取了更有效的Loss函数。将loss函数分为3部分：第一，坐标预测是否准确(图片中书写有误，xy值与groundtruth应相减不因相加)；第二，有无object预测是否准确；第三，类别预测。\n![效果图](caffe-yolo-summary/2.png)\n![效果图](caffe-yolo-summary/3.png)\n&nbsp;&nbsp;&nbsp;&nbsp;更重视8维的坐标预测，给这些损失前面赋予更大的loss weight, 记为 λcoord ,在pascal VOC训练中取5。对没有object的bbox的confidence loss，赋予小的loss weight，记为 λnoobj ，在pascal VOC训练中取0.5。有object的bbox的confidence loss 和类别的loss 的loss weight正常取1。\n&nbsp;&nbsp;&nbsp;&nbsp;对不同大小的bbox预测中，相比于大bbox预测偏一点，小box预测偏相同的尺寸对IOU的影响更大。而sum-square error loss中对同样的偏移loss是一样。为了缓和这个问题，作者用了一个巧妙的办法，就是将box的width和height取平方根代替原本的height和width。 如下：small bbox的横轴值较小，发生偏移时，反应到y轴上的loss（下图绿色）比big box(下图红色)要大。\n![效果图](caffe-yolo-summary/4.png)\n## 四、Train && Test\n### 4.1 Optimization\n本项目测试过SGD、momentum 、Adam。最终，Adam效果最佳。\n### 4.2 solver.prototxt(Adam)\n``` bash\nnet: \"x_train.prototxt\"\ntest_iter: 3000\ntest_interval: 32000\ntest_initialization: false\ndisplay: 20\naverage_loss: 100\nlr_policy: \"multifixed\"\nstagelr: 0.001\nstagelr: 0.0001\nstagelr: 0.00001\nstagelr: 0.000001\nstageiter: 520\nstageiter: 16000\nstageiter: 24000\nstageiter: 32000\nmax_iter: 32000\nmomentum: 0.9\nweight_decay: 0.0005\nsnapshot: 2000\nsnapshot_prefix: \"./models/x_yolo\"\nsolver_mode: GPU\n```\n### 4.3 train.prototxt\n[点击下载](train.prototxt)\n\n## 五、Predict\n``` bash\n#!/usr/bin/env python\nimport numpy as np\nimport cv2\nimport os\n\nimport sys\nsys.path.insert(0, '/home/mc/Desktop/caffe/caffe/python/')\n\nimport caffe\n\n\n###########################\n#global variable set start#\n###########################\n\nnum_classes = 2\nnum_anchors = 2\nside = 5\n\nnet_proto = \"./x_deploy.prototxt\"\nmodel_path = \"./models/x_yolo_iter_32000.caffemodel\"\nim_path = '/home/mc/Desktop/caffe-yolo/data/yolo/VOCdevkit/VOC2018/JPEGImages/826.jpg'\n\n###########################\n#global variable set end..#\n###########################\n\n\n\n\n#environment sets\ncaffe.set_device(0)\ncaffe.set_mode_gpu()\n\n#nms filter\ndef nms(boxes, thresh):\n    x1 = boxes[:, 0] - boxes[:, 2] / 2.\n    y1 = boxes[:, 1] - boxes[:, 3] / 2.\n    x2 = boxes[:, 0] + boxes[:, 2] / 2.\n    y2 = boxes[:, 1] + boxes[:, 3] / 2.\n    scores = boxes[:, 4]\n    areas = (x2 - x1 + 1) * (y2 - y1 + 1)\n    order = scores.argsort()[::-1]\n    keep = []\n    while order.size > 0:\n        i = order[0]\n        keep.append(i)\n        ix1 = np.maximum(x1[i], x1[order[1:]])\n        iy1 = np.maximum(y1[i], y1[order[1:]])\n        ix2 = np.minimum(x2[i], x2[order[1:]])\n        iy2 = np.minimum(y2[i], y2[order[1:]])\n        w = np.maximum(0.0, ix2-ix1+1)\n        h = np.maximum(0.0, iy2-iy1+1)\n        inter = w * h\n        ovr = inter / (areas[i] + areas[order[1:]] - inter)\n        inds = np.where(ovr <= thresh)[0]\n        order = order[inds + 1]\n    return boxes[np.require(keep), :]\n\n#parse result\ndef parse_result(out_put):\n    global num_classes\n    global num_anchors\n    global side\n    locations = side ** 2\n    boxes = np.zeros((num_anchors * locations, 6), dtype=np.float32)\n    for i in range(locations):\n        tmp_scores = out_put[i:num_classes*locations:locations]\n        max_class_ind = np.argsort(tmp_scores)[-1]\n        max_prob = np.max(tmp_scores)\n        obj_index = num_classes * locations + i\n        obj_scores = max_prob * out_put[obj_index:(obj_index+num_anchors*locations):locations]\n        coor_index = (num_classes + num_anchors) * locations + i\n        for j in range(num_anchors):\n           boxes[i*num_anchors+j][5] = max_class_ind\n           boxes[i*num_anchors+j][4] = obj_scores[j]\n           box_index = coor_index + j * 4 * locations\n           boxes[i*num_anchors+j][0] = (i % side + out_put[box_index + 0 * locations]) / float(side)\n           boxes[i*num_anchors+j][1] = (i / side + out_put[box_index + 1 * locations]) / float(side)\n           boxes[i*num_anchors+j][2] = out_put[box_index + 2 * locations] ** 2\n           boxes[i*num_anchors+j][3] = out_put[box_index + 3 * locations] ** 2\n    return nms(boxes, 0.5)\n\n#show or write result_picture\ndef show_boxes(im_path, boxes, sthresh=0.5, hthresh=1, show=0):\n    print (boxes.shape)\n    im = cv2.imread(im_path)\n    ori_w = im.shape[1]\n    ori_h = im.shape[0]\n    for box in boxes:\n        if box[4] < sthresh:\n            continue\n        if box[4] > hthresh:\n            continue\n        print (box)\n        box = box[:4]\n        x1 = max(0, int((box[0] - box[2] / 2.) * ori_w))\n        y1 = max(0, int((box[1] - box[3] / 2.) * ori_h))\n        x2 = min(ori_w - 1, int((box[0] + box[2] / 2.) * ori_w))\n        y2 = min(ori_h - 1, int((box[1] + box[3] / 2.) * ori_h))\n        cv2.rectangle(im, (x1, y1), (x2, y2), (0, 255, 255), 2)\n    name = os.path.split(im_path)[1].split('.')[0]\n    if show:\n        cv2.imshow(\"out\", im)\n    else:\n        cv2.imwrite(\"adam-out-n\"+name+'.jpg', im)\n\n# predict\ndef predict(model, im_path):\n    # image pre-processing\n    im = cv2.imread(im_path)\n    im = cv2.resize(im, (160, 160))\n    im = np.require(im.transpose((2, 0, 1)), dtype=np.float32)\n\n    # forward process...\n    model.blobs['data'].data[...] = im\n    out_blobs = model.forward()\n    \n    '''\n    The structure of out_put is:\n    [n*n*class1,n*n*class2,...,n*n*class(i),n*n*score1,n*n*score2,n*n*(x,y,w,h)1,n*n*(x,y,w,h)2]\n    p.s. n is side\n    '''\n    reg_out = out_blobs[\"fc9\"]\n    boxes = parse_result(reg_out[0])\n    show_boxes(im_path, boxes, 0.2)\n\nif __name__==\"__main__\":\n    global net_proto\n    global model_path\n    global im_path\n    # load net with model\n    model = caffe.Net(net_proto, model_path, caffe.TEST)\n\n    predict(model, im_path)\n```","source":"_posts/caffe-yolo-summary.md","raw":"---\ntitle: caffe-yolo summary\ndate: 2019-01-08 11:02:41\ntags: [caffe,cv]\n---\n**本博文记录博主对caffe的初步理解以及yolo在caffe上的运行**\n\n## 一、数据处理篇\n### 1.1 Dataset转化为LMDB\n&nbsp;&nbsp;&nbsp;&nbsp;如先前所做的总结，在这里再次强调一下，首先要将数据转化为LMDB或LEVELDB格式，再输入至caffe的数据输入层。而图片转化为LMDB格式时，其形状或维度含义为[heights, weights, channels] 。其代码（位于caffe/src/caffe/util/io.cpp）如下:\n``` c++\nvoid CVMatToDatum(const cv::Mat& cv_img, Datum* datum) {a  CHECK(cv_img.depth() == CV_8U) << \"Image data type must be unsigned byte\";\n  datum->set_channels(cv_img.channels());\n  datum->set_height(cv_img.rows);\n  datum->set_width(cv_img.cols);\n  datum->clear_data();\n  datum->clear_float_data();\n  datum->set_encoded(false);\n  int datum_channels = datum->channels();\n  int datum_height = datum->height();\n  int datum_width = datum->width();\n  int datum_size = datum_channels * datum_height * datum_width;\n  std::string buffer(datum_size, ' ');\n  for (int h = 0; h < datum_height; ++h) {\n    const uchar* ptr = cv_img.ptr<uchar>(h);\n    int img_index = 0;\n    for (int w = 0; w < datum_width; ++w) {\n      for (int c = 0; c < datum_channels; ++c) {\n        int datum_index = (c * datum_height + h) * datum_width + w;\n        buffer[datum_index] = static_cast<char>(ptr[img_index++]);\n      }\n    }\n  }\n  datum->set_data(buffer);\n}\n```\n\n而label文件对bounding-box的标记也从[Xmin, Ymin, Xmax, Ymax] 转化为[Xmid, Ymid, W, H]，同时，对其进行了归一化操作；并将不同class转为对应的index（按照label_map进行`映射）。其代码（位于caffe/src/caffe/util/io.cpp）如下:\n\n``` c++\nvoid ParseXmlToDatum(const string& annoname, const map<string, int>& label_map,\n    int ori_w, int ori_h, Datum* datum) {\n  ptree pt;\n  read_xml(annoname, pt);\n  int width(0), height(0);\n  try {\n    height = pt.get<int>(\"annotation.size.height\");\n    width = pt.get<int>(\"annotation.size.width\");\n    CHECK_EQ(ori_w, width);\n    CHECK_EQ(ori_h, height);\n  } catch (const ptree_error &e) {\n    LOG(WARNING) << \"When paring \" << annoname << \": \" << e.what();\n  }\n  datum->clear_float_data();\n  BOOST_FOREACH(ptree::value_type &v1, pt.get_child(\"annotation\")) {\n    if (v1.first == \"object\") {\n      ptree object = v1.second;\n      int label(-1);\n      vector<float> box(4, 0);\n      int difficult(0);\n      BOOST_FOREACH(ptree::value_type &v2, object.get_child(\"\")) {\n        ptree pt2 = v2.second;\n        if (v2.first == \"name\") {\n          string name = pt2.data();\n          // map name to label\n          label = name_to_label(name, label_map);\n          if (label < 0) {\n            LOG(FATAL) << \"Anno file \" << annoname << \" -> unknown name: \" << name;\n          }\n        } else if (v2.first == \"bndbox\") {\n          int xmin = pt2.get(\"xmin\", 0);\n          int ymin = pt2.get(\"ymin\", 0);\n          int xmax = pt2.get(\"xmax\", 0);\n          int ymax = pt2.get(\"ymax\", 0);\n          LOG_IF(WARNING, xmin < 0 || xmin > ori_w) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, xmax < 0 || xmax > ori_w) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, ymin < 0 || ymin > ori_h) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, ymax < 0 || ymax > ori_h) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, xmin > xmax) << annoname <<\n              \" bounding box exceeds image boundary\";\n          LOG_IF(WARNING, ymin > ymax) << annoname <<\n              \" bounding box exceeds image boundary\";\n          box[0] = float(xmin + (xmax - xmin) / 2.) / ori_w;\n          box[1] = float(ymin + (ymax - ymin) / 2.) / ori_h;\n          box[2] = float(xmax - xmin) / ori_w;\n          box[3] = float(ymax - ymin) / ori_h;\n        } else if (v2.first == \"difficult\") {\n          difficult = atoi(pt2.data().c_str());\n        }\n      }\n      CHECK_GE(label, 0) << \"label must start at 0\";\n      datum->add_float_data(float(label));\n      datum->add_float_data(float(difficult));\n      for (int i = 0; i < 4; ++i) {\n        datum->add_float_data(box[i]);\n      }\n    }\n  }\n}\n```\n### 1.2 DataLayer\nyolo网络训练、测试时所用的DataLayer是BoxDataLayer，该数据输入层是由caffe-yolo原作者编写。这里做一下简单的代码分析：\n\n``` c++\n#ifdef USE_OPENCV\n#include <opencv2/core/core.hpp>\n#endif  // USE_OPENCV\n#include <stdint.h>\n\n#include <vector>\n\n#include \"caffe/data_transformer.hpp\"\n#include \"caffe/layers/box_data_layer.hpp\"\n#include \"caffe/util/benchmark.hpp\"\n\nnamespace caffe {\n//构造函数，初始化Layer参数，reader_参数; BasePrefetchingDataLayer带预取功能的数据读取层\ntemplate <typename Dtype>\nBoxDataLayer<Dtype>::BoxDataLayer(const LayerParameter& param)\n  : BasePrefetchingDataLayer<Dtype>(param),\n    reader_(param) {\n}\n//解析函数\ntemplate <typename Dtype>\nBoxDataLayer<Dtype>::~BoxDataLayer() {\n  this->StopInternalThread();\n}\n//BoxDataLayer层设置\ntemplate <typename Dtype>\nvoid BoxDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,\n      const vector<Blob<Dtype>*>& top) {\n  this->box_label_ = true;\n  const DataParameter param = this->layer_param_.data_param();\n  const int batch_size = param.batch_size();\n  // 读取数据，并使用它来初始化blob的top。\n  Datum& datum = *(reader_.full().peek());\n\n  // 使用data_transformer从datum得到预期的blob形状。\n  vector<int> top_shape = this->data_transformer_->InferBlobShape(datum);\n  this->transformed_data_.Reshape(top_shape);\n  // Reshape top[0] and prefetch_data according to the batch_size.\n  top_shape[0] = batch_size;\n  top[0]->Reshape(top_shape);\n  //PREFETCH_COUNT-预取的数据批量数目\n  for (int i = 0; i < this->PREFETCH_COUNT; ++i) {\n    this->prefetch_[i].data_.Reshape(top_shape);\n  }\n  LOG(INFO) << \"output data size: \" << top[0]->num() << \",\"\n      << top[0]->channels() << \",\" << top[0]->height() << \",\"\n      << top[0]->width();\n  // label\n  if (this->output_labels_) {\n    if (param.side_size() > 0) {\n      for (int i = 0; i < param.side_size(); ++i) {\n        sides_.push_back(param.side(i));\n      }\n    }\n    if (sides_.size() == 0) {\n      sides_.push_back(7);\n    }\n    CHECK_EQ(sides_.size(), top.size() - 1) <<\n      \"side num not equal to top size\";\n    for (int i = 0; i < this->PREFETCH_COUNT; ++i) {\n      this->prefetch_[i].multi_label_.clear();\n    }\n    for (int i = 0; i < sides_.size(); ++i) {\n      vector<int> label_shape(1, batch_size);\n      int label_size = sides_[i] * sides_[i] * (1 + 1 + 1 + 4);\n      label_shape.push_back(label_size);\n      top[i+1]->Reshape(label_shape);\n      for (int j = 0; j < this->PREFETCH_COUNT; ++j) {\n        shared_ptr<Blob<Dtype> > tmp_blob;\n        tmp_blob.reset(new Blob<Dtype>(label_shape));\n        this->prefetch_[j].multi_label_.push_back(tmp_blob);\n      }\n    }\n  }\n}\n\n// This function is called on prefetch thread\n// 批量导入数据\ntemplate<typename Dtype>\nvoid BoxDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {\n  CPUTimer batch_timer;\n  batch_timer.Start();\n  double read_time = 0;\n  double trans_time = 0;\n  CPUTimer timer;\n  CHECK(batch->data_.count());\n  CHECK(this->transformed_data_.count());\n\n  // Reshape according to the first datum of each batch\n  // on single input batches allows for inputs of varying dimension.\n  const int batch_size = this->layer_param_.data_param().batch_size();\n  Datum& datum = *(reader_.full().peek());\n  // Use data_transformer to infer the expected blob shape from datum.\n  vector<int> top_shape = this->data_transformer_->InferBlobShape(datum);\n  this->transformed_data_.Reshape(top_shape);\n  // Reshape batch according to the batch_size.\n  top_shape[0] = batch_size;\n  batch->data_.Reshape(top_shape);\n\n  Dtype* top_data = batch->data_.mutable_cpu_data();\n  vector<Dtype*> top_label;\n\n  if (this->output_labels_) {\n    for (int i = 0; i < sides_.size(); ++i) {\n      top_label.push_back(batch->multi_label_[i]->mutable_cpu_data());\n    }\n  }\n  for (int item_id = 0; item_id < batch_size; ++item_id) {\n    timer.Start();\n    // get a datum\n    Datum& datum = *(reader_.full().pop(\"Waiting for data\"));\n    read_time += timer.MicroSeconds();\n    timer.Start();\n    // Apply data transformations (mirror, scale, crop...)\n    int offset = batch->data_.offset(item_id);\n    vector<BoxLabel> box_labels;\n    this->transformed_data_.set_cpu_data(top_data + offset);\n    if (this->output_labels_) {\n      // rand sample a patch, adjust box labels\n      this->data_transformer_->Transform(datum, &(this->transformed_data_), &box_labels);\n      // transform label\n      for (int i = 0; i < sides_.size(); ++i) {\n        int label_offset = batch->multi_label_[i]->offset(item_id);\n        int count  = batch->multi_label_[i]->count(1);\n        transform_label(count, top_label[i] + label_offset, box_labels, sides_[i]);\n      }\n    } else {\n      this->data_transformer_->Transform(datum, &(this->transformed_data_));\n    }\n    trans_time += timer.MicroSeconds();\n\n    reader_.free().push(const_cast<Datum*>(&datum));\n  }\n  timer.Stop();\n  batch_timer.Stop();\n  DLOG(INFO) << \"Prefetch batch: \" << batch_timer.MilliSeconds() << \" ms.\";\n  DLOG(INFO) << \"     Read time: \" << read_time / 1000 << \" ms.\";\n  DLOG(INFO) << \"Transform time: \" << trans_time / 1000 << \" ms.\";\n}\n//生成通过数据转化器生成的数据对应的label\ntemplate<typename Dtype>\nvoid BoxDataLayer<Dtype>::transform_label(int count, Dtype* top_label,\n    const vector<BoxLabel>& box_labels, int side) {\n  int locations = pow(side, 2);\n  CHECK_EQ(count, locations * 7) <<\n    \"side and count not match\";\n  // difficult\n  caffe_set(locations, Dtype(0), top_label);\n  // isobj\n  caffe_set(locations, Dtype(0), top_label + locations);\n  // class label\n  caffe_set(locations, Dtype(-1), top_label + locations * 2);\n  // box\n  caffe_set(locations*4, Dtype(0), top_label + locations * 3);\n  for (int i = 0; i < box_labels.size(); ++i) {\n    float difficult = box_labels[i].difficult_;\n    if (difficult != 0. && difficult != 1.) {\n      LOG(WARNING) << \"Difficult must be 0 or 1\";\n    }\n    float class_label = box_labels[i].class_label_;\n    CHECK_GE(class_label, 0) << \"class_label must >= 0\";\n    float x = box_labels[i].box_[0];\n    float y = box_labels[i].box_[1];\n    // LOG(INFO) << \"x: \" << x << \" y: \" << y;\n    int x_index = floor(x * side);\n    int y_index = floor(y * side);\n    x_index = std::min(x_index, side - 1);\n    y_index = std::min(y_index, side - 1);\n    int dif_index = side * y_index + x_index;\n    int obj_index = locations + dif_index;\n    int class_index = locations * 2 + dif_index;\n    int cor_index = locations * 3 + dif_index * 4;\n    top_label[dif_index] = difficult;\n    top_label[obj_index] = 1;\n    // LOG(INFO) << \"dif_index: \" << dif_index << \" class_label: \" << class_label;\n    top_label[class_index] = class_label;\n    for (int j = 0; j < 4; ++j) {\n      top_label[cor_index + j] = box_labels[i].box_[j];\n    }\n  }\n}\n//实例化BoxDataLayer、BoxData\nINSTANTIATE_CLASS(BoxDataLayer);\nREGISTER_LAYER_CLASS(BoxData);\n\n}  // namespace caffe\n```\n### 1.3 Input与预处理\n&nbsp;&nbsp;&nbsp;&nbsp;在进行图像预处理时，可以使用去均值操作，其目的是使得像素值更接近（0,0,0）原点，从而加快收敛速度。如果在数据层加入去均值操作，预测时也需要进行去均值操作。如无，则无需！其方法如下：\n``` \n//(104,117,123)为imagenet均值，可自行根据数据集生成均值。\nmean_value: 104\nmean_value: 117\nmean_value: 123\n```\n&nbsp;&nbsp;&nbsp;&nbsp;同时，图像预处理的目的之一是保证输入数据与网络输入层所要求的shape保持一致。通过opencv.imread(img_path)函数读取的图片为（heights, weights, channels）。而deploy.prototxt中的input层为（channels, heights, weights）。因此，在进行预测时需要对输入图片进行预处理。\n``` python\nim = cv2.imread(im_path)\nim = cv2.resize(im, (160, 160))\nim = np.require(im.transpose((2, 0, 1)), dtype=np.float32)\n#在训练时没有进行去均值，因此在预测时也没有进行去均值。\n#im -= mean\n```\n而转化为graph文件后，其网络输入层为（heights, weights, channels），附件为转为graph文件后的网络结构图：\n[点击查看或下载](output.gv.svg)\n因此，无需对输入图片进行预处理：\n``` bash\nim = cv2.imread(input_image_path)\nim = cv2.resize(im, (160, 160))\n```\n\n## 二、caffe简介\n### 2.1 Project结构\n&nbsp;&nbsp;&nbsp;&nbsp;在caffe架构下搭建网络是通过prototxt文件描述的，以此建立统一的参数管理机制。在prototxt文件中，不仅包含基本的网络结构，还包含Loss层（Train时需要）、输入数据的路径和结构（Train与Test时需要）、输入数据size/ shape（如160*160*3,Deploy时需要）。因此，不同于keras，caffe的网络结构文件需要多个。\n&nbsp;&nbsp;&nbsp;&nbsp;首先，solver.prototxt（即求解器）的主要功能是设置超参数，确定优化方式；其次， train.prototxt与test.prototxt的主要功能是搭建网络结构，设置结构参数用于训练与测试，确定loss层；最后，deploy.prototxt的主要功能是搭建最基础的网络结构用于预测。\n![效果图](caffe-yolo-summary/1.png)\n### 2.2 网络结构\ndeploy.prototxt内容如下：\n``` bash\nname: \"tiny-yolo\"\ninput: \"data\"\ninput_shape {\n  dim: 1\n  dim: 3\n  dim: 160\n  dim: 160\n}\nlayer {\n  name: \"conv1\"\n  type: \"Convolution\"\n  bottom: \"data\"\n  top: \"conv1\"\n  convolution_param {\n    num_output: 16\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn1\"\n  type: \"BatchNorm\"\n  bottom: \"conv1\"\n  top: \"bn1\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale1\"\n  type: \"Scale\"\n  bottom: \"bn1\"\n  top: \"scale1\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu1\"\n  type: \"ReLU\"\n  bottom: \"scale1\"\n  top: \"scale1\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool1\"\n  type: \"Pooling\"\n  bottom: \"scale1\"\n  top: \"pool1\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv2\"\n  type: \"Convolution\"\n  bottom: \"pool1\"\n  top: \"conv2\"\n  convolution_param {\n    num_output: 32\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn2\"\n  type: \"BatchNorm\"\n  bottom: \"conv2\"\n  top: \"bn2\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale2\"\n  type: \"Scale\"\n  bottom: \"bn2\"\n  top: \"scale2\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu2\"\n  type: \"ReLU\"\n  bottom: \"scale2\"\n  top: \"scale2\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool2\"\n  type: \"Pooling\"\n  bottom: \"scale2\"\n  top: \"pool2\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv3\"\n  type: \"Convolution\"\n  bottom: \"pool2\"\n  top: \"conv3\"\n  convolution_param {\n    num_output: 64\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn3\"\n  type: \"BatchNorm\"\n  bottom: \"conv3\"\n  top: \"bn3\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale3\"\n  type: \"Scale\"\n  bottom: \"bn3\"\n  top: \"scale3\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu3\"\n  type: \"ReLU\"\n  bottom: \"scale3\"\n  top: \"scale3\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool3\"\n  type: \"Pooling\"\n  bottom: \"scale3\"\n  top: \"pool3\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\n\nlayer {\n  name: \"conv4\"\n  type: \"Convolution\"\n  bottom: \"pool3\"\n  top: \"conv4\"\n  convolution_param {\n    num_output: 128\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn4\"\n  type: \"BatchNorm\"\n  bottom: \"conv4\"\n  top: \"bn4\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale4\"\n  type: \"Scale\"\n  bottom: \"bn4\"\n  top: \"scale4\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu4\"\n  type: \"ReLU\"\n  bottom: \"scale4\"\n  top: \"scale4\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool4\"\n  type: \"Pooling\"\n  bottom: \"scale4\"\n  top: \"pool4\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv5\"\n  type: \"Convolution\"\n  bottom: \"pool4\"\n  top: \"conv5\"\n  convolution_param {\n    num_output: 256\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn5\"\n  type: \"BatchNorm\"\n  bottom: \"conv5\"\n  top: \"bn5\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale5\"\n  type: \"Scale\"\n  bottom: \"bn5\"\n  top: \"scale5\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu5\"\n  type: \"ReLU\"\n  bottom: \"scale5\"\n  top: \"scale5\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool5\"\n  type: \"Pooling\"\n  bottom: \"scale5\"\n  top: \"pool5\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv6\"\n  type: \"Convolution\"\n  bottom: \"pool5\"\n  top: \"conv6\"\n  convolution_param {\n    num_output: 512\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn6\"\n  type: \"BatchNorm\"\n  bottom: \"conv6\"\n  top: \"bn6\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale6\"\n  type: \"Scale\"\n  bottom: \"bn6\"\n  top: \"scale6\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu6\"\n  type: \"ReLU\"\n  bottom: \"scale6\"\n  top: \"scale6\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"pool6\"\n  type: \"Pooling\"\n  bottom: \"scale6\"\n  top: \"pool6\"\n  pooling_param {\n    pool: MAX\n    kernel_size: 2\n    stride: 2\n  }\n}\nlayer {\n  name: \"conv7\"\n  type: \"Convolution\"\n  bottom: \"pool6\"\n  top: \"conv7\"\n  convolution_param {\n    num_output: 1024\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn7\"\n  type: \"BatchNorm\"\n  bottom: \"conv7\"\n  top: \"bn7\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale7\"\n  type: \"Scale\"\n  bottom: \"bn7\"\n  top: \"scale7\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu7\"\n  type: \"ReLU\"\n  bottom: \"scale7\"\n  top: \"scale7\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"conv8\"\n  type: \"Convolution\"\n  bottom: \"scale7\"\n  top: \"conv8\"\n  convolution_param {\n    num_output: 256\n    kernel_size: 3\n    pad: 1\n    bias_term: false\n  }\n}\nlayer {\n  name: \"bn8\"\n  type: \"BatchNorm\"\n  bottom: \"conv8\"\n  top: \"bn8\"\n  batch_norm_param {\n    use_global_stats: true\n  }\n}\nlayer {\n  name: \"scale8\"\n  type: \"Scale\"\n  bottom: \"bn8\"\n  top: \"scale8\"\n  scale_param {\n    bias_term: true\n  }\n}\nlayer {\n  name: \"relu8\"\n  type: \"ReLU\"\n  bottom: \"scale8\"\n  top: \"scale8\"\n  relu_param {\n    negative_slope: 0.1\n  }\n}\nlayer {\n  name: \"fc9\"\n  type: \"InnerProduct\"\n  bottom: \"scale8\"\n  top: \"fc9\"\n  inner_product_param {\n    num_output: 300\n  }\n}\n```\n\n## 三、Tiny YOLO\n**&nbsp;&nbsp;&nbsp;&nbsp;Tiny-YOLO是YOLO算法的简单实现。相比于YOLO算法，它的网络结构更浅，仅有9层。除此外，其理论基础与YOLO并无二致。**\n### 3.1 Yolo Innovation\n&nbsp;&nbsp;&nbsp;&nbsp;YOLO算法首创的实现了端到端的目标检测算法，是速度惊人、准确度较好的one-stage算法。YOLO算法将整张图片划分为SXS的grid，采用一次性预测所有格子所含目标的bounding-box、confidence以及P(object)和P(class|object)。\n&nbsp;&nbsp;&nbsp;&nbsp;网络的输出结果为一个向量，size为：S * S * (B * 5 +C)。其中，S为划分网格数，B为每个网格负责目标个数，C为类别个数。其含义为：每个网格会对应B个边界框，边界框的宽高范围为全图，而中心点落于该网格；每个边界框对应一个置信度值，代表该处是否有物体及定位准确度（即Confidence = P(object) * IOU(predict-box, ground-truth)。）；每个网格对应C个概率，分别代表每个class出现的概率。\n&nbsp;&nbsp;&nbsp;&nbsp;而YOLO是如何实现对输入图像的分格呢？\n&nbsp;&nbsp;&nbsp;&nbsp;原作者巧妙地在最后预测层设置了S * S * (B * 5 +C)个神经元（该层为全连接层，在yolo2中该层为1*1的卷积层），通过训练将对应不同网格的ground-truth收敛到对应的网格的输出中。\n### 3.2 Loss\n&nbsp;&nbsp;&nbsp;&nbsp;损失函数的设计目标就是让坐标（x,y,w,h），confidence，classification 这个三个方面达到很好的平衡。简单的全部采用了sum-squared error loss来做这件事会有以下不足： \n首先，(num_side*4)维的localization error和(num_classes)维的classification error每一个维度产生的代价同等重要，这显然是不合理的。 \n其次，如果一些栅格中没有object（一幅图中这种栅格很多），那么就会将这些栅格中的bounding box的confidence置为0，相比于较少的有object的栅格，这些不包含物体的栅格对梯度更新的贡献会远大于包含物体的栅格对梯度更新的贡献，这会导致网络不稳定甚至发散。\n&nbsp;&nbsp;&nbsp;&nbsp;因此，YOLO采取了更有效的Loss函数。将loss函数分为3部分：第一，坐标预测是否准确(图片中书写有误，xy值与groundtruth应相减不因相加)；第二，有无object预测是否准确；第三，类别预测。\n![效果图](caffe-yolo-summary/2.png)\n![效果图](caffe-yolo-summary/3.png)\n&nbsp;&nbsp;&nbsp;&nbsp;更重视8维的坐标预测，给这些损失前面赋予更大的loss weight, 记为 λcoord ,在pascal VOC训练中取5。对没有object的bbox的confidence loss，赋予小的loss weight，记为 λnoobj ，在pascal VOC训练中取0.5。有object的bbox的confidence loss 和类别的loss 的loss weight正常取1。\n&nbsp;&nbsp;&nbsp;&nbsp;对不同大小的bbox预测中，相比于大bbox预测偏一点，小box预测偏相同的尺寸对IOU的影响更大。而sum-square error loss中对同样的偏移loss是一样。为了缓和这个问题，作者用了一个巧妙的办法，就是将box的width和height取平方根代替原本的height和width。 如下：small bbox的横轴值较小，发生偏移时，反应到y轴上的loss（下图绿色）比big box(下图红色)要大。\n![效果图](caffe-yolo-summary/4.png)\n## 四、Train && Test\n### 4.1 Optimization\n本项目测试过SGD、momentum 、Adam。最终，Adam效果最佳。\n### 4.2 solver.prototxt(Adam)\n``` bash\nnet: \"x_train.prototxt\"\ntest_iter: 3000\ntest_interval: 32000\ntest_initialization: false\ndisplay: 20\naverage_loss: 100\nlr_policy: \"multifixed\"\nstagelr: 0.001\nstagelr: 0.0001\nstagelr: 0.00001\nstagelr: 0.000001\nstageiter: 520\nstageiter: 16000\nstageiter: 24000\nstageiter: 32000\nmax_iter: 32000\nmomentum: 0.9\nweight_decay: 0.0005\nsnapshot: 2000\nsnapshot_prefix: \"./models/x_yolo\"\nsolver_mode: GPU\n```\n### 4.3 train.prototxt\n[点击下载](train.prototxt)\n\n## 五、Predict\n``` bash\n#!/usr/bin/env python\nimport numpy as np\nimport cv2\nimport os\n\nimport sys\nsys.path.insert(0, '/home/mc/Desktop/caffe/caffe/python/')\n\nimport caffe\n\n\n###########################\n#global variable set start#\n###########################\n\nnum_classes = 2\nnum_anchors = 2\nside = 5\n\nnet_proto = \"./x_deploy.prototxt\"\nmodel_path = \"./models/x_yolo_iter_32000.caffemodel\"\nim_path = '/home/mc/Desktop/caffe-yolo/data/yolo/VOCdevkit/VOC2018/JPEGImages/826.jpg'\n\n###########################\n#global variable set end..#\n###########################\n\n\n\n\n#environment sets\ncaffe.set_device(0)\ncaffe.set_mode_gpu()\n\n#nms filter\ndef nms(boxes, thresh):\n    x1 = boxes[:, 0] - boxes[:, 2] / 2.\n    y1 = boxes[:, 1] - boxes[:, 3] / 2.\n    x2 = boxes[:, 0] + boxes[:, 2] / 2.\n    y2 = boxes[:, 1] + boxes[:, 3] / 2.\n    scores = boxes[:, 4]\n    areas = (x2 - x1 + 1) * (y2 - y1 + 1)\n    order = scores.argsort()[::-1]\n    keep = []\n    while order.size > 0:\n        i = order[0]\n        keep.append(i)\n        ix1 = np.maximum(x1[i], x1[order[1:]])\n        iy1 = np.maximum(y1[i], y1[order[1:]])\n        ix2 = np.minimum(x2[i], x2[order[1:]])\n        iy2 = np.minimum(y2[i], y2[order[1:]])\n        w = np.maximum(0.0, ix2-ix1+1)\n        h = np.maximum(0.0, iy2-iy1+1)\n        inter = w * h\n        ovr = inter / (areas[i] + areas[order[1:]] - inter)\n        inds = np.where(ovr <= thresh)[0]\n        order = order[inds + 1]\n    return boxes[np.require(keep), :]\n\n#parse result\ndef parse_result(out_put):\n    global num_classes\n    global num_anchors\n    global side\n    locations = side ** 2\n    boxes = np.zeros((num_anchors * locations, 6), dtype=np.float32)\n    for i in range(locations):\n        tmp_scores = out_put[i:num_classes*locations:locations]\n        max_class_ind = np.argsort(tmp_scores)[-1]\n        max_prob = np.max(tmp_scores)\n        obj_index = num_classes * locations + i\n        obj_scores = max_prob * out_put[obj_index:(obj_index+num_anchors*locations):locations]\n        coor_index = (num_classes + num_anchors) * locations + i\n        for j in range(num_anchors):\n           boxes[i*num_anchors+j][5] = max_class_ind\n           boxes[i*num_anchors+j][4] = obj_scores[j]\n           box_index = coor_index + j * 4 * locations\n           boxes[i*num_anchors+j][0] = (i % side + out_put[box_index + 0 * locations]) / float(side)\n           boxes[i*num_anchors+j][1] = (i / side + out_put[box_index + 1 * locations]) / float(side)\n           boxes[i*num_anchors+j][2] = out_put[box_index + 2 * locations] ** 2\n           boxes[i*num_anchors+j][3] = out_put[box_index + 3 * locations] ** 2\n    return nms(boxes, 0.5)\n\n#show or write result_picture\ndef show_boxes(im_path, boxes, sthresh=0.5, hthresh=1, show=0):\n    print (boxes.shape)\n    im = cv2.imread(im_path)\n    ori_w = im.shape[1]\n    ori_h = im.shape[0]\n    for box in boxes:\n        if box[4] < sthresh:\n            continue\n        if box[4] > hthresh:\n            continue\n        print (box)\n        box = box[:4]\n        x1 = max(0, int((box[0] - box[2] / 2.) * ori_w))\n        y1 = max(0, int((box[1] - box[3] / 2.) * ori_h))\n        x2 = min(ori_w - 1, int((box[0] + box[2] / 2.) * ori_w))\n        y2 = min(ori_h - 1, int((box[1] + box[3] / 2.) * ori_h))\n        cv2.rectangle(im, (x1, y1), (x2, y2), (0, 255, 255), 2)\n    name = os.path.split(im_path)[1].split('.')[0]\n    if show:\n        cv2.imshow(\"out\", im)\n    else:\n        cv2.imwrite(\"adam-out-n\"+name+'.jpg', im)\n\n# predict\ndef predict(model, im_path):\n    # image pre-processing\n    im = cv2.imread(im_path)\n    im = cv2.resize(im, (160, 160))\n    im = np.require(im.transpose((2, 0, 1)), dtype=np.float32)\n\n    # forward process...\n    model.blobs['data'].data[...] = im\n    out_blobs = model.forward()\n    \n    '''\n    The structure of out_put is:\n    [n*n*class1,n*n*class2,...,n*n*class(i),n*n*score1,n*n*score2,n*n*(x,y,w,h)1,n*n*(x,y,w,h)2]\n    p.s. n is side\n    '''\n    reg_out = out_blobs[\"fc9\"]\n    boxes = parse_result(reg_out[0])\n    show_boxes(im_path, boxes, 0.2)\n\nif __name__==\"__main__\":\n    global net_proto\n    global model_path\n    global im_path\n    # load net with model\n    model = caffe.Net(net_proto, model_path, caffe.TEST)\n\n    predict(model, im_path)\n```","slug":"caffe-yolo-summary","published":1,"updated":"2019-07-26T06:55:21.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyjsml24000tafp2539050u8","content":"<p><strong>本博文记录博主对caffe的初步理解以及yolo在caffe上的运行</strong></p>\n<h2 id=\"一、数据处理篇\"><a href=\"#一、数据处理篇\" class=\"headerlink\" title=\"一、数据处理篇\"></a>一、数据处理篇</h2><h3 id=\"1-1-Dataset转化为LMDB\"><a href=\"#1-1-Dataset转化为LMDB\" class=\"headerlink\" title=\"1.1 Dataset转化为LMDB\"></a>1.1 Dataset转化为LMDB</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如先前所做的总结，在这里再次强调一下，首先要将数据转化为LMDB或LEVELDB格式，再输入至caffe的数据输入层。而图片转化为LMDB格式时，其形状或维度含义为[heights, weights, channels] 。其代码（位于caffe/src/caffe/util/io.cpp）如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void CVMatToDatum(const cv::Mat&amp; cv_img, Datum* datum) &#123;a  CHECK(cv_img.depth() == CV_8U) &lt;&lt; \"Image data type must be unsigned byte\";</span><br><span class=\"line\">  datum-&gt;set_channels(cv_img.channels());</span><br><span class=\"line\">  datum-&gt;set_height(cv_img.rows);</span><br><span class=\"line\">  datum-&gt;set_width(cv_img.cols);</span><br><span class=\"line\">  datum-&gt;clear_data();</span><br><span class=\"line\">  datum-&gt;clear_float_data();</span><br><span class=\"line\">  datum-&gt;set_encoded(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_channels = datum-&gt;channels();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_height = datum-&gt;height();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_width = datum-&gt;width();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_size = datum_channels * datum_height * datum_width;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">buffer</span><span class=\"params\">(datum_size, <span class=\"string\">' '</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt; datum_height; ++h) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uchar* ptr = cv_img.ptr&lt;uchar&gt;(h);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> img_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w = <span class=\"number\">0</span>; w &lt; datum_width; ++w) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; datum_channels; ++c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> datum_index = (c * datum_height + h) * datum_width + w;</span><br><span class=\"line\">        buffer[datum_index] = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">char</span>&gt;(ptr[img_index++]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  datum-&gt;set_data(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而label文件对bounding-box的标记也从[Xmin, Ymin, Xmax, Ymax] 转化为[Xmid, Ymid, W, H]，同时，对其进行了归一化操作；并将不同class转为对应的index（按照label_map进行`映射）。其代码（位于caffe/src/caffe/util/io.cpp）如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ParseXmlToDatum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; annoname, <span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;&amp; label_map,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> ori_w, <span class=\"keyword\">int</span> ori_h, Datum* datum)</span> </span>&#123;</span><br><span class=\"line\">  ptree pt;</span><br><span class=\"line\">  read_xml(annoname, pt);</span><br><span class=\"line\">  int width(0), height(0);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    height = pt.get&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"string\">\"annotation.size.height\"</span>);</span><br><span class=\"line\">    width = pt.get&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"string\">\"annotation.size.width\"</span>);</span><br><span class=\"line\">    CHECK_EQ(ori_w, width);</span><br><span class=\"line\">    CHECK_EQ(ori_h, height);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">const</span> ptree_error &amp;e) &#123;</span><br><span class=\"line\">    LOG(WARNING) &lt;&lt; <span class=\"string\">\"When paring \"</span> &lt;&lt; annoname &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; e.what();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  datum-&gt;clear_float_data();</span><br><span class=\"line\">  BOOST_FOREACH(ptree::value_type &amp;v1, pt.get_child(<span class=\"string\">\"annotation\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v1.first == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      ptree object = v1.second;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">label</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">      <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">float</span>&gt; box(<span class=\"number\">4</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">difficult</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">      BOOST_FOREACH(ptree::value_type &amp;v2, object.get_child(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">        ptree pt2 = v2.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v2.first == <span class=\"string\">\"name\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">string</span> name = pt2.data();</span><br><span class=\"line\">          <span class=\"comment\">// map name to label</span></span><br><span class=\"line\">          label = name_to_label(name, label_map);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (label &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            LOG(FATAL) &lt;&lt; <span class=\"string\">\"Anno file \"</span> &lt;&lt; annoname &lt;&lt; <span class=\"string\">\" -&gt; unknown name: \"</span> &lt;&lt; name;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v2.first == <span class=\"string\">\"bndbox\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> xmin = pt2.get(<span class=\"string\">\"xmin\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> ymin = pt2.get(<span class=\"string\">\"ymin\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> xmax = pt2.get(<span class=\"string\">\"xmax\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> ymax = pt2.get(<span class=\"string\">\"ymax\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          LOG_IF(WARNING, xmin &lt; <span class=\"number\">0</span> || xmin &gt; ori_w) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, xmax &lt; <span class=\"number\">0</span> || xmax &gt; ori_w) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, ymin &lt; <span class=\"number\">0</span> || ymin &gt; ori_h) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, ymax &lt; <span class=\"number\">0</span> || ymax &gt; ori_h) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, xmin &gt; xmax) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, ymin &gt; ymax) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          box[<span class=\"number\">0</span>] = <span class=\"keyword\">float</span>(xmin + (xmax - xmin) / <span class=\"number\">2.</span>) / ori_w;</span><br><span class=\"line\">          box[<span class=\"number\">1</span>] = <span class=\"keyword\">float</span>(ymin + (ymax - ymin) / <span class=\"number\">2.</span>) / ori_h;</span><br><span class=\"line\">          box[<span class=\"number\">2</span>] = <span class=\"keyword\">float</span>(xmax - xmin) / ori_w;</span><br><span class=\"line\">          box[<span class=\"number\">3</span>] = <span class=\"keyword\">float</span>(ymax - ymin) / ori_h;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v2.first == <span class=\"string\">\"difficult\"</span>) &#123;</span><br><span class=\"line\">          difficult = atoi(pt2.data().c_str());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      CHECK_GE(label, <span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">\"label must start at 0\"</span>;</span><br><span class=\"line\">      datum-&gt;add_float_data(<span class=\"keyword\">float</span>(label));</span><br><span class=\"line\">      datum-&gt;add_float_data(<span class=\"keyword\">float</span>(difficult));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i) &#123;</span><br><span class=\"line\">        datum-&gt;add_float_data(box[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-DataLayer\"><a href=\"#1-2-DataLayer\" class=\"headerlink\" title=\"1.2 DataLayer\"></a>1.2 DataLayer</h3><p>yolo网络训练、测试时所用的DataLayer是BoxDataLayer，该数据输入层是由caffe-yolo原作者编写。这里做一下简单的代码分析：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> USE_OPENCV</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">// USE_OPENCV</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"caffe/data_transformer.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"caffe/layers/box_data_layer.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"caffe/util/benchmark.hpp\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> caffe &#123;</span><br><span class=\"line\"><span class=\"comment\">//构造函数，初始化Layer参数，reader_参数; BasePrefetchingDataLayer带预取功能的数据读取层</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\">BoxDataLayer&lt;Dtype&gt;::BoxDataLayer(<span class=\"keyword\">const</span> LayerParameter&amp; param)</span><br><span class=\"line\">  : BasePrefetchingDataLayer&lt;Dtype&gt;(param),</span><br><span class=\"line\">    reader_(param) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解析函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\">BoxDataLayer&lt;Dtype&gt;::~BoxDataLayer() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;StopInternalThread();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//BoxDataLayer层设置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BoxDataLayer&lt;Dtype&gt;::DataLayerSetUp(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom,</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;Blob&lt;Dtype&gt;*&gt;&amp; top) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;box_label_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> DataParameter param = <span class=\"keyword\">this</span>-&gt;layer_param_.data_param();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> batch_size = param.batch_size();</span><br><span class=\"line\">  <span class=\"comment\">// 读取数据，并使用它来初始化blob的top。</span></span><br><span class=\"line\">  Datum&amp; datum = *(reader_.full().peek());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用data_transformer从datum得到预期的blob形状。</span></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; top_shape = <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;InferBlobShape(datum);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;transformed_data_.Reshape(top_shape);</span><br><span class=\"line\">  <span class=\"comment\">// Reshape top[0] and prefetch_data according to the batch_size.</span></span><br><span class=\"line\">  top_shape[<span class=\"number\">0</span>] = batch_size;</span><br><span class=\"line\">  top[<span class=\"number\">0</span>]-&gt;Reshape(top_shape);</span><br><span class=\"line\">  <span class=\"comment\">//PREFETCH_COUNT-预取的数据批量数目</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;PREFETCH_COUNT; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;prefetch_[i].data_.Reshape(top_shape);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  LOG(INFO) &lt;&lt; <span class=\"string\">\"output data size: \"</span> &lt;&lt; top[<span class=\"number\">0</span>]-&gt;num() &lt;&lt; <span class=\"string\">\",\"</span></span><br><span class=\"line\">      &lt;&lt; top[<span class=\"number\">0</span>]-&gt;channels() &lt;&lt; <span class=\"string\">\",\"</span> &lt;&lt; top[<span class=\"number\">0</span>]-&gt;height() &lt;&lt; <span class=\"string\">\",\"</span></span><br><span class=\"line\">      &lt;&lt; top[<span class=\"number\">0</span>]-&gt;width();</span><br><span class=\"line\">  <span class=\"comment\">// label</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;output_labels_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param.side_size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; param.side_size(); ++i) &#123;</span><br><span class=\"line\">        sides_.push_back(param.side(i));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sides_.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      sides_.push_back(<span class=\"number\">7</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CHECK_EQ(sides_.size(), top.size() - <span class=\"number\">1</span>) &lt;&lt;</span><br><span class=\"line\">      <span class=\"string\">\"side num not equal to top size\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;PREFETCH_COUNT; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;prefetch_[i].multi_label_.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sides_.size(); ++i) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; label_shape(<span class=\"number\">1</span>, batch_size);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> label_size = sides_[i] * sides_[i] * (<span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">4</span>);</span><br><span class=\"line\">      label_shape.push_back(label_size);</span><br><span class=\"line\">      top[i+<span class=\"number\">1</span>]-&gt;Reshape(label_shape);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"keyword\">this</span>-&gt;PREFETCH_COUNT; ++j) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">shared_ptr</span>&lt;Blob&lt;Dtype&gt; &gt; tmp_blob;</span><br><span class=\"line\">        tmp_blob.reset(<span class=\"keyword\">new</span> Blob&lt;Dtype&gt;(label_shape));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;prefetch_[j].multi_label_.push_back(tmp_blob);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This function is called on prefetch thread</span></span><br><span class=\"line\"><span class=\"comment\">// 批量导入数据</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BoxDataLayer&lt;Dtype&gt;::load_batch(Batch&lt;Dtype&gt;* batch) &#123;</span><br><span class=\"line\">  CPUTimer batch_timer;</span><br><span class=\"line\">  batch_timer.Start();</span><br><span class=\"line\">  <span class=\"keyword\">double</span> read_time = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">double</span> trans_time = <span class=\"number\">0</span>;</span><br><span class=\"line\">  CPUTimer timer;</span><br><span class=\"line\">  CHECK(batch-&gt;data_.count());</span><br><span class=\"line\">  CHECK(<span class=\"keyword\">this</span>-&gt;transformed_data_.count());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reshape according to the first datum of each batch</span></span><br><span class=\"line\">  <span class=\"comment\">// on single input batches allows for inputs of varying dimension.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> batch_size = <span class=\"keyword\">this</span>-&gt;layer_param_.data_param().batch_size();</span><br><span class=\"line\">  Datum&amp; datum = *(reader_.full().peek());</span><br><span class=\"line\">  <span class=\"comment\">// Use data_transformer to infer the expected blob shape from datum.</span></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; top_shape = <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;InferBlobShape(datum);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;transformed_data_.Reshape(top_shape);</span><br><span class=\"line\">  <span class=\"comment\">// Reshape batch according to the batch_size.</span></span><br><span class=\"line\">  top_shape[<span class=\"number\">0</span>] = batch_size;</span><br><span class=\"line\">  batch-&gt;data_.Reshape(top_shape);</span><br><span class=\"line\"></span><br><span class=\"line\">  Dtype* top_data = batch-&gt;data_.mutable_cpu_data();</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;Dtype*&gt; top_label;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;output_labels_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sides_.size(); ++i) &#123;</span><br><span class=\"line\">      top_label.push_back(batch-&gt;multi_label_[i]-&gt;mutable_cpu_data());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> item_id = <span class=\"number\">0</span>; item_id &lt; batch_size; ++item_id) &#123;</span><br><span class=\"line\">    timer.Start();</span><br><span class=\"line\">    <span class=\"comment\">// get a datum</span></span><br><span class=\"line\">    Datum&amp; datum = *(reader_.full().pop(<span class=\"string\">\"Waiting for data\"</span>));</span><br><span class=\"line\">    read_time += timer.MicroSeconds();</span><br><span class=\"line\">    timer.Start();</span><br><span class=\"line\">    <span class=\"comment\">// Apply data transformations (mirror, scale, crop...)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = batch-&gt;data_.offset(item_id);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;BoxLabel&gt; box_labels;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;transformed_data_.set_cpu_data(top_data + offset);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;output_labels_) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// rand sample a patch, adjust box labels</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;Transform(datum, &amp;(<span class=\"keyword\">this</span>-&gt;transformed_data_), &amp;box_labels);</span><br><span class=\"line\">      <span class=\"comment\">// transform label</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sides_.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> label_offset = batch-&gt;multi_label_[i]-&gt;offset(item_id);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count  = batch-&gt;multi_label_[i]-&gt;count(<span class=\"number\">1</span>);</span><br><span class=\"line\">        transform_label(count, top_label[i] + label_offset, box_labels, sides_[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;Transform(datum, &amp;(<span class=\"keyword\">this</span>-&gt;transformed_data_));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trans_time += timer.MicroSeconds();</span><br><span class=\"line\"></span><br><span class=\"line\">    reader_.<span class=\"built_in\">free</span>().push(<span class=\"keyword\">const_cast</span>&lt;Datum*&gt;(&amp;datum));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  timer.Stop();</span><br><span class=\"line\">  batch_timer.Stop();</span><br><span class=\"line\">  DLOG(INFO) &lt;&lt; <span class=\"string\">\"Prefetch batch: \"</span> &lt;&lt; batch_timer.MilliSeconds() &lt;&lt; <span class=\"string\">\" ms.\"</span>;</span><br><span class=\"line\">  DLOG(INFO) &lt;&lt; <span class=\"string\">\"     Read time: \"</span> &lt;&lt; read_time / <span class=\"number\">1000</span> &lt;&lt; <span class=\"string\">\" ms.\"</span>;</span><br><span class=\"line\">  DLOG(INFO) &lt;&lt; <span class=\"string\">\"Transform time: \"</span> &lt;&lt; trans_time / <span class=\"number\">1000</span> &lt;&lt; <span class=\"string\">\" ms.\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成通过数据转化器生成的数据对应的label</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BoxDataLayer&lt;Dtype&gt;::transform_label(<span class=\"keyword\">int</span> count, Dtype* top_label,</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;BoxLabel&gt;&amp; box_labels, <span class=\"keyword\">int</span> side) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> locations = <span class=\"built_in\">pow</span>(side, <span class=\"number\">2</span>);</span><br><span class=\"line\">  CHECK_EQ(count, locations * <span class=\"number\">7</span>) &lt;&lt;</span><br><span class=\"line\">    <span class=\"string\">\"side and count not match\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// difficult</span></span><br><span class=\"line\">  caffe_set(locations, Dtype(<span class=\"number\">0</span>), top_label);</span><br><span class=\"line\">  <span class=\"comment\">// isobj</span></span><br><span class=\"line\">  caffe_set(locations, Dtype(<span class=\"number\">0</span>), top_label + locations);</span><br><span class=\"line\">  <span class=\"comment\">// class label</span></span><br><span class=\"line\">  caffe_set(locations, Dtype(<span class=\"number\">-1</span>), top_label + locations * <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// box</span></span><br><span class=\"line\">  caffe_set(locations*<span class=\"number\">4</span>, Dtype(<span class=\"number\">0</span>), top_label + locations * <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; box_labels.size(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> difficult = box_labels[i].difficult_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (difficult != <span class=\"number\">0.</span> &amp;&amp; difficult != <span class=\"number\">1.</span>) &#123;</span><br><span class=\"line\">      LOG(WARNING) &lt;&lt; <span class=\"string\">\"Difficult must be 0 or 1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> class_label = box_labels[i].class_label_;</span><br><span class=\"line\">    CHECK_GE(class_label, <span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">\"class_label must &gt;= 0\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> x = box_labels[i].box_[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> y = box_labels[i].box_[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// LOG(INFO) &lt;&lt; \"x: \" &lt;&lt; x &lt;&lt; \" y: \" &lt;&lt; y;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x_index = <span class=\"built_in\">floor</span>(x * side);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y_index = <span class=\"built_in\">floor</span>(y * side);</span><br><span class=\"line\">    x_index = <span class=\"built_in\">std</span>::min(x_index, side - <span class=\"number\">1</span>);</span><br><span class=\"line\">    y_index = <span class=\"built_in\">std</span>::min(y_index, side - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dif_index = side * y_index + x_index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> obj_index = locations + dif_index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> class_index = locations * <span class=\"number\">2</span> + dif_index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cor_index = locations * <span class=\"number\">3</span> + dif_index * <span class=\"number\">4</span>;</span><br><span class=\"line\">    top_label[dif_index] = difficult;</span><br><span class=\"line\">    top_label[obj_index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// LOG(INFO) &lt;&lt; \"dif_index: \" &lt;&lt; dif_index &lt;&lt; \" class_label: \" &lt;&lt; class_label;</span></span><br><span class=\"line\">    top_label[class_index] = class_label;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; ++j) &#123;</span><br><span class=\"line\">      top_label[cor_index + j] = box_labels[i].box_[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实例化BoxDataLayer、BoxData</span></span><br><span class=\"line\">INSTANTIATE_CLASS(BoxDataLayer);</span><br><span class=\"line\">REGISTER_LAYER_CLASS(BoxData);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace caffe</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-Input与预处理\"><a href=\"#1-3-Input与预处理\" class=\"headerlink\" title=\"1.3 Input与预处理\"></a>1.3 Input与预处理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在进行图像预处理时，可以使用去均值操作，其目的是使得像素值更接近（0,0,0）原点，从而加快收敛速度。如果在数据层加入去均值操作，预测时也需要进行去均值操作。如无，则无需！其方法如下：</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(104,117,123)为imagenet均值，可自行根据数据集生成均值。</span></span><br><span class=\"line\">mean<span class=\"number\">_</span><span class=\"keyword\">value</span>: <span class=\"number\">104</span></span><br><span class=\"line\">mean<span class=\"number\">_</span><span class=\"keyword\">value</span>: <span class=\"number\">117</span></span><br><span class=\"line\">mean<span class=\"number\">_</span><span class=\"keyword\">value</span>: <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;同时，图像预处理的目的之一是保证输入数据与网络输入层所要求的shape保持一致。通过opencv.imread(img_path)函数读取的图片为（heights, weights, channels）。而deploy.prototxt中的input层为（channels, heights, weights）。因此，在进行预测时需要对输入图片进行预处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = cv2.imread(im_path)</span><br><span class=\"line\">im = cv2.resize(im, (<span class=\"number\">160</span>, <span class=\"number\">160</span>))</span><br><span class=\"line\">im = np.require(im.transpose((<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)), dtype=np.float32)</span><br><span class=\"line\"><span class=\"comment\">#在训练时没有进行去均值，因此在预测时也没有进行去均值。</span></span><br><span class=\"line\"><span class=\"comment\">#im -= mean</span></span><br></pre></td></tr></table></figure>\n\n<p>而转化为graph文件后，其网络输入层为（heights, weights, channels），附件为转为graph文件后的网络结构图：<br><a href=\"output.gv.svg\">点击查看或下载</a><br>因此，无需对输入图片进行预处理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = cv2.imread(input_image_path)</span><br><span class=\"line\">im = cv2.resize(im, (160, 160))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、caffe简介\"><a href=\"#二、caffe简介\" class=\"headerlink\" title=\"二、caffe简介\"></a>二、caffe简介</h2><h3 id=\"2-1-Project结构\"><a href=\"#2-1-Project结构\" class=\"headerlink\" title=\"2.1 Project结构\"></a>2.1 Project结构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在caffe架构下搭建网络是通过prototxt文件描述的，以此建立统一的参数管理机制。在prototxt文件中，不仅包含基本的网络结构，还包含Loss层（Train时需要）、输入数据的路径和结构（Train与Test时需要）、输入数据size/ shape（如160<em>160</em>3,Deploy时需要）。因此，不同于keras，caffe的网络结构文件需要多个。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，solver.prototxt（即求解器）的主要功能是设置超参数，确定优化方式；其次， train.prototxt与test.prototxt的主要功能是搭建网络结构，设置结构参数用于训练与测试，确定loss层；最后，deploy.prototxt的主要功能是搭建最基础的网络结构用于预测。<br><img src=\"/2019/01/08/caffe-yolo-summary/1.png\" alt=\"效果图\"></p>\n<h3 id=\"2-2-网络结构\"><a href=\"#2-2-网络结构\" class=\"headerlink\" title=\"2.2 网络结构\"></a>2.2 网络结构</h3><p>deploy.prototxt内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: <span class=\"string\">\"tiny-yolo\"</span></span><br><span class=\"line\">input: <span class=\"string\">\"data\"</span></span><br><span class=\"line\">input_shape &#123;</span><br><span class=\"line\">  dim: 1</span><br><span class=\"line\">  dim: 3</span><br><span class=\"line\">  dim: 160</span><br><span class=\"line\">  dim: 160</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"data\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv1\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 16</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn1\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool1\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv2\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 32</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn2\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool2\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv3\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 64</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn3\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool3\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv4\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 128</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn4\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool4\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv5\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 256</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn5\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool5\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv6\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 512</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn6\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool6\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv7\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 1024</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn7\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv8\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 256</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn8\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"fc9\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"InnerProduct\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"fc9\"</span></span><br><span class=\"line\">  inner_product_param &#123;</span><br><span class=\"line\">    num_output: 300</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、Tiny-YOLO\"><a href=\"#三、Tiny-YOLO\" class=\"headerlink\" title=\"三、Tiny YOLO\"></a>三、Tiny YOLO</h2><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;Tiny-YOLO是YOLO算法的简单实现。相比于YOLO算法，它的网络结构更浅，仅有9层。除此外，其理论基础与YOLO并无二致。</strong></p>\n<h3 id=\"3-1-Yolo-Innovation\"><a href=\"#3-1-Yolo-Innovation\" class=\"headerlink\" title=\"3.1 Yolo Innovation\"></a>3.1 Yolo Innovation</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO算法首创的实现了端到端的目标检测算法，是速度惊人、准确度较好的one-stage算法。YOLO算法将整张图片划分为SXS的grid，采用一次性预测所有格子所含目标的bounding-box、confidence以及P(object)和P(class|object)。<br>&nbsp;&nbsp;&nbsp;&nbsp;网络的输出结果为一个向量，size为：S * S * (B * 5 +C)。其中，S为划分网格数，B为每个网格负责目标个数，C为类别个数。其含义为：每个网格会对应B个边界框，边界框的宽高范围为全图，而中心点落于该网格；每个边界框对应一个置信度值，代表该处是否有物体及定位准确度（即Confidence = P(object) * IOU(predict-box, ground-truth)。）；每个网格对应C个概率，分别代表每个class出现的概率。<br>&nbsp;&nbsp;&nbsp;&nbsp;而YOLO是如何实现对输入图像的分格呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;原作者巧妙地在最后预测层设置了S * S * (B * 5 +C)个神经元（该层为全连接层，在yolo2中该层为1*1的卷积层），通过训练将对应不同网格的ground-truth收敛到对应的网格的输出中。</p>\n<h3 id=\"3-2-Loss\"><a href=\"#3-2-Loss\" class=\"headerlink\" title=\"3.2 Loss\"></a>3.2 Loss</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;损失函数的设计目标就是让坐标（x,y,w,h），confidence，classification 这个三个方面达到很好的平衡。简单的全部采用了sum-squared error loss来做这件事会有以下不足：<br>首先，(num_side*4)维的localization error和(num_classes)维的classification error每一个维度产生的代价同等重要，这显然是不合理的。<br>其次，如果一些栅格中没有object（一幅图中这种栅格很多），那么就会将这些栅格中的bounding box的confidence置为0，相比于较少的有object的栅格，这些不包含物体的栅格对梯度更新的贡献会远大于包含物体的栅格对梯度更新的贡献，这会导致网络不稳定甚至发散。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此，YOLO采取了更有效的Loss函数。将loss函数分为3部分：第一，坐标预测是否准确(图片中书写有误，xy值与groundtruth应相减不因相加)；第二，有无object预测是否准确；第三，类别预测。<br><img src=\"/2019/01/08/caffe-yolo-summary/2.png\" alt=\"效果图\"><br><img src=\"/2019/01/08/caffe-yolo-summary/3.png\" alt=\"效果图\"><br>&nbsp;&nbsp;&nbsp;&nbsp;更重视8维的坐标预测，给这些损失前面赋予更大的loss weight, 记为 λcoord ,在pascal VOC训练中取5。对没有object的bbox的confidence loss，赋予小的loss weight，记为 λnoobj ，在pascal VOC训练中取0.5。有object的bbox的confidence loss 和类别的loss 的loss weight正常取1。<br>&nbsp;&nbsp;&nbsp;&nbsp;对不同大小的bbox预测中，相比于大bbox预测偏一点，小box预测偏相同的尺寸对IOU的影响更大。而sum-square error loss中对同样的偏移loss是一样。为了缓和这个问题，作者用了一个巧妙的办法，就是将box的width和height取平方根代替原本的height和width。 如下：small bbox的横轴值较小，发生偏移时，反应到y轴上的loss（下图绿色）比big box(下图红色)要大。<br><img src=\"/2019/01/08/caffe-yolo-summary/4.png\" alt=\"效果图\"></p>\n<h2 id=\"四、Train-amp-amp-Test\"><a href=\"#四、Train-amp-amp-Test\" class=\"headerlink\" title=\"四、Train &amp;&amp; Test\"></a>四、Train &amp;&amp; Test</h2><h3 id=\"4-1-Optimization\"><a href=\"#4-1-Optimization\" class=\"headerlink\" title=\"4.1 Optimization\"></a>4.1 Optimization</h3><p>本项目测试过SGD、momentum 、Adam。最终，Adam效果最佳。</p>\n<h3 id=\"4-2-solver-prototxt-Adam\"><a href=\"#4-2-solver-prototxt-Adam\" class=\"headerlink\" title=\"4.2 solver.prototxt(Adam)\"></a>4.2 solver.prototxt(Adam)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net: <span class=\"string\">\"x_train.prototxt\"</span></span><br><span class=\"line\">test_iter: 3000</span><br><span class=\"line\">test_interval: 32000</span><br><span class=\"line\">test_initialization: <span class=\"literal\">false</span></span><br><span class=\"line\">display: 20</span><br><span class=\"line\">average_loss: 100</span><br><span class=\"line\">lr_policy: <span class=\"string\">\"multifixed\"</span></span><br><span class=\"line\">stagelr: 0.001</span><br><span class=\"line\">stagelr: 0.0001</span><br><span class=\"line\">stagelr: 0.00001</span><br><span class=\"line\">stagelr: 0.000001</span><br><span class=\"line\">stageiter: 520</span><br><span class=\"line\">stageiter: 16000</span><br><span class=\"line\">stageiter: 24000</span><br><span class=\"line\">stageiter: 32000</span><br><span class=\"line\">max_iter: 32000</span><br><span class=\"line\">momentum: 0.9</span><br><span class=\"line\">weight_decay: 0.0005</span><br><span class=\"line\">snapshot: 2000</span><br><span class=\"line\">snapshot_prefix: <span class=\"string\">\"./models/x_yolo\"</span></span><br><span class=\"line\">solver_mode: GPU</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-train-prototxt\"><a href=\"#4-3-train-prototxt\" class=\"headerlink\" title=\"4.3 train.prototxt\"></a>4.3 train.prototxt</h3><p><a href=\"train.prototxt\">点击下载</a></p>\n<h2 id=\"五、Predict\"><a href=\"#五、Predict\" class=\"headerlink\" title=\"五、Predict\"></a>五、Predict</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.insert(0, <span class=\"string\">'/home/mc/Desktop/caffe/caffe/python/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">import caffe</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"><span class=\"comment\">#global variable set start#</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"></span><br><span class=\"line\">num_classes = 2</span><br><span class=\"line\">num_anchors = 2</span><br><span class=\"line\">side = 5</span><br><span class=\"line\"></span><br><span class=\"line\">net_proto = <span class=\"string\">\"./x_deploy.prototxt\"</span></span><br><span class=\"line\">model_path = <span class=\"string\">\"./models/x_yolo_iter_32000.caffemodel\"</span></span><br><span class=\"line\">im_path = <span class=\"string\">'/home/mc/Desktop/caffe-yolo/data/yolo/VOCdevkit/VOC2018/JPEGImages/826.jpg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"><span class=\"comment\">#global variable set end..#</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#environment sets</span></span><br><span class=\"line\">caffe.set_device(0)</span><br><span class=\"line\">caffe.set_mode_gpu()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nms filter</span></span><br><span class=\"line\">def nms(boxes, thresh):</span><br><span class=\"line\">    x1 = boxes[:, 0] - boxes[:, 2] / 2.</span><br><span class=\"line\">    y1 = boxes[:, 1] - boxes[:, 3] / 2.</span><br><span class=\"line\">    x2 = boxes[:, 0] + boxes[:, 2] / 2.</span><br><span class=\"line\">    y2 = boxes[:, 1] + boxes[:, 3] / 2.</span><br><span class=\"line\">    scores = boxes[:, 4]</span><br><span class=\"line\">    areas = (x2 - x1 + 1) * (y2 - y1 + 1)</span><br><span class=\"line\">    order = scores.argsort()[::-1]</span><br><span class=\"line\">    keep = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> order.size &gt; 0:</span><br><span class=\"line\">        i = order[0]</span><br><span class=\"line\">        keep.append(i)</span><br><span class=\"line\">        ix1 = np.maximum(x1[i], x1[order[1:]])</span><br><span class=\"line\">        iy1 = np.maximum(y1[i], y1[order[1:]])</span><br><span class=\"line\">        ix2 = np.minimum(x2[i], x2[order[1:]])</span><br><span class=\"line\">        iy2 = np.minimum(y2[i], y2[order[1:]])</span><br><span class=\"line\">        w = np.maximum(0.0, ix2-ix1+1)</span><br><span class=\"line\">        h = np.maximum(0.0, iy2-iy1+1)</span><br><span class=\"line\">        inter = w * h</span><br><span class=\"line\">        ovr = inter / (areas[i] + areas[order[1:]] - inter)</span><br><span class=\"line\">        inds = np.where(ovr &lt;= thresh)[0]</span><br><span class=\"line\">        order = order[inds + 1]</span><br><span class=\"line\">    <span class=\"built_in\">return</span> boxes[np.require(keep), :]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#parse result</span></span><br><span class=\"line\">def parse_result(out_put):</span><br><span class=\"line\">    global num_classes</span><br><span class=\"line\">    global num_anchors</span><br><span class=\"line\">    global side</span><br><span class=\"line\">    locations = side ** 2</span><br><span class=\"line\">    boxes = np.zeros((num_anchors * locations, 6), dtype=np.float32)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(locations):</span><br><span class=\"line\">        tmp_scores = out_put[i:num_classes*locations:locations]</span><br><span class=\"line\">        max_class_ind = np.argsort(tmp_scores)[-1]</span><br><span class=\"line\">        max_prob = np.max(tmp_scores)</span><br><span class=\"line\">        obj_index = num_classes * locations + i</span><br><span class=\"line\">        obj_scores = max_prob * out_put[obj_index:(obj_index+num_anchors*locations):locations]</span><br><span class=\"line\">        coor_index = (num_classes + num_anchors) * locations + i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(num_anchors):</span><br><span class=\"line\">           boxes[i*num_anchors+j][5] = max_class_ind</span><br><span class=\"line\">           boxes[i*num_anchors+j][4] = obj_scores[j]</span><br><span class=\"line\">           box_index = coor_index + j * 4 * locations</span><br><span class=\"line\">           boxes[i*num_anchors+j][0] = (i % side + out_put[box_index + 0 * locations]) / <span class=\"built_in\">float</span>(side)</span><br><span class=\"line\">           boxes[i*num_anchors+j][1] = (i / side + out_put[box_index + 1 * locations]) / <span class=\"built_in\">float</span>(side)</span><br><span class=\"line\">           boxes[i*num_anchors+j][2] = out_put[box_index + 2 * locations] ** 2</span><br><span class=\"line\">           boxes[i*num_anchors+j][3] = out_put[box_index + 3 * locations] ** 2</span><br><span class=\"line\">    <span class=\"built_in\">return</span> nms(boxes, 0.5)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#show or write result_picture</span></span><br><span class=\"line\">def show_boxes(im_path, boxes, sthresh=0.5, hthresh=1, show=0):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (boxes.shape)</span><br><span class=\"line\">    im = cv2.imread(im_path)</span><br><span class=\"line\">    ori_w = im.shape[1]</span><br><span class=\"line\">    ori_h = im.shape[0]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> box <span class=\"keyword\">in</span> boxes:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> box[4] &lt; sthresh:</span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> box[4] &gt; hthresh:</span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (box)</span><br><span class=\"line\">        box = box[:4]</span><br><span class=\"line\">        x1 = max(0, int((box[0] - box[2] / 2.) * ori_w))</span><br><span class=\"line\">        y1 = max(0, int((box[1] - box[3] / 2.) * ori_h))</span><br><span class=\"line\">        x2 = min(ori_w - 1, int((box[0] + box[2] / 2.) * ori_w))</span><br><span class=\"line\">        y2 = min(ori_h - 1, int((box[1] + box[3] / 2.) * ori_h))</span><br><span class=\"line\">        cv2.rectangle(im, (x1, y1), (x2, y2), (0, 255, 255), 2)</span><br><span class=\"line\">    name = os.path.split(im_path)[1].split(<span class=\"string\">'.'</span>)[0]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> show:</span><br><span class=\"line\">        cv2.imshow(<span class=\"string\">\"out\"</span>, im)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cv2.imwrite(<span class=\"string\">\"adam-out-n\"</span>+name+<span class=\"string\">'.jpg'</span>, im)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># predict</span></span><br><span class=\"line\">def predict(model, im_path):</span><br><span class=\"line\">    <span class=\"comment\"># image pre-processing</span></span><br><span class=\"line\">    im = cv2.imread(im_path)</span><br><span class=\"line\">    im = cv2.resize(im, (160, 160))</span><br><span class=\"line\">    im = np.require(im.transpose((2, 0, 1)), dtype=np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># forward process...</span></span><br><span class=\"line\">    model.blobs[<span class=\"string\">'data'</span>].data[...] = im</span><br><span class=\"line\">    out_blobs = model.forward()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    The structure of out_put is:</span></span><br><span class=\"line\"><span class=\"string\">    [n*n*class1,n*n*class2,...,n*n*class(i),n*n*score1,n*n*score2,n*n*(x,y,w,h)1,n*n*(x,y,w,h)2]</span></span><br><span class=\"line\"><span class=\"string\">    p.s. n is side</span></span><br><span class=\"line\"><span class=\"string\">    '</span><span class=\"string\">''</span></span><br><span class=\"line\">    reg_out = out_blobs[<span class=\"string\">\"fc9\"</span>]</span><br><span class=\"line\">    boxes = parse_result(reg_out[0])</span><br><span class=\"line\">    show_boxes(im_path, boxes, 0.2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    global net_proto</span><br><span class=\"line\">    global model_path</span><br><span class=\"line\">    global im_path</span><br><span class=\"line\">    <span class=\"comment\"># load net with model</span></span><br><span class=\"line\">    model = caffe.Net(net_proto, model_path, caffe.TEST)</span><br><span class=\"line\"></span><br><span class=\"line\">    predict(model, im_path)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>本博文记录博主对caffe的初步理解以及yolo在caffe上的运行</strong></p>\n<h2 id=\"一、数据处理篇\"><a href=\"#一、数据处理篇\" class=\"headerlink\" title=\"一、数据处理篇\"></a>一、数据处理篇</h2><h3 id=\"1-1-Dataset转化为LMDB\"><a href=\"#1-1-Dataset转化为LMDB\" class=\"headerlink\" title=\"1.1 Dataset转化为LMDB\"></a>1.1 Dataset转化为LMDB</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如先前所做的总结，在这里再次强调一下，首先要将数据转化为LMDB或LEVELDB格式，再输入至caffe的数据输入层。而图片转化为LMDB格式时，其形状或维度含义为[heights, weights, channels] 。其代码（位于caffe/src/caffe/util/io.cpp）如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void CVMatToDatum(const cv::Mat&amp; cv_img, Datum* datum) &#123;a  CHECK(cv_img.depth() == CV_8U) &lt;&lt; \"Image data type must be unsigned byte\";</span><br><span class=\"line\">  datum-&gt;set_channels(cv_img.channels());</span><br><span class=\"line\">  datum-&gt;set_height(cv_img.rows);</span><br><span class=\"line\">  datum-&gt;set_width(cv_img.cols);</span><br><span class=\"line\">  datum-&gt;clear_data();</span><br><span class=\"line\">  datum-&gt;clear_float_data();</span><br><span class=\"line\">  datum-&gt;set_encoded(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_channels = datum-&gt;channels();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_height = datum-&gt;height();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_width = datum-&gt;width();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> datum_size = datum_channels * datum_height * datum_width;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">buffer</span><span class=\"params\">(datum_size, <span class=\"string\">' '</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt; datum_height; ++h) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uchar* ptr = cv_img.ptr&lt;uchar&gt;(h);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> img_index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> w = <span class=\"number\">0</span>; w &lt; datum_width; ++w) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; datum_channels; ++c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> datum_index = (c * datum_height + h) * datum_width + w;</span><br><span class=\"line\">        buffer[datum_index] = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">char</span>&gt;(ptr[img_index++]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  datum-&gt;set_data(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而label文件对bounding-box的标记也从[Xmin, Ymin, Xmax, Ymax] 转化为[Xmid, Ymid, W, H]，同时，对其进行了归一化操作；并将不同class转为对应的index（按照label_map进行`映射）。其代码（位于caffe/src/caffe/util/io.cpp）如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ParseXmlToDatum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; annoname, <span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;&amp; label_map,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> ori_w, <span class=\"keyword\">int</span> ori_h, Datum* datum)</span> </span>&#123;</span><br><span class=\"line\">  ptree pt;</span><br><span class=\"line\">  read_xml(annoname, pt);</span><br><span class=\"line\">  int width(0), height(0);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    height = pt.get&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"string\">\"annotation.size.height\"</span>);</span><br><span class=\"line\">    width = pt.get&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"string\">\"annotation.size.width\"</span>);</span><br><span class=\"line\">    CHECK_EQ(ori_w, width);</span><br><span class=\"line\">    CHECK_EQ(ori_h, height);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">const</span> ptree_error &amp;e) &#123;</span><br><span class=\"line\">    LOG(WARNING) &lt;&lt; <span class=\"string\">\"When paring \"</span> &lt;&lt; annoname &lt;&lt; <span class=\"string\">\": \"</span> &lt;&lt; e.what();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  datum-&gt;clear_float_data();</span><br><span class=\"line\">  BOOST_FOREACH(ptree::value_type &amp;v1, pt.get_child(<span class=\"string\">\"annotation\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v1.first == <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">      ptree object = v1.second;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">label</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">      <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">float</span>&gt; box(<span class=\"number\">4</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">difficult</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">      BOOST_FOREACH(ptree::value_type &amp;v2, object.get_child(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">        ptree pt2 = v2.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v2.first == <span class=\"string\">\"name\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">string</span> name = pt2.data();</span><br><span class=\"line\">          <span class=\"comment\">// map name to label</span></span><br><span class=\"line\">          label = name_to_label(name, label_map);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (label &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            LOG(FATAL) &lt;&lt; <span class=\"string\">\"Anno file \"</span> &lt;&lt; annoname &lt;&lt; <span class=\"string\">\" -&gt; unknown name: \"</span> &lt;&lt; name;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v2.first == <span class=\"string\">\"bndbox\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> xmin = pt2.get(<span class=\"string\">\"xmin\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> ymin = pt2.get(<span class=\"string\">\"ymin\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> xmax = pt2.get(<span class=\"string\">\"xmax\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> ymax = pt2.get(<span class=\"string\">\"ymax\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">          LOG_IF(WARNING, xmin &lt; <span class=\"number\">0</span> || xmin &gt; ori_w) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, xmax &lt; <span class=\"number\">0</span> || xmax &gt; ori_w) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, ymin &lt; <span class=\"number\">0</span> || ymin &gt; ori_h) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, ymax &lt; <span class=\"number\">0</span> || ymax &gt; ori_h) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, xmin &gt; xmax) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          LOG_IF(WARNING, ymin &gt; ymax) &lt;&lt; annoname &lt;&lt;</span><br><span class=\"line\">              <span class=\"string\">\" bounding box exceeds image boundary\"</span>;</span><br><span class=\"line\">          box[<span class=\"number\">0</span>] = <span class=\"keyword\">float</span>(xmin + (xmax - xmin) / <span class=\"number\">2.</span>) / ori_w;</span><br><span class=\"line\">          box[<span class=\"number\">1</span>] = <span class=\"keyword\">float</span>(ymin + (ymax - ymin) / <span class=\"number\">2.</span>) / ori_h;</span><br><span class=\"line\">          box[<span class=\"number\">2</span>] = <span class=\"keyword\">float</span>(xmax - xmin) / ori_w;</span><br><span class=\"line\">          box[<span class=\"number\">3</span>] = <span class=\"keyword\">float</span>(ymax - ymin) / ori_h;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v2.first == <span class=\"string\">\"difficult\"</span>) &#123;</span><br><span class=\"line\">          difficult = atoi(pt2.data().c_str());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      CHECK_GE(label, <span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">\"label must start at 0\"</span>;</span><br><span class=\"line\">      datum-&gt;add_float_data(<span class=\"keyword\">float</span>(label));</span><br><span class=\"line\">      datum-&gt;add_float_data(<span class=\"keyword\">float</span>(difficult));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i) &#123;</span><br><span class=\"line\">        datum-&gt;add_float_data(box[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-DataLayer\"><a href=\"#1-2-DataLayer\" class=\"headerlink\" title=\"1.2 DataLayer\"></a>1.2 DataLayer</h3><p>yolo网络训练、测试时所用的DataLayer是BoxDataLayer，该数据输入层是由caffe-yolo原作者编写。这里做一下简单的代码分析：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> USE_OPENCV</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">// USE_OPENCV</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"caffe/data_transformer.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"caffe/layers/box_data_layer.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"caffe/util/benchmark.hpp\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> caffe &#123;</span><br><span class=\"line\"><span class=\"comment\">//构造函数，初始化Layer参数，reader_参数; BasePrefetchingDataLayer带预取功能的数据读取层</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\">BoxDataLayer&lt;Dtype&gt;::BoxDataLayer(<span class=\"keyword\">const</span> LayerParameter&amp; param)</span><br><span class=\"line\">  : BasePrefetchingDataLayer&lt;Dtype&gt;(param),</span><br><span class=\"line\">    reader_(param) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解析函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\">BoxDataLayer&lt;Dtype&gt;::~BoxDataLayer() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;StopInternalThread();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//BoxDataLayer层设置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BoxDataLayer&lt;Dtype&gt;::DataLayerSetUp(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;Blob&lt;Dtype&gt;*&gt;&amp; bottom,</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;Blob&lt;Dtype&gt;*&gt;&amp; top) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;box_label_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> DataParameter param = <span class=\"keyword\">this</span>-&gt;layer_param_.data_param();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> batch_size = param.batch_size();</span><br><span class=\"line\">  <span class=\"comment\">// 读取数据，并使用它来初始化blob的top。</span></span><br><span class=\"line\">  Datum&amp; datum = *(reader_.full().peek());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用data_transformer从datum得到预期的blob形状。</span></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; top_shape = <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;InferBlobShape(datum);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;transformed_data_.Reshape(top_shape);</span><br><span class=\"line\">  <span class=\"comment\">// Reshape top[0] and prefetch_data according to the batch_size.</span></span><br><span class=\"line\">  top_shape[<span class=\"number\">0</span>] = batch_size;</span><br><span class=\"line\">  top[<span class=\"number\">0</span>]-&gt;Reshape(top_shape);</span><br><span class=\"line\">  <span class=\"comment\">//PREFETCH_COUNT-预取的数据批量数目</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;PREFETCH_COUNT; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;prefetch_[i].data_.Reshape(top_shape);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  LOG(INFO) &lt;&lt; <span class=\"string\">\"output data size: \"</span> &lt;&lt; top[<span class=\"number\">0</span>]-&gt;num() &lt;&lt; <span class=\"string\">\",\"</span></span><br><span class=\"line\">      &lt;&lt; top[<span class=\"number\">0</span>]-&gt;channels() &lt;&lt; <span class=\"string\">\",\"</span> &lt;&lt; top[<span class=\"number\">0</span>]-&gt;height() &lt;&lt; <span class=\"string\">\",\"</span></span><br><span class=\"line\">      &lt;&lt; top[<span class=\"number\">0</span>]-&gt;width();</span><br><span class=\"line\">  <span class=\"comment\">// label</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;output_labels_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param.side_size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; param.side_size(); ++i) &#123;</span><br><span class=\"line\">        sides_.push_back(param.side(i));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sides_.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      sides_.push_back(<span class=\"number\">7</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CHECK_EQ(sides_.size(), top.size() - <span class=\"number\">1</span>) &lt;&lt;</span><br><span class=\"line\">      <span class=\"string\">\"side num not equal to top size\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;PREFETCH_COUNT; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;prefetch_[i].multi_label_.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sides_.size(); ++i) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; label_shape(<span class=\"number\">1</span>, batch_size);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> label_size = sides_[i] * sides_[i] * (<span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">4</span>);</span><br><span class=\"line\">      label_shape.push_back(label_size);</span><br><span class=\"line\">      top[i+<span class=\"number\">1</span>]-&gt;Reshape(label_shape);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"keyword\">this</span>-&gt;PREFETCH_COUNT; ++j) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">shared_ptr</span>&lt;Blob&lt;Dtype&gt; &gt; tmp_blob;</span><br><span class=\"line\">        tmp_blob.reset(<span class=\"keyword\">new</span> Blob&lt;Dtype&gt;(label_shape));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;prefetch_[j].multi_label_.push_back(tmp_blob);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This function is called on prefetch thread</span></span><br><span class=\"line\"><span class=\"comment\">// 批量导入数据</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BoxDataLayer&lt;Dtype&gt;::load_batch(Batch&lt;Dtype&gt;* batch) &#123;</span><br><span class=\"line\">  CPUTimer batch_timer;</span><br><span class=\"line\">  batch_timer.Start();</span><br><span class=\"line\">  <span class=\"keyword\">double</span> read_time = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">double</span> trans_time = <span class=\"number\">0</span>;</span><br><span class=\"line\">  CPUTimer timer;</span><br><span class=\"line\">  CHECK(batch-&gt;data_.count());</span><br><span class=\"line\">  CHECK(<span class=\"keyword\">this</span>-&gt;transformed_data_.count());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reshape according to the first datum of each batch</span></span><br><span class=\"line\">  <span class=\"comment\">// on single input batches allows for inputs of varying dimension.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> batch_size = <span class=\"keyword\">this</span>-&gt;layer_param_.data_param().batch_size();</span><br><span class=\"line\">  Datum&amp; datum = *(reader_.full().peek());</span><br><span class=\"line\">  <span class=\"comment\">// Use data_transformer to infer the expected blob shape from datum.</span></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; top_shape = <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;InferBlobShape(datum);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;transformed_data_.Reshape(top_shape);</span><br><span class=\"line\">  <span class=\"comment\">// Reshape batch according to the batch_size.</span></span><br><span class=\"line\">  top_shape[<span class=\"number\">0</span>] = batch_size;</span><br><span class=\"line\">  batch-&gt;data_.Reshape(top_shape);</span><br><span class=\"line\"></span><br><span class=\"line\">  Dtype* top_data = batch-&gt;data_.mutable_cpu_data();</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;Dtype*&gt; top_label;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;output_labels_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sides_.size(); ++i) &#123;</span><br><span class=\"line\">      top_label.push_back(batch-&gt;multi_label_[i]-&gt;mutable_cpu_data());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> item_id = <span class=\"number\">0</span>; item_id &lt; batch_size; ++item_id) &#123;</span><br><span class=\"line\">    timer.Start();</span><br><span class=\"line\">    <span class=\"comment\">// get a datum</span></span><br><span class=\"line\">    Datum&amp; datum = *(reader_.full().pop(<span class=\"string\">\"Waiting for data\"</span>));</span><br><span class=\"line\">    read_time += timer.MicroSeconds();</span><br><span class=\"line\">    timer.Start();</span><br><span class=\"line\">    <span class=\"comment\">// Apply data transformations (mirror, scale, crop...)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = batch-&gt;data_.offset(item_id);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;BoxLabel&gt; box_labels;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;transformed_data_.set_cpu_data(top_data + offset);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;output_labels_) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// rand sample a patch, adjust box labels</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;Transform(datum, &amp;(<span class=\"keyword\">this</span>-&gt;transformed_data_), &amp;box_labels);</span><br><span class=\"line\">      <span class=\"comment\">// transform label</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sides_.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> label_offset = batch-&gt;multi_label_[i]-&gt;offset(item_id);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count  = batch-&gt;multi_label_[i]-&gt;count(<span class=\"number\">1</span>);</span><br><span class=\"line\">        transform_label(count, top_label[i] + label_offset, box_labels, sides_[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;data_transformer_-&gt;Transform(datum, &amp;(<span class=\"keyword\">this</span>-&gt;transformed_data_));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trans_time += timer.MicroSeconds();</span><br><span class=\"line\"></span><br><span class=\"line\">    reader_.<span class=\"built_in\">free</span>().push(<span class=\"keyword\">const_cast</span>&lt;Datum*&gt;(&amp;datum));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  timer.Stop();</span><br><span class=\"line\">  batch_timer.Stop();</span><br><span class=\"line\">  DLOG(INFO) &lt;&lt; <span class=\"string\">\"Prefetch batch: \"</span> &lt;&lt; batch_timer.MilliSeconds() &lt;&lt; <span class=\"string\">\" ms.\"</span>;</span><br><span class=\"line\">  DLOG(INFO) &lt;&lt; <span class=\"string\">\"     Read time: \"</span> &lt;&lt; read_time / <span class=\"number\">1000</span> &lt;&lt; <span class=\"string\">\" ms.\"</span>;</span><br><span class=\"line\">  DLOG(INFO) &lt;&lt; <span class=\"string\">\"Transform time: \"</span> &lt;&lt; trans_time / <span class=\"number\">1000</span> &lt;&lt; <span class=\"string\">\" ms.\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成通过数据转化器生成的数据对应的label</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Dtype&gt;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BoxDataLayer&lt;Dtype&gt;::transform_label(<span class=\"keyword\">int</span> count, Dtype* top_label,</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;BoxLabel&gt;&amp; box_labels, <span class=\"keyword\">int</span> side) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> locations = <span class=\"built_in\">pow</span>(side, <span class=\"number\">2</span>);</span><br><span class=\"line\">  CHECK_EQ(count, locations * <span class=\"number\">7</span>) &lt;&lt;</span><br><span class=\"line\">    <span class=\"string\">\"side and count not match\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// difficult</span></span><br><span class=\"line\">  caffe_set(locations, Dtype(<span class=\"number\">0</span>), top_label);</span><br><span class=\"line\">  <span class=\"comment\">// isobj</span></span><br><span class=\"line\">  caffe_set(locations, Dtype(<span class=\"number\">0</span>), top_label + locations);</span><br><span class=\"line\">  <span class=\"comment\">// class label</span></span><br><span class=\"line\">  caffe_set(locations, Dtype(<span class=\"number\">-1</span>), top_label + locations * <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// box</span></span><br><span class=\"line\">  caffe_set(locations*<span class=\"number\">4</span>, Dtype(<span class=\"number\">0</span>), top_label + locations * <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; box_labels.size(); ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> difficult = box_labels[i].difficult_;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (difficult != <span class=\"number\">0.</span> &amp;&amp; difficult != <span class=\"number\">1.</span>) &#123;</span><br><span class=\"line\">      LOG(WARNING) &lt;&lt; <span class=\"string\">\"Difficult must be 0 or 1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> class_label = box_labels[i].class_label_;</span><br><span class=\"line\">    CHECK_GE(class_label, <span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">\"class_label must &gt;= 0\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> x = box_labels[i].box_[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> y = box_labels[i].box_[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// LOG(INFO) &lt;&lt; \"x: \" &lt;&lt; x &lt;&lt; \" y: \" &lt;&lt; y;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x_index = <span class=\"built_in\">floor</span>(x * side);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y_index = <span class=\"built_in\">floor</span>(y * side);</span><br><span class=\"line\">    x_index = <span class=\"built_in\">std</span>::min(x_index, side - <span class=\"number\">1</span>);</span><br><span class=\"line\">    y_index = <span class=\"built_in\">std</span>::min(y_index, side - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dif_index = side * y_index + x_index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> obj_index = locations + dif_index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> class_index = locations * <span class=\"number\">2</span> + dif_index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cor_index = locations * <span class=\"number\">3</span> + dif_index * <span class=\"number\">4</span>;</span><br><span class=\"line\">    top_label[dif_index] = difficult;</span><br><span class=\"line\">    top_label[obj_index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// LOG(INFO) &lt;&lt; \"dif_index: \" &lt;&lt; dif_index &lt;&lt; \" class_label: \" &lt;&lt; class_label;</span></span><br><span class=\"line\">    top_label[class_index] = class_label;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; ++j) &#123;</span><br><span class=\"line\">      top_label[cor_index + j] = box_labels[i].box_[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实例化BoxDataLayer、BoxData</span></span><br><span class=\"line\">INSTANTIATE_CLASS(BoxDataLayer);</span><br><span class=\"line\">REGISTER_LAYER_CLASS(BoxData);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  <span class=\"comment\">// namespace caffe</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-Input与预处理\"><a href=\"#1-3-Input与预处理\" class=\"headerlink\" title=\"1.3 Input与预处理\"></a>1.3 Input与预处理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在进行图像预处理时，可以使用去均值操作，其目的是使得像素值更接近（0,0,0）原点，从而加快收敛速度。如果在数据层加入去均值操作，预测时也需要进行去均值操作。如无，则无需！其方法如下：</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//(104,117,123)为imagenet均值，可自行根据数据集生成均值。</span></span><br><span class=\"line\">mean<span class=\"number\">_</span><span class=\"keyword\">value</span>: <span class=\"number\">104</span></span><br><span class=\"line\">mean<span class=\"number\">_</span><span class=\"keyword\">value</span>: <span class=\"number\">117</span></span><br><span class=\"line\">mean<span class=\"number\">_</span><span class=\"keyword\">value</span>: <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;同时，图像预处理的目的之一是保证输入数据与网络输入层所要求的shape保持一致。通过opencv.imread(img_path)函数读取的图片为（heights, weights, channels）。而deploy.prototxt中的input层为（channels, heights, weights）。因此，在进行预测时需要对输入图片进行预处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = cv2.imread(im_path)</span><br><span class=\"line\">im = cv2.resize(im, (<span class=\"number\">160</span>, <span class=\"number\">160</span>))</span><br><span class=\"line\">im = np.require(im.transpose((<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)), dtype=np.float32)</span><br><span class=\"line\"><span class=\"comment\">#在训练时没有进行去均值，因此在预测时也没有进行去均值。</span></span><br><span class=\"line\"><span class=\"comment\">#im -= mean</span></span><br></pre></td></tr></table></figure>\n\n<p>而转化为graph文件后，其网络输入层为（heights, weights, channels），附件为转为graph文件后的网络结构图：<br><a href=\"output.gv.svg\">点击查看或下载</a><br>因此，无需对输入图片进行预处理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = cv2.imread(input_image_path)</span><br><span class=\"line\">im = cv2.resize(im, (160, 160))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、caffe简介\"><a href=\"#二、caffe简介\" class=\"headerlink\" title=\"二、caffe简介\"></a>二、caffe简介</h2><h3 id=\"2-1-Project结构\"><a href=\"#2-1-Project结构\" class=\"headerlink\" title=\"2.1 Project结构\"></a>2.1 Project结构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在caffe架构下搭建网络是通过prototxt文件描述的，以此建立统一的参数管理机制。在prototxt文件中，不仅包含基本的网络结构，还包含Loss层（Train时需要）、输入数据的路径和结构（Train与Test时需要）、输入数据size/ shape（如160<em>160</em>3,Deploy时需要）。因此，不同于keras，caffe的网络结构文件需要多个。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先，solver.prototxt（即求解器）的主要功能是设置超参数，确定优化方式；其次， train.prototxt与test.prototxt的主要功能是搭建网络结构，设置结构参数用于训练与测试，确定loss层；最后，deploy.prototxt的主要功能是搭建最基础的网络结构用于预测。<br><img src=\"/2019/01/08/caffe-yolo-summary/1.png\" alt=\"效果图\"></p>\n<h3 id=\"2-2-网络结构\"><a href=\"#2-2-网络结构\" class=\"headerlink\" title=\"2.2 网络结构\"></a>2.2 网络结构</h3><p>deploy.prototxt内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: <span class=\"string\">\"tiny-yolo\"</span></span><br><span class=\"line\">input: <span class=\"string\">\"data\"</span></span><br><span class=\"line\">input_shape &#123;</span><br><span class=\"line\">  dim: 1</span><br><span class=\"line\">  dim: 3</span><br><span class=\"line\">  dim: 160</span><br><span class=\"line\">  dim: 160</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"data\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv1\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 16</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn1\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool1\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool1\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool1\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv2\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 32</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn2\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool2\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool2\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool2\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv3\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 64</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn3\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool3\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool3\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool3\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv4\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 128</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn4\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool4\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool4\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool4\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv5\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 256</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn5\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool5\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool5\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool5\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv6\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 512</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn6\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"pool6\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Pooling\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"pool6\"</span></span><br><span class=\"line\">  pooling_param &#123;</span><br><span class=\"line\">    pool: MAX</span><br><span class=\"line\">    kernel_size: 2</span><br><span class=\"line\">    stride: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"pool6\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv7\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 1024</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn7\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu7\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"conv8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Convolution\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale7\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"conv8\"</span></span><br><span class=\"line\">  convolution_param &#123;</span><br><span class=\"line\">    num_output: 256</span><br><span class=\"line\">    kernel_size: 3</span><br><span class=\"line\">    pad: 1</span><br><span class=\"line\">    bias_term: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"bn8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"BatchNorm\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"conv8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"bn8\"</span></span><br><span class=\"line\">  batch_norm_param &#123;</span><br><span class=\"line\">    use_global_stats: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"Scale\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"bn8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  scale_param &#123;</span><br><span class=\"line\">    bias_term: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"relu8\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"ReLU\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  relu_param &#123;</span><br><span class=\"line\">    negative_slope: 0.1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">layer &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"fc9\"</span></span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">\"InnerProduct\"</span></span><br><span class=\"line\">  bottom: <span class=\"string\">\"scale8\"</span></span><br><span class=\"line\">  top: <span class=\"string\">\"fc9\"</span></span><br><span class=\"line\">  inner_product_param &#123;</span><br><span class=\"line\">    num_output: 300</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、Tiny-YOLO\"><a href=\"#三、Tiny-YOLO\" class=\"headerlink\" title=\"三、Tiny YOLO\"></a>三、Tiny YOLO</h2><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;Tiny-YOLO是YOLO算法的简单实现。相比于YOLO算法，它的网络结构更浅，仅有9层。除此外，其理论基础与YOLO并无二致。</strong></p>\n<h3 id=\"3-1-Yolo-Innovation\"><a href=\"#3-1-Yolo-Innovation\" class=\"headerlink\" title=\"3.1 Yolo Innovation\"></a>3.1 Yolo Innovation</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO算法首创的实现了端到端的目标检测算法，是速度惊人、准确度较好的one-stage算法。YOLO算法将整张图片划分为SXS的grid，采用一次性预测所有格子所含目标的bounding-box、confidence以及P(object)和P(class|object)。<br>&nbsp;&nbsp;&nbsp;&nbsp;网络的输出结果为一个向量，size为：S * S * (B * 5 +C)。其中，S为划分网格数，B为每个网格负责目标个数，C为类别个数。其含义为：每个网格会对应B个边界框，边界框的宽高范围为全图，而中心点落于该网格；每个边界框对应一个置信度值，代表该处是否有物体及定位准确度（即Confidence = P(object) * IOU(predict-box, ground-truth)。）；每个网格对应C个概率，分别代表每个class出现的概率。<br>&nbsp;&nbsp;&nbsp;&nbsp;而YOLO是如何实现对输入图像的分格呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;原作者巧妙地在最后预测层设置了S * S * (B * 5 +C)个神经元（该层为全连接层，在yolo2中该层为1*1的卷积层），通过训练将对应不同网格的ground-truth收敛到对应的网格的输出中。</p>\n<h3 id=\"3-2-Loss\"><a href=\"#3-2-Loss\" class=\"headerlink\" title=\"3.2 Loss\"></a>3.2 Loss</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;损失函数的设计目标就是让坐标（x,y,w,h），confidence，classification 这个三个方面达到很好的平衡。简单的全部采用了sum-squared error loss来做这件事会有以下不足：<br>首先，(num_side*4)维的localization error和(num_classes)维的classification error每一个维度产生的代价同等重要，这显然是不合理的。<br>其次，如果一些栅格中没有object（一幅图中这种栅格很多），那么就会将这些栅格中的bounding box的confidence置为0，相比于较少的有object的栅格，这些不包含物体的栅格对梯度更新的贡献会远大于包含物体的栅格对梯度更新的贡献，这会导致网络不稳定甚至发散。<br>&nbsp;&nbsp;&nbsp;&nbsp;因此，YOLO采取了更有效的Loss函数。将loss函数分为3部分：第一，坐标预测是否准确(图片中书写有误，xy值与groundtruth应相减不因相加)；第二，有无object预测是否准确；第三，类别预测。<br><img src=\"/2019/01/08/caffe-yolo-summary/2.png\" alt=\"效果图\"><br><img src=\"/2019/01/08/caffe-yolo-summary/3.png\" alt=\"效果图\"><br>&nbsp;&nbsp;&nbsp;&nbsp;更重视8维的坐标预测，给这些损失前面赋予更大的loss weight, 记为 λcoord ,在pascal VOC训练中取5。对没有object的bbox的confidence loss，赋予小的loss weight，记为 λnoobj ，在pascal VOC训练中取0.5。有object的bbox的confidence loss 和类别的loss 的loss weight正常取1。<br>&nbsp;&nbsp;&nbsp;&nbsp;对不同大小的bbox预测中，相比于大bbox预测偏一点，小box预测偏相同的尺寸对IOU的影响更大。而sum-square error loss中对同样的偏移loss是一样。为了缓和这个问题，作者用了一个巧妙的办法，就是将box的width和height取平方根代替原本的height和width。 如下：small bbox的横轴值较小，发生偏移时，反应到y轴上的loss（下图绿色）比big box(下图红色)要大。<br><img src=\"/2019/01/08/caffe-yolo-summary/4.png\" alt=\"效果图\"></p>\n<h2 id=\"四、Train-amp-amp-Test\"><a href=\"#四、Train-amp-amp-Test\" class=\"headerlink\" title=\"四、Train &amp;&amp; Test\"></a>四、Train &amp;&amp; Test</h2><h3 id=\"4-1-Optimization\"><a href=\"#4-1-Optimization\" class=\"headerlink\" title=\"4.1 Optimization\"></a>4.1 Optimization</h3><p>本项目测试过SGD、momentum 、Adam。最终，Adam效果最佳。</p>\n<h3 id=\"4-2-solver-prototxt-Adam\"><a href=\"#4-2-solver-prototxt-Adam\" class=\"headerlink\" title=\"4.2 solver.prototxt(Adam)\"></a>4.2 solver.prototxt(Adam)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net: <span class=\"string\">\"x_train.prototxt\"</span></span><br><span class=\"line\">test_iter: 3000</span><br><span class=\"line\">test_interval: 32000</span><br><span class=\"line\">test_initialization: <span class=\"literal\">false</span></span><br><span class=\"line\">display: 20</span><br><span class=\"line\">average_loss: 100</span><br><span class=\"line\">lr_policy: <span class=\"string\">\"multifixed\"</span></span><br><span class=\"line\">stagelr: 0.001</span><br><span class=\"line\">stagelr: 0.0001</span><br><span class=\"line\">stagelr: 0.00001</span><br><span class=\"line\">stagelr: 0.000001</span><br><span class=\"line\">stageiter: 520</span><br><span class=\"line\">stageiter: 16000</span><br><span class=\"line\">stageiter: 24000</span><br><span class=\"line\">stageiter: 32000</span><br><span class=\"line\">max_iter: 32000</span><br><span class=\"line\">momentum: 0.9</span><br><span class=\"line\">weight_decay: 0.0005</span><br><span class=\"line\">snapshot: 2000</span><br><span class=\"line\">snapshot_prefix: <span class=\"string\">\"./models/x_yolo\"</span></span><br><span class=\"line\">solver_mode: GPU</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-train-prototxt\"><a href=\"#4-3-train-prototxt\" class=\"headerlink\" title=\"4.3 train.prototxt\"></a>4.3 train.prototxt</h3><p><a href=\"train.prototxt\">点击下载</a></p>\n<h2 id=\"五、Predict\"><a href=\"#五、Predict\" class=\"headerlink\" title=\"五、Predict\"></a>五、Predict</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.insert(0, <span class=\"string\">'/home/mc/Desktop/caffe/caffe/python/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">import caffe</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"><span class=\"comment\">#global variable set start#</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"></span><br><span class=\"line\">num_classes = 2</span><br><span class=\"line\">num_anchors = 2</span><br><span class=\"line\">side = 5</span><br><span class=\"line\"></span><br><span class=\"line\">net_proto = <span class=\"string\">\"./x_deploy.prototxt\"</span></span><br><span class=\"line\">model_path = <span class=\"string\">\"./models/x_yolo_iter_32000.caffemodel\"</span></span><br><span class=\"line\">im_path = <span class=\"string\">'/home/mc/Desktop/caffe-yolo/data/yolo/VOCdevkit/VOC2018/JPEGImages/826.jpg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"><span class=\"comment\">#global variable set end..#</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#environment sets</span></span><br><span class=\"line\">caffe.set_device(0)</span><br><span class=\"line\">caffe.set_mode_gpu()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nms filter</span></span><br><span class=\"line\">def nms(boxes, thresh):</span><br><span class=\"line\">    x1 = boxes[:, 0] - boxes[:, 2] / 2.</span><br><span class=\"line\">    y1 = boxes[:, 1] - boxes[:, 3] / 2.</span><br><span class=\"line\">    x2 = boxes[:, 0] + boxes[:, 2] / 2.</span><br><span class=\"line\">    y2 = boxes[:, 1] + boxes[:, 3] / 2.</span><br><span class=\"line\">    scores = boxes[:, 4]</span><br><span class=\"line\">    areas = (x2 - x1 + 1) * (y2 - y1 + 1)</span><br><span class=\"line\">    order = scores.argsort()[::-1]</span><br><span class=\"line\">    keep = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> order.size &gt; 0:</span><br><span class=\"line\">        i = order[0]</span><br><span class=\"line\">        keep.append(i)</span><br><span class=\"line\">        ix1 = np.maximum(x1[i], x1[order[1:]])</span><br><span class=\"line\">        iy1 = np.maximum(y1[i], y1[order[1:]])</span><br><span class=\"line\">        ix2 = np.minimum(x2[i], x2[order[1:]])</span><br><span class=\"line\">        iy2 = np.minimum(y2[i], y2[order[1:]])</span><br><span class=\"line\">        w = np.maximum(0.0, ix2-ix1+1)</span><br><span class=\"line\">        h = np.maximum(0.0, iy2-iy1+1)</span><br><span class=\"line\">        inter = w * h</span><br><span class=\"line\">        ovr = inter / (areas[i] + areas[order[1:]] - inter)</span><br><span class=\"line\">        inds = np.where(ovr &lt;= thresh)[0]</span><br><span class=\"line\">        order = order[inds + 1]</span><br><span class=\"line\">    <span class=\"built_in\">return</span> boxes[np.require(keep), :]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#parse result</span></span><br><span class=\"line\">def parse_result(out_put):</span><br><span class=\"line\">    global num_classes</span><br><span class=\"line\">    global num_anchors</span><br><span class=\"line\">    global side</span><br><span class=\"line\">    locations = side ** 2</span><br><span class=\"line\">    boxes = np.zeros((num_anchors * locations, 6), dtype=np.float32)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(locations):</span><br><span class=\"line\">        tmp_scores = out_put[i:num_classes*locations:locations]</span><br><span class=\"line\">        max_class_ind = np.argsort(tmp_scores)[-1]</span><br><span class=\"line\">        max_prob = np.max(tmp_scores)</span><br><span class=\"line\">        obj_index = num_classes * locations + i</span><br><span class=\"line\">        obj_scores = max_prob * out_put[obj_index:(obj_index+num_anchors*locations):locations]</span><br><span class=\"line\">        coor_index = (num_classes + num_anchors) * locations + i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(num_anchors):</span><br><span class=\"line\">           boxes[i*num_anchors+j][5] = max_class_ind</span><br><span class=\"line\">           boxes[i*num_anchors+j][4] = obj_scores[j]</span><br><span class=\"line\">           box_index = coor_index + j * 4 * locations</span><br><span class=\"line\">           boxes[i*num_anchors+j][0] = (i % side + out_put[box_index + 0 * locations]) / <span class=\"built_in\">float</span>(side)</span><br><span class=\"line\">           boxes[i*num_anchors+j][1] = (i / side + out_put[box_index + 1 * locations]) / <span class=\"built_in\">float</span>(side)</span><br><span class=\"line\">           boxes[i*num_anchors+j][2] = out_put[box_index + 2 * locations] ** 2</span><br><span class=\"line\">           boxes[i*num_anchors+j][3] = out_put[box_index + 3 * locations] ** 2</span><br><span class=\"line\">    <span class=\"built_in\">return</span> nms(boxes, 0.5)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#show or write result_picture</span></span><br><span class=\"line\">def show_boxes(im_path, boxes, sthresh=0.5, hthresh=1, show=0):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (boxes.shape)</span><br><span class=\"line\">    im = cv2.imread(im_path)</span><br><span class=\"line\">    ori_w = im.shape[1]</span><br><span class=\"line\">    ori_h = im.shape[0]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> box <span class=\"keyword\">in</span> boxes:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> box[4] &lt; sthresh:</span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> box[4] &gt; hthresh:</span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (box)</span><br><span class=\"line\">        box = box[:4]</span><br><span class=\"line\">        x1 = max(0, int((box[0] - box[2] / 2.) * ori_w))</span><br><span class=\"line\">        y1 = max(0, int((box[1] - box[3] / 2.) * ori_h))</span><br><span class=\"line\">        x2 = min(ori_w - 1, int((box[0] + box[2] / 2.) * ori_w))</span><br><span class=\"line\">        y2 = min(ori_h - 1, int((box[1] + box[3] / 2.) * ori_h))</span><br><span class=\"line\">        cv2.rectangle(im, (x1, y1), (x2, y2), (0, 255, 255), 2)</span><br><span class=\"line\">    name = os.path.split(im_path)[1].split(<span class=\"string\">'.'</span>)[0]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> show:</span><br><span class=\"line\">        cv2.imshow(<span class=\"string\">\"out\"</span>, im)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cv2.imwrite(<span class=\"string\">\"adam-out-n\"</span>+name+<span class=\"string\">'.jpg'</span>, im)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># predict</span></span><br><span class=\"line\">def predict(model, im_path):</span><br><span class=\"line\">    <span class=\"comment\"># image pre-processing</span></span><br><span class=\"line\">    im = cv2.imread(im_path)</span><br><span class=\"line\">    im = cv2.resize(im, (160, 160))</span><br><span class=\"line\">    im = np.require(im.transpose((2, 0, 1)), dtype=np.float32)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># forward process...</span></span><br><span class=\"line\">    model.blobs[<span class=\"string\">'data'</span>].data[...] = im</span><br><span class=\"line\">    out_blobs = model.forward()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"string\">''</span><span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    The structure of out_put is:</span></span><br><span class=\"line\"><span class=\"string\">    [n*n*class1,n*n*class2,...,n*n*class(i),n*n*score1,n*n*score2,n*n*(x,y,w,h)1,n*n*(x,y,w,h)2]</span></span><br><span class=\"line\"><span class=\"string\">    p.s. n is side</span></span><br><span class=\"line\"><span class=\"string\">    '</span><span class=\"string\">''</span></span><br><span class=\"line\">    reg_out = out_blobs[<span class=\"string\">\"fc9\"</span>]</span><br><span class=\"line\">    boxes = parse_result(reg_out[0])</span><br><span class=\"line\">    show_boxes(im_path, boxes, 0.2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    global net_proto</span><br><span class=\"line\">    global model_path</span><br><span class=\"line\">    global im_path</span><br><span class=\"line\">    <span class=\"comment\"># load net with model</span></span><br><span class=\"line\">    model = caffe.Net(net_proto, model_path, caffe.TEST)</span><br><span class=\"line\"></span><br><span class=\"line\">    predict(model, im_path)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/6.png","slug":"6.png","post":"cjyjsmkzc0009afp2386vkq8b","modified":1,"renderable":0},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/3.png","slug":"3.png","post":"cjyjsmkzc0009afp2386vkq8b","modified":1,"renderable":0},{"_id":"source/_posts/Markdown-tutorial/1553769689177.png","post":"cjyjsmkza0005afp2ypfzcl1y","slug":"1553769689177.png","modified":1,"renderable":1},{"_id":"source/_posts/Windows-System-Ubuntu16-04/1.PNG","post":"cjyjsmkzb0006afp24vz1c632","slug":"1.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Windows-System-Ubuntu16-04/2.PNG","post":"cjyjsmkzb0006afp24vz1c632","slug":"2.PNG","modified":1,"renderable":1},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/1.png","post":"cjyjsmkzc0009afp2386vkq8b","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/2.png","post":"cjyjsmkzc0009afp2386vkq8b","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/4.png","post":"cjyjsmkzc0009afp2386vkq8b","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/安装教程：Ubuntu16-04-CUDA9-0-CUDNN7-1-caffe-gpu-opencv/5.png","post":"cjyjsmkzc0009afp2386vkq8b","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/caffe-yolo-summary/1.png","post":"cjyjsml24000tafp2539050u8","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/caffe-yolo-summary/2.png","post":"cjyjsml24000tafp2539050u8","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/caffe-yolo-summary/3.png","post":"cjyjsml24000tafp2539050u8","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/caffe-yolo-summary/4.png","post":"cjyjsml24000tafp2539050u8","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/caffe-yolo-summary/git-cercs-13-06.pdf","slug":"git-cercs-13-06.pdf","post":"cjyjsml24000tafp2539050u8","modified":1,"renderable":0},{"_id":"source/_posts/caffe-yolo-summary/output.gv.svg","post":"cjyjsml24000tafp2539050u8","slug":"output.gv.svg","modified":1,"renderable":1},{"_id":"source/_posts/caffe-yolo-summary/train.prototxt","post":"cjyjsml24000tafp2539050u8","slug":"train.prototxt","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjyjsmkz10000afp2kaaw9twk","tag_id":"cjyjsmkz70003afp2a5e7l07v","_id":"cjyjsmkzc0008afp2zy5qgqyu"},{"post_id":"cjyjsmkz60002afp2nb4bjdlk","tag_id":"cjyjsmkzc0007afp280y61ioa","_id":"cjyjsmkzg000eafp2ywuau8nn"},{"post_id":"cjyjsmkz60002afp2nb4bjdlk","tag_id":"cjyjsmkze000bafp2q8q0pvsw","_id":"cjyjsmkzg000fafp2e42l9abv"},{"post_id":"cjyjsmkz90004afp2ah2vf3bo","tag_id":"cjyjsmkz70003afp2a5e7l07v","_id":"cjyjsmkzh000hafp2m0r4xw6v"},{"post_id":"cjyjsmkza0005afp2ypfzcl1y","tag_id":"cjyjsmkze000bafp2q8q0pvsw","_id":"cjyjsmkzi000jafp2mh114h0y"},{"post_id":"cjyjsmkzb0006afp24vz1c632","tag_id":"cjyjsmkzc0007afp280y61ioa","_id":"cjyjsmkzj000mafp2jirkofuk"},{"post_id":"cjyjsmkzb0006afp24vz1c632","tag_id":"cjyjsmkze000bafp2q8q0pvsw","_id":"cjyjsmkzj000nafp2wyp9abzu"},{"post_id":"cjyjsmkzc0009afp2386vkq8b","tag_id":"cjyjsmkzj000lafp27k5gtwq9","_id":"cjyjsmkzk000pafp2mqt1vdy4"},{"post_id":"cjyjsmkzd000aafp2l9qf12re","tag_id":"cjyjsmkzk000oafp29dobycz0","_id":"cjyjsmkzk000rafp2h3prj8f7"},{"post_id":"cjyjsmkze000cafp2fdrak4mi","tag_id":"cjyjsmkzk000oafp29dobycz0","_id":"cjyjsmkzk000safp2d1dl6jtp"},{"post_id":"cjyjsml24000tafp2539050u8","tag_id":"cjyjsmkzj000lafp27k5gtwq9","_id":"cjyjsml27000vafp2adwbte6s"},{"post_id":"cjyjsml24000tafp2539050u8","tag_id":"cjyjsml25000uafp2fto3ei9s","_id":"cjyjsml27000wafp2rodr52p8"}],"Tag":[{"name":"git","_id":"cjyjsmkz70003afp2a5e7l07v"},{"name":"Ubuntu","_id":"cjyjsmkzc0007afp280y61ioa"},{"name":"Tutorial","_id":"cjyjsmkze000bafp2q8q0pvsw"},{"name":"caffe","_id":"cjyjsmkzj000lafp27k5gtwq9"},{"name":"生活点滴","_id":"cjyjsmkzk000oafp29dobycz0"},{"name":"cv","_id":"cjyjsml25000uafp2fto3ei9s"}]}}